
battlebot_receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a50  080001f0  080001f0  000011f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a14  08004c40  08004c40  00005c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005654  08005654  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005654  08005654  00006654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800565c  0800565c  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800565c  0800565c  0000665c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005660  08005660  00006660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005664  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f74  20000068  080056cc  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001fdc  080056cc  00007fdc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c57  00000000  00000000  00007091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030c2  00000000  00000000  0001bce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  0001edb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00003949  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000142e6  00000000  00000000  00023a11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a2c32  00000000  00000000  00037cf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000da929  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000ecb  00000000  00000000  000da96c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005308  00000000  00000000  000db838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000e0b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000068 	.word	0x20000068
 800020c:	00000000 	.word	0x00000000
 8000210:	08004c28 	.word	0x08004c28

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	2000006c 	.word	0x2000006c
 800022c:	08004c28 	.word	0x08004c28

08000230 <strcmp>:
 8000230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000238:	2a01      	cmp	r2, #1
 800023a:	bf28      	it	cs
 800023c:	429a      	cmpcs	r2, r3
 800023e:	d0f7      	beq.n	8000230 <strcmp>
 8000240:	1ad0      	subs	r0, r2, r3
 8000242:	4770      	bx	lr

08000244 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000244:	b480      	push	{r7}
 8000246:	b085      	sub	sp, #20
 8000248:	af00      	add	r7, sp, #0
 800024a:	60f8      	str	r0, [r7, #12]
 800024c:	60b9      	str	r1, [r7, #8]
 800024e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	4a06      	ldr	r2, [pc, #24]	@ (800026c <vApplicationGetIdleTaskMemory+0x28>)
 8000254:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000256:	68bb      	ldr	r3, [r7, #8]
 8000258:	4a05      	ldr	r2, [pc, #20]	@ (8000270 <vApplicationGetIdleTaskMemory+0x2c>)
 800025a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2280      	movs	r2, #128	@ 0x80
 8000260:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000262:	bf00      	nop
 8000264:	3714      	adds	r7, #20
 8000266:	46bd      	mov	sp, r7
 8000268:	bc80      	pop	{r7}
 800026a:	4770      	bx	lr
 800026c:	20000084 	.word	0x20000084
 8000270:	20000124 	.word	0x20000124

08000274 <tempColor>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int tempColor(int temp){
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
	if(atoi(temp) < 35){
 800027c:	6878      	ldr	r0, [r7, #4]
 800027e:	f004 fb6d 	bl	800495c <atoi>
 8000282:	4603      	mov	r3, r0
 8000284:	2b22      	cmp	r3, #34	@ 0x22
 8000286:	dc01      	bgt.n	800028c <tempColor+0x18>
		return ST7735_BLUE;
 8000288:	231f      	movs	r3, #31
 800028a:	e00a      	b.n	80002a2 <tempColor+0x2e>
	}
	else if(atoi(temp) < 60){
 800028c:	6878      	ldr	r0, [r7, #4]
 800028e:	f004 fb65 	bl	800495c <atoi>
 8000292:	4603      	mov	r3, r0
 8000294:	2b3b      	cmp	r3, #59	@ 0x3b
 8000296:	dc02      	bgt.n	800029e <tempColor+0x2a>
		return ST7735_YELLOW;
 8000298:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800029c:	e001      	b.n	80002a2 <tempColor+0x2e>
	}
	else{
		return ST7735_RED;
 800029e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
	}
}
 80002a2:	4618      	mov	r0, r3
 80002a4:	3708      	adds	r7, #8
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}

080002aa <batColor>:
int batColor(int battery){
 80002aa:	b580      	push	{r7, lr}
 80002ac:	b082      	sub	sp, #8
 80002ae:	af00      	add	r7, sp, #0
 80002b0:	6078      	str	r0, [r7, #4]
	if(atoi(battery) < 33){
 80002b2:	6878      	ldr	r0, [r7, #4]
 80002b4:	f004 fb52 	bl	800495c <atoi>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b20      	cmp	r3, #32
 80002bc:	dc02      	bgt.n	80002c4 <batColor+0x1a>
		return ST7735_RED;
 80002be:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80002c2:	e00a      	b.n	80002da <batColor+0x30>
	}
	else if(atoi(battery) < 66){
 80002c4:	6878      	ldr	r0, [r7, #4]
 80002c6:	f004 fb49 	bl	800495c <atoi>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b41      	cmp	r3, #65	@ 0x41
 80002ce:	dc02      	bgt.n	80002d6 <batColor+0x2c>
		return ST7735_YELLOW;
 80002d0:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80002d4:	e001      	b.n	80002da <batColor+0x30>
	}
	else{
		return ST7735_GREEN;
 80002d6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
	}
}
 80002da:	4618      	mov	r0, r3
 80002dc:	3708      	adds	r7, #8
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
	...

080002e4 <connectionColor>:
int connectionColor(char connectionStatus){
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	4603      	mov	r3, r0
 80002ec:	71fb      	strb	r3, [r7, #7]
	if(strcmp(connectionStatus, "ok")){
 80002ee:	79fb      	ldrb	r3, [r7, #7]
 80002f0:	490d      	ldr	r1, [pc, #52]	@ (8000328 <connectionColor+0x44>)
 80002f2:	4618      	mov	r0, r3
 80002f4:	f7ff ff9c 	bl	8000230 <strcmp>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d002      	beq.n	8000304 <connectionColor+0x20>
		return ST7735_GREEN;
 80002fe:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000302:	e00c      	b.n	800031e <connectionColor+0x3a>
	}
	else if(strcmp(connectionStatus, "connecting...")){
 8000304:	79fb      	ldrb	r3, [r7, #7]
 8000306:	4909      	ldr	r1, [pc, #36]	@ (800032c <connectionColor+0x48>)
 8000308:	4618      	mov	r0, r3
 800030a:	f7ff ff91 	bl	8000230 <strcmp>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d002      	beq.n	800031a <connectionColor+0x36>
		return ST7735_YELLOW;
 8000314:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000318:	e001      	b.n	800031e <connectionColor+0x3a>
	}
	else{
		return ST7735_RED;
 800031a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
	}
}
 800031e:	4618      	mov	r0, r3
 8000320:	3708      	adds	r7, #8
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	08004c40 	.word	0x08004c40
 800032c:	08004c44 	.word	0x08004c44

08000330 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000330:	b5b0      	push	{r4, r5, r7, lr}
 8000332:	b096      	sub	sp, #88	@ 0x58
 8000334:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000336:	f001 f8df 	bl	80014f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800033a:	f000 f855 	bl	80003e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800033e:	f000 f9f5 	bl	800072c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000342:	f000 f897 	bl	8000474 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000346:	f000 f8cb 	bl	80004e0 <MX_SPI2_Init>
  MX_TIM4_Init();
 800034a:	f000 f901 	bl	8000550 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800034e:	f000 f999 	bl	8000684 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000352:	f000 f9c1 	bl	80006d8 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 8000356:	f000 f95f 	bl	8000618 <MX_TIM7_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800035a:	4b1d      	ldr	r3, [pc, #116]	@ (80003d0 <main+0xa0>)
 800035c:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000360:	461d      	mov	r5, r3
 8000362:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000364:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000366:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800036a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800036e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000372:	2100      	movs	r1, #0
 8000374:	4618      	mov	r0, r3
 8000376:	f003 f8f7 	bl	8003568 <osThreadCreate>
 800037a:	4603      	mov	r3, r0
 800037c:	4a15      	ldr	r2, [pc, #84]	@ (80003d4 <main+0xa4>)
 800037e:	6013      	str	r3, [r2, #0]

  /* definition and creation of adjustDisplay */
  osThreadDef(adjustDisplay, StartAdjustDisplay, osPriorityNormal, 0, 128);
 8000380:	4b15      	ldr	r3, [pc, #84]	@ (80003d8 <main+0xa8>)
 8000382:	f107 0420 	add.w	r4, r7, #32
 8000386:	461d      	mov	r5, r3
 8000388:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800038a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800038c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000390:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  adjustDisplayHandle = osThreadCreate(osThread(adjustDisplay), NULL);
 8000394:	f107 0320 	add.w	r3, r7, #32
 8000398:	2100      	movs	r1, #0
 800039a:	4618      	mov	r0, r3
 800039c:	f003 f8e4 	bl	8003568 <osThreadCreate>
 80003a0:	4603      	mov	r3, r0
 80003a2:	4a0e      	ldr	r2, [pc, #56]	@ (80003dc <main+0xac>)
 80003a4:	6013      	str	r3, [r2, #0]

  /* definition and creation of readInputs */
  osThreadDef(readInputs, StartReadInputs, osPriorityIdle, 0, 128);
 80003a6:	4b0e      	ldr	r3, [pc, #56]	@ (80003e0 <main+0xb0>)
 80003a8:	1d3c      	adds	r4, r7, #4
 80003aa:	461d      	mov	r5, r3
 80003ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readInputsHandle = osThreadCreate(osThread(readInputs), NULL);
 80003b8:	1d3b      	adds	r3, r7, #4
 80003ba:	2100      	movs	r1, #0
 80003bc:	4618      	mov	r0, r3
 80003be:	f003 f8d3 	bl	8003568 <osThreadCreate>
 80003c2:	4603      	mov	r3, r0
 80003c4:	4a07      	ldr	r2, [pc, #28]	@ (80003e4 <main+0xb4>)
 80003c6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80003c8:	f003 f8c7 	bl	800355a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003cc:	bf00      	nop
 80003ce:	e7fd      	b.n	80003cc <main+0x9c>
 80003d0:	08004c60 	.word	0x08004c60
 80003d4:	200004f4 	.word	0x200004f4
 80003d8:	08004c8c 	.word	0x08004c8c
 80003dc:	200004f8 	.word	0x200004f8
 80003e0:	08004cb4 	.word	0x08004cb4
 80003e4:	200004fc 	.word	0x200004fc

080003e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b090      	sub	sp, #64	@ 0x40
 80003ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ee:	f107 0318 	add.w	r3, r7, #24
 80003f2:	2228      	movs	r2, #40	@ 0x28
 80003f4:	2100      	movs	r1, #0
 80003f6:	4618      	mov	r0, r3
 80003f8:	f004 fb44 	bl	8004a84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003fc:	1d3b      	adds	r3, r7, #4
 80003fe:	2200      	movs	r2, #0
 8000400:	601a      	str	r2, [r3, #0]
 8000402:	605a      	str	r2, [r3, #4]
 8000404:	609a      	str	r2, [r3, #8]
 8000406:	60da      	str	r2, [r3, #12]
 8000408:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800040a:	2301      	movs	r3, #1
 800040c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800040e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000412:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000414:	2300      	movs	r3, #0
 8000416:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000418:	2301      	movs	r3, #1
 800041a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800041c:	2302      	movs	r3, #2
 800041e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000420:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000424:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000426:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800042a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800042c:	f107 0318 	add.w	r3, r7, #24
 8000430:	4618      	mov	r0, r3
 8000432:	f001 fb5d 	bl	8001af0 <HAL_RCC_OscConfig>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800043c:	f000 fba4 	bl	8000b88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000440:	230f      	movs	r3, #15
 8000442:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000444:	2302      	movs	r3, #2
 8000446:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000448:	2300      	movs	r3, #0
 800044a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800044c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000450:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000452:	2300      	movs	r3, #0
 8000454:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	2102      	movs	r1, #2
 800045a:	4618      	mov	r0, r3
 800045c:	f001 fdca 	bl	8001ff4 <HAL_RCC_ClockConfig>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000466:	f000 fb8f 	bl	8000b88 <Error_Handler>
  }
}
 800046a:	bf00      	nop
 800046c:	3740      	adds	r7, #64	@ 0x40
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
	...

08000474 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000478:	4b17      	ldr	r3, [pc, #92]	@ (80004d8 <MX_SPI1_Init+0x64>)
 800047a:	4a18      	ldr	r2, [pc, #96]	@ (80004dc <MX_SPI1_Init+0x68>)
 800047c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800047e:	4b16      	ldr	r3, [pc, #88]	@ (80004d8 <MX_SPI1_Init+0x64>)
 8000480:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000484:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000486:	4b14      	ldr	r3, [pc, #80]	@ (80004d8 <MX_SPI1_Init+0x64>)
 8000488:	2200      	movs	r2, #0
 800048a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800048c:	4b12      	ldr	r3, [pc, #72]	@ (80004d8 <MX_SPI1_Init+0x64>)
 800048e:	2200      	movs	r2, #0
 8000490:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000492:	4b11      	ldr	r3, [pc, #68]	@ (80004d8 <MX_SPI1_Init+0x64>)
 8000494:	2200      	movs	r2, #0
 8000496:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000498:	4b0f      	ldr	r3, [pc, #60]	@ (80004d8 <MX_SPI1_Init+0x64>)
 800049a:	2200      	movs	r2, #0
 800049c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800049e:	4b0e      	ldr	r3, [pc, #56]	@ (80004d8 <MX_SPI1_Init+0x64>)
 80004a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80004a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80004a6:	4b0c      	ldr	r3, [pc, #48]	@ (80004d8 <MX_SPI1_Init+0x64>)
 80004a8:	2208      	movs	r2, #8
 80004aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004ac:	4b0a      	ldr	r3, [pc, #40]	@ (80004d8 <MX_SPI1_Init+0x64>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004b2:	4b09      	ldr	r3, [pc, #36]	@ (80004d8 <MX_SPI1_Init+0x64>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004b8:	4b07      	ldr	r3, [pc, #28]	@ (80004d8 <MX_SPI1_Init+0x64>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80004be:	4b06      	ldr	r3, [pc, #24]	@ (80004d8 <MX_SPI1_Init+0x64>)
 80004c0:	220a      	movs	r2, #10
 80004c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004c4:	4804      	ldr	r0, [pc, #16]	@ (80004d8 <MX_SPI1_Init+0x64>)
 80004c6:	f001 ff53 	bl	8002370 <HAL_SPI_Init>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80004d0:	f000 fb5a 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	20000324 	.word	0x20000324
 80004dc:	40013000 	.word	0x40013000

080004e0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80004e4:	4b18      	ldr	r3, [pc, #96]	@ (8000548 <MX_SPI2_Init+0x68>)
 80004e6:	4a19      	ldr	r2, [pc, #100]	@ (800054c <MX_SPI2_Init+0x6c>)
 80004e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80004ea:	4b17      	ldr	r3, [pc, #92]	@ (8000548 <MX_SPI2_Init+0x68>)
 80004ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80004f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80004f2:	4b15      	ldr	r3, [pc, #84]	@ (8000548 <MX_SPI2_Init+0x68>)
 80004f4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80004f8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80004fa:	4b13      	ldr	r3, [pc, #76]	@ (8000548 <MX_SPI2_Init+0x68>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000500:	4b11      	ldr	r3, [pc, #68]	@ (8000548 <MX_SPI2_Init+0x68>)
 8000502:	2200      	movs	r2, #0
 8000504:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000506:	4b10      	ldr	r3, [pc, #64]	@ (8000548 <MX_SPI2_Init+0x68>)
 8000508:	2200      	movs	r2, #0
 800050a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800050c:	4b0e      	ldr	r3, [pc, #56]	@ (8000548 <MX_SPI2_Init+0x68>)
 800050e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000512:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000514:	4b0c      	ldr	r3, [pc, #48]	@ (8000548 <MX_SPI2_Init+0x68>)
 8000516:	2200      	movs	r2, #0
 8000518:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800051a:	4b0b      	ldr	r3, [pc, #44]	@ (8000548 <MX_SPI2_Init+0x68>)
 800051c:	2200      	movs	r2, #0
 800051e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000520:	4b09      	ldr	r3, [pc, #36]	@ (8000548 <MX_SPI2_Init+0x68>)
 8000522:	2200      	movs	r2, #0
 8000524:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000526:	4b08      	ldr	r3, [pc, #32]	@ (8000548 <MX_SPI2_Init+0x68>)
 8000528:	2200      	movs	r2, #0
 800052a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800052c:	4b06      	ldr	r3, [pc, #24]	@ (8000548 <MX_SPI2_Init+0x68>)
 800052e:	220a      	movs	r2, #10
 8000530:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000532:	4805      	ldr	r0, [pc, #20]	@ (8000548 <MX_SPI2_Init+0x68>)
 8000534:	f001 ff1c 	bl	8002370 <HAL_SPI_Init>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 800053e:	f000 fb23 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	2000037c 	.word	0x2000037c
 800054c:	40003800 	.word	0x40003800

08000550 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b08a      	sub	sp, #40	@ 0x28
 8000554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000556:	f107 0320 	add.w	r3, r7, #32
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
 800056c:	611a      	str	r2, [r3, #16]
 800056e:	615a      	str	r2, [r3, #20]
 8000570:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000572:	4b27      	ldr	r3, [pc, #156]	@ (8000610 <MX_TIM4_Init+0xc0>)
 8000574:	4a27      	ldr	r2, [pc, #156]	@ (8000614 <MX_TIM4_Init+0xc4>)
 8000576:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000578:	4b25      	ldr	r3, [pc, #148]	@ (8000610 <MX_TIM4_Init+0xc0>)
 800057a:	2200      	movs	r2, #0
 800057c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800057e:	4b24      	ldr	r3, [pc, #144]	@ (8000610 <MX_TIM4_Init+0xc0>)
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4095;
 8000584:	4b22      	ldr	r3, [pc, #136]	@ (8000610 <MX_TIM4_Init+0xc0>)
 8000586:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800058a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800058c:	4b20      	ldr	r3, [pc, #128]	@ (8000610 <MX_TIM4_Init+0xc0>)
 800058e:	2200      	movs	r2, #0
 8000590:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000592:	4b1f      	ldr	r3, [pc, #124]	@ (8000610 <MX_TIM4_Init+0xc0>)
 8000594:	2200      	movs	r2, #0
 8000596:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000598:	481d      	ldr	r0, [pc, #116]	@ (8000610 <MX_TIM4_Init+0xc0>)
 800059a:	f002 fa07 	bl	80029ac <HAL_TIM_PWM_Init>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80005a4:	f000 faf0 	bl	8000b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005a8:	2300      	movs	r3, #0
 80005aa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005ac:	2300      	movs	r3, #0
 80005ae:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80005b0:	f107 0320 	add.w	r3, r7, #32
 80005b4:	4619      	mov	r1, r3
 80005b6:	4816      	ldr	r0, [pc, #88]	@ (8000610 <MX_TIM4_Init+0xc0>)
 80005b8:	f002 fe5c 	bl	8003274 <HAL_TIMEx_MasterConfigSynchronization>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80005c2:	f000 fae1 	bl	8000b88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005c6:	2360      	movs	r3, #96	@ 0x60
 80005c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005ce:	2300      	movs	r3, #0
 80005d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	2200      	movs	r2, #0
 80005da:	4619      	mov	r1, r3
 80005dc:	480c      	ldr	r0, [pc, #48]	@ (8000610 <MX_TIM4_Init+0xc0>)
 80005de:	f002 fb3d 	bl	8002c5c <HAL_TIM_PWM_ConfigChannel>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80005e8:	f000 face 	bl	8000b88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	2204      	movs	r2, #4
 80005f0:	4619      	mov	r1, r3
 80005f2:	4807      	ldr	r0, [pc, #28]	@ (8000610 <MX_TIM4_Init+0xc0>)
 80005f4:	f002 fb32 	bl	8002c5c <HAL_TIM_PWM_ConfigChannel>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80005fe:	f000 fac3 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000602:	4803      	ldr	r0, [pc, #12]	@ (8000610 <MX_TIM4_Init+0xc0>)
 8000604:	f000 fe00 	bl	8001208 <HAL_TIM_MspPostInit>

}
 8000608:	bf00      	nop
 800060a:	3728      	adds	r7, #40	@ 0x28
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	200003d4 	.word	0x200003d4
 8000614:	40000800 	.word	0x40000800

08000618 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800061e:	463b      	mov	r3, r7
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000626:	4b15      	ldr	r3, [pc, #84]	@ (800067c <MX_TIM7_Init+0x64>)
 8000628:	4a15      	ldr	r2, [pc, #84]	@ (8000680 <MX_TIM7_Init+0x68>)
 800062a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800062c:	4b13      	ldr	r3, [pc, #76]	@ (800067c <MX_TIM7_Init+0x64>)
 800062e:	2200      	movs	r2, #0
 8000630:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000632:	4b12      	ldr	r3, [pc, #72]	@ (800067c <MX_TIM7_Init+0x64>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000638:	4b10      	ldr	r3, [pc, #64]	@ (800067c <MX_TIM7_Init+0x64>)
 800063a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800063e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000640:	4b0e      	ldr	r3, [pc, #56]	@ (800067c <MX_TIM7_Init+0x64>)
 8000642:	2200      	movs	r2, #0
 8000644:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000646:	480d      	ldr	r0, [pc, #52]	@ (800067c <MX_TIM7_Init+0x64>)
 8000648:	f002 f900 	bl	800284c <HAL_TIM_Base_Init>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000652:	f000 fa99 	bl	8000b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000656:	2300      	movs	r3, #0
 8000658:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800065a:	2300      	movs	r3, #0
 800065c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800065e:	463b      	mov	r3, r7
 8000660:	4619      	mov	r1, r3
 8000662:	4806      	ldr	r0, [pc, #24]	@ (800067c <MX_TIM7_Init+0x64>)
 8000664:	f002 fe06 	bl	8003274 <HAL_TIMEx_MasterConfigSynchronization>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800066e:	f000 fa8b 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	2000041c 	.word	0x2000041c
 8000680:	40001400 	.word	0x40001400

08000684 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000688:	4b11      	ldr	r3, [pc, #68]	@ (80006d0 <MX_USART1_UART_Init+0x4c>)
 800068a:	4a12      	ldr	r2, [pc, #72]	@ (80006d4 <MX_USART1_UART_Init+0x50>)
 800068c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800068e:	4b10      	ldr	r3, [pc, #64]	@ (80006d0 <MX_USART1_UART_Init+0x4c>)
 8000690:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000694:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000696:	4b0e      	ldr	r3, [pc, #56]	@ (80006d0 <MX_USART1_UART_Init+0x4c>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800069c:	4b0c      	ldr	r3, [pc, #48]	@ (80006d0 <MX_USART1_UART_Init+0x4c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006a2:	4b0b      	ldr	r3, [pc, #44]	@ (80006d0 <MX_USART1_UART_Init+0x4c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006a8:	4b09      	ldr	r3, [pc, #36]	@ (80006d0 <MX_USART1_UART_Init+0x4c>)
 80006aa:	220c      	movs	r2, #12
 80006ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ae:	4b08      	ldr	r3, [pc, #32]	@ (80006d0 <MX_USART1_UART_Init+0x4c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b4:	4b06      	ldr	r3, [pc, #24]	@ (80006d0 <MX_USART1_UART_Init+0x4c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006ba:	4805      	ldr	r0, [pc, #20]	@ (80006d0 <MX_USART1_UART_Init+0x4c>)
 80006bc:	f002 fe58 	bl	8003370 <HAL_UART_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006c6:	f000 fa5f 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000464 	.word	0x20000464
 80006d4:	40013800 	.word	0x40013800

080006d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006dc:	4b11      	ldr	r3, [pc, #68]	@ (8000724 <MX_USART2_UART_Init+0x4c>)
 80006de:	4a12      	ldr	r2, [pc, #72]	@ (8000728 <MX_USART2_UART_Init+0x50>)
 80006e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006e2:	4b10      	ldr	r3, [pc, #64]	@ (8000724 <MX_USART2_UART_Init+0x4c>)
 80006e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000724 <MX_USART2_UART_Init+0x4c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000724 <MX_USART2_UART_Init+0x4c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000724 <MX_USART2_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006fc:	4b09      	ldr	r3, [pc, #36]	@ (8000724 <MX_USART2_UART_Init+0x4c>)
 80006fe:	220c      	movs	r2, #12
 8000700:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000702:	4b08      	ldr	r3, [pc, #32]	@ (8000724 <MX_USART2_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <MX_USART2_UART_Init+0x4c>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800070e:	4805      	ldr	r0, [pc, #20]	@ (8000724 <MX_USART2_UART_Init+0x4c>)
 8000710:	f002 fe2e 	bl	8003370 <HAL_UART_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800071a:	f000 fa35 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	200004ac 	.word	0x200004ac
 8000728:	40004400 	.word	0x40004400

0800072c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b088      	sub	sp, #32
 8000730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 0310 	add.w	r3, r7, #16
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000740:	4b58      	ldr	r3, [pc, #352]	@ (80008a4 <MX_GPIO_Init+0x178>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	4a57      	ldr	r2, [pc, #348]	@ (80008a4 <MX_GPIO_Init+0x178>)
 8000746:	f043 0310 	orr.w	r3, r3, #16
 800074a:	6193      	str	r3, [r2, #24]
 800074c:	4b55      	ldr	r3, [pc, #340]	@ (80008a4 <MX_GPIO_Init+0x178>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	f003 0310 	and.w	r3, r3, #16
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000758:	4b52      	ldr	r3, [pc, #328]	@ (80008a4 <MX_GPIO_Init+0x178>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	4a51      	ldr	r2, [pc, #324]	@ (80008a4 <MX_GPIO_Init+0x178>)
 800075e:	f043 0320 	orr.w	r3, r3, #32
 8000762:	6193      	str	r3, [r2, #24]
 8000764:	4b4f      	ldr	r3, [pc, #316]	@ (80008a4 <MX_GPIO_Init+0x178>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	f003 0320 	and.w	r3, r3, #32
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000770:	4b4c      	ldr	r3, [pc, #304]	@ (80008a4 <MX_GPIO_Init+0x178>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	4a4b      	ldr	r2, [pc, #300]	@ (80008a4 <MX_GPIO_Init+0x178>)
 8000776:	f043 0304 	orr.w	r3, r3, #4
 800077a:	6193      	str	r3, [r2, #24]
 800077c:	4b49      	ldr	r3, [pc, #292]	@ (80008a4 <MX_GPIO_Init+0x178>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	f003 0304 	and.w	r3, r3, #4
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000788:	4b46      	ldr	r3, [pc, #280]	@ (80008a4 <MX_GPIO_Init+0x178>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	4a45      	ldr	r2, [pc, #276]	@ (80008a4 <MX_GPIO_Init+0x178>)
 800078e:	f043 0308 	orr.w	r3, r3, #8
 8000792:	6193      	str	r3, [r2, #24]
 8000794:	4b43      	ldr	r3, [pc, #268]	@ (80008a4 <MX_GPIO_Init+0x178>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	f003 0308 	and.w	r3, r3, #8
 800079c:	603b      	str	r3, [r7, #0]
 800079e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_6|TFT_GND_Pin, GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	f244 01d0 	movw	r1, #16592	@ 0x40d0
 80007a6:	4840      	ldr	r0, [pc, #256]	@ (80008a8 <MX_GPIO_Init+0x17c>)
 80007a8:	f001 f970 	bl	8001a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LED1_Pin, GPIO_PIN_RESET);
 80007ac:	2200      	movs	r2, #0
 80007ae:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80007b2:	483e      	ldr	r0, [pc, #248]	@ (80008ac <MX_GPIO_Init+0x180>)
 80007b4:	f001 f96a 	bl	8001a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 80007b8:	2200      	movs	r2, #0
 80007ba:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 80007be:	483c      	ldr	r0, [pc, #240]	@ (80008b0 <MX_GPIO_Init+0x184>)
 80007c0:	f001 f964 	bl	8001a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TFT_BLK_Pin|TFT_VCC_Pin, GPIO_PIN_SET);
 80007c4:	2201      	movs	r2, #1
 80007c6:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80007ca:	4837      	ldr	r0, [pc, #220]	@ (80008a8 <MX_GPIO_Init+0x17c>)
 80007cc:	f001 f95e 	bl	8001a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2104      	movs	r1, #4
 80007d4:	4837      	ldr	r0, [pc, #220]	@ (80008b4 <MX_GPIO_Init+0x188>)
 80007d6:	f001 f959 	bl	8001a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 80007da:	f242 0302 	movw	r3, #8194	@ 0x2002
 80007de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007e8:	f107 0310 	add.w	r3, r7, #16
 80007ec:	4619      	mov	r1, r3
 80007ee:	482e      	ldr	r0, [pc, #184]	@ (80008a8 <MX_GPIO_Init+0x17c>)
 80007f0:	f000 ffb8 	bl	8001764 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC4 PC6 TFT_GND_Pin
                           TFT_BLK_Pin TFT_VCC_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_6|TFT_GND_Pin
 80007f4:	f244 33d0 	movw	r3, #17360	@ 0x43d0
 80007f8:	613b      	str	r3, [r7, #16]
                          |TFT_BLK_Pin|TFT_VCC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2302      	movs	r3, #2
 8000804:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000806:	f107 0310 	add.w	r3, r7, #16
 800080a:	4619      	mov	r1, r3
 800080c:	4826      	ldr	r0, [pc, #152]	@ (80008a8 <MX_GPIO_Init+0x17c>)
 800080e:	f000 ffa9 	bl	8001764 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_WP_Pin */
  GPIO_InitStruct.Pin = BTN_WP_Pin;
 8000812:	2301      	movs	r3, #1
 8000814:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000816:	2300      	movs	r3, #0
 8000818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_WP_GPIO_Port, &GPIO_InitStruct);
 800081e:	f107 0310 	add.w	r3, r7, #16
 8000822:	4619      	mov	r1, r3
 8000824:	4821      	ldr	r0, [pc, #132]	@ (80008ac <MX_GPIO_Init+0x180>)
 8000826:	f000 ff9d 	bl	8001764 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LED1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LED1_Pin;
 800082a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800082e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000830:	2301      	movs	r3, #1
 8000832:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	2302      	movs	r3, #2
 800083a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083c:	f107 0310 	add.w	r3, r7, #16
 8000840:	4619      	mov	r1, r3
 8000842:	481a      	ldr	r0, [pc, #104]	@ (80008ac <MX_GPIO_Init+0x180>)
 8000844:	f000 ff8e 	bl	8001764 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000848:	2304      	movs	r3, #4
 800084a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000854:	f107 0310 	add.w	r3, r7, #16
 8000858:	4619      	mov	r1, r3
 800085a:	4815      	ldr	r0, [pc, #84]	@ (80008b0 <MX_GPIO_Init+0x184>)
 800085c:	f000 ff82 	bl	8001764 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8000860:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8000864:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000866:	2301      	movs	r3, #1
 8000868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2302      	movs	r3, #2
 8000870:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000872:	f107 0310 	add.w	r3, r7, #16
 8000876:	4619      	mov	r1, r3
 8000878:	480d      	ldr	r0, [pc, #52]	@ (80008b0 <MX_GPIO_Init+0x184>)
 800087a:	f000 ff73 	bl	8001764 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 800087e:	2304      	movs	r3, #4
 8000880:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000882:	2301      	movs	r3, #1
 8000884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2302      	movs	r3, #2
 800088c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 800088e:	f107 0310 	add.w	r3, r7, #16
 8000892:	4619      	mov	r1, r3
 8000894:	4807      	ldr	r0, [pc, #28]	@ (80008b4 <MX_GPIO_Init+0x188>)
 8000896:	f000 ff65 	bl	8001764 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800089a:	bf00      	nop
 800089c:	3720      	adds	r7, #32
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40021000 	.word	0x40021000
 80008a8:	40011000 	.word	0x40011000
 80008ac:	40010800 	.word	0x40010800
 80008b0:	40010c00 	.word	0x40010c00
 80008b4:	40011400 	.word	0x40011400

080008b8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	if(commMethod == 'n'){
 80008c0:	4b09      	ldr	r3, [pc, #36]	@ (80008e8 <StartDefaultTask+0x30>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b6e      	cmp	r3, #110	@ 0x6e
 80008c6:	d104      	bne.n	80008d2 <StartDefaultTask+0x1a>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80008c8:	2201      	movs	r2, #1
 80008ca:	2104      	movs	r1, #4
 80008cc:	4807      	ldr	r0, [pc, #28]	@ (80008ec <StartDefaultTask+0x34>)
 80008ce:	f001 f8dd 	bl	8001a8c <HAL_GPIO_WritePin>
	}
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80008d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008d6:	4806      	ldr	r0, [pc, #24]	@ (80008f0 <StartDefaultTask+0x38>)
 80008d8:	f001 f8f0 	bl	8001abc <HAL_GPIO_TogglePin>
    osDelay(500);
 80008dc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008e0:	f002 fe8e 	bl	8003600 <osDelay>
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80008e4:	bf00      	nop
 80008e6:	e7f4      	b.n	80008d2 <StartDefaultTask+0x1a>
 80008e8:	20000500 	.word	0x20000500
 80008ec:	40011400 	.word	0x40011400
 80008f0:	40010800 	.word	0x40010800

080008f4 <StartAdjustDisplay>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAdjustDisplay */
void StartAdjustDisplay(void const * argument)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08c      	sub	sp, #48	@ 0x30
 80008f8:	af04      	add	r7, sp, #16
 80008fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAdjustDisplay */
	ST7735_Init();
 80008fc:	f000 fa34 	bl	8000d68 <ST7735_Init>
	ST7735_FillScreen(ST7735_WHITE);
 8000900:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000904:	f000 fb80 	bl	8001008 <ST7735_FillScreen>
	ST7735_WriteString(0, 0, "Font_7x10, red on black, Booting...", Font_7x10, ST7735_RED, ST7735_BLACK);
 8000908:	4b86      	ldr	r3, [pc, #536]	@ (8000b24 <StartAdjustDisplay+0x230>)
 800090a:	2200      	movs	r2, #0
 800090c:	9202      	str	r2, [sp, #8]
 800090e:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000912:	9201      	str	r2, [sp, #4]
 8000914:	685a      	ldr	r2, [r3, #4]
 8000916:	9200      	str	r2, [sp, #0]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a83      	ldr	r2, [pc, #524]	@ (8000b28 <StartAdjustDisplay+0x234>)
 800091c:	2100      	movs	r1, #0
 800091e:	2000      	movs	r0, #0
 8000920:	f000 fab3 	bl	8000e8a <ST7735_WriteString>
	char commStatus[] = "OK";
 8000924:	4a81      	ldr	r2, [pc, #516]	@ (8000b2c <StartAdjustDisplay+0x238>)
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	6812      	ldr	r2, [r2, #0]
 800092c:	4611      	mov	r1, r2
 800092e:	8019      	strh	r1, [r3, #0]
 8000930:	3302      	adds	r3, #2
 8000932:	0c12      	lsrs	r2, r2, #16
 8000934:	701a      	strb	r2, [r3, #0]

	char temp1[] = "49";
 8000936:	4a7e      	ldr	r2, [pc, #504]	@ (8000b30 <StartAdjustDisplay+0x23c>)
 8000938:	f107 0318 	add.w	r3, r7, #24
 800093c:	6812      	ldr	r2, [r2, #0]
 800093e:	4611      	mov	r1, r2
 8000940:	8019      	strh	r1, [r3, #0]
 8000942:	3302      	adds	r3, #2
 8000944:	0c12      	lsrs	r2, r2, #16
 8000946:	701a      	strb	r2, [r3, #0]
	char temp2[] = "32";
 8000948:	4a7a      	ldr	r2, [pc, #488]	@ (8000b34 <StartAdjustDisplay+0x240>)
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	6812      	ldr	r2, [r2, #0]
 8000950:	4611      	mov	r1, r2
 8000952:	8019      	strh	r1, [r3, #0]
 8000954:	3302      	adds	r3, #2
 8000956:	0c12      	lsrs	r2, r2, #16
 8000958:	701a      	strb	r2, [r3, #0]
	char temp3[] = "90";
 800095a:	4a77      	ldr	r2, [pc, #476]	@ (8000b38 <StartAdjustDisplay+0x244>)
 800095c:	f107 0310 	add.w	r3, r7, #16
 8000960:	6812      	ldr	r2, [r2, #0]
 8000962:	4611      	mov	r1, r2
 8000964:	8019      	strh	r1, [r3, #0]
 8000966:	3302      	adds	r3, #2
 8000968:	0c12      	lsrs	r2, r2, #16
 800096a:	701a      	strb	r2, [r3, #0]

	char batteryProcentage[] = "56";
 800096c:	4a73      	ldr	r2, [pc, #460]	@ (8000b3c <StartAdjustDisplay+0x248>)
 800096e:	f107 030c 	add.w	r3, r7, #12
 8000972:	6812      	ldr	r2, [r2, #0]
 8000974:	4611      	mov	r1, r2
 8000976:	8019      	strh	r1, [r3, #0]
 8000978:	3302      	adds	r3, #2
 800097a:	0c12      	lsrs	r2, r2, #16
 800097c:	701a      	strb	r2, [r3, #0]
	ST7735_FillScreen(ST7735_BLACK);
 800097e:	2000      	movs	r0, #0
 8000980:	f000 fb42 	bl	8001008 <ST7735_FillScreen>
  /* Infinite loop */
  for(;;)
  {


	ST7735_WriteString(0, 0, "Connection status:", Font_7x10, connectionColor(commStatus), ST7735_BLACK);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	b2db      	uxtb	r3, r3
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff fcaa 	bl	80002e4 <connectionColor>
 8000990:	4603      	mov	r3, r0
 8000992:	b29a      	uxth	r2, r3
 8000994:	4b63      	ldr	r3, [pc, #396]	@ (8000b24 <StartAdjustDisplay+0x230>)
 8000996:	2100      	movs	r1, #0
 8000998:	9102      	str	r1, [sp, #8]
 800099a:	9201      	str	r2, [sp, #4]
 800099c:	685a      	ldr	r2, [r3, #4]
 800099e:	9200      	str	r2, [sp, #0]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a67      	ldr	r2, [pc, #412]	@ (8000b40 <StartAdjustDisplay+0x24c>)
 80009a4:	2100      	movs	r1, #0
 80009a6:	2000      	movs	r0, #0
 80009a8:	f000 fa6f 	bl	8000e8a <ST7735_WriteString>
	ST7735_WriteString(127, 0, commStatus, Font_7x10, connectionColor(commStatus), ST7735_BLACK);
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fc96 	bl	80002e4 <connectionColor>
 80009b8:	4603      	mov	r3, r0
 80009ba:	b29a      	uxth	r2, r3
 80009bc:	4b59      	ldr	r3, [pc, #356]	@ (8000b24 <StartAdjustDisplay+0x230>)
 80009be:	f107 011c 	add.w	r1, r7, #28
 80009c2:	2000      	movs	r0, #0
 80009c4:	9002      	str	r0, [sp, #8]
 80009c6:	9201      	str	r2, [sp, #4]
 80009c8:	685a      	ldr	r2, [r3, #4]
 80009ca:	9200      	str	r2, [sp, #0]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	460a      	mov	r2, r1
 80009d0:	2100      	movs	r1, #0
 80009d2:	207f      	movs	r0, #127	@ 0x7f
 80009d4:	f000 fa59 	bl	8000e8a <ST7735_WriteString>

	ST7735_WriteString(0, 12, "Temp1: ", Font_7x10, tempColor(temp1), ST7735_BLACK);
 80009d8:	f107 0318 	add.w	r3, r7, #24
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff fc49 	bl	8000274 <tempColor>
 80009e2:	4603      	mov	r3, r0
 80009e4:	b29a      	uxth	r2, r3
 80009e6:	4b4f      	ldr	r3, [pc, #316]	@ (8000b24 <StartAdjustDisplay+0x230>)
 80009e8:	2100      	movs	r1, #0
 80009ea:	9102      	str	r1, [sp, #8]
 80009ec:	9201      	str	r2, [sp, #4]
 80009ee:	685a      	ldr	r2, [r3, #4]
 80009f0:	9200      	str	r2, [sp, #0]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a53      	ldr	r2, [pc, #332]	@ (8000b44 <StartAdjustDisplay+0x250>)
 80009f6:	210c      	movs	r1, #12
 80009f8:	2000      	movs	r0, #0
 80009fa:	f000 fa46 	bl	8000e8a <ST7735_WriteString>
	ST7735_WriteString(40, 12, temp1, Font_7x10, tempColor(temp1), ST7735_BLACK);
 80009fe:	f107 0318 	add.w	r3, r7, #24
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff fc36 	bl	8000274 <tempColor>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	b29a      	uxth	r2, r3
 8000a0c:	4b45      	ldr	r3, [pc, #276]	@ (8000b24 <StartAdjustDisplay+0x230>)
 8000a0e:	f107 0118 	add.w	r1, r7, #24
 8000a12:	2000      	movs	r0, #0
 8000a14:	9002      	str	r0, [sp, #8]
 8000a16:	9201      	str	r2, [sp, #4]
 8000a18:	685a      	ldr	r2, [r3, #4]
 8000a1a:	9200      	str	r2, [sp, #0]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	460a      	mov	r2, r1
 8000a20:	210c      	movs	r1, #12
 8000a22:	2028      	movs	r0, #40	@ 0x28
 8000a24:	f000 fa31 	bl	8000e8a <ST7735_WriteString>

	ST7735_WriteString(0, 23, "Temp2: ", Font_7x10, tempColor(temp2), ST7735_BLACK);
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff fc21 	bl	8000274 <tempColor>
 8000a32:	4603      	mov	r3, r0
 8000a34:	b29a      	uxth	r2, r3
 8000a36:	4b3b      	ldr	r3, [pc, #236]	@ (8000b24 <StartAdjustDisplay+0x230>)
 8000a38:	2100      	movs	r1, #0
 8000a3a:	9102      	str	r1, [sp, #8]
 8000a3c:	9201      	str	r2, [sp, #4]
 8000a3e:	685a      	ldr	r2, [r3, #4]
 8000a40:	9200      	str	r2, [sp, #0]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a40      	ldr	r2, [pc, #256]	@ (8000b48 <StartAdjustDisplay+0x254>)
 8000a46:	2117      	movs	r1, #23
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f000 fa1e 	bl	8000e8a <ST7735_WriteString>
	ST7735_WriteString(40, 23, temp2, Font_7x10, tempColor(temp2), ST7735_BLACK);
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff fc0e 	bl	8000274 <tempColor>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	4b31      	ldr	r3, [pc, #196]	@ (8000b24 <StartAdjustDisplay+0x230>)
 8000a5e:	f107 0114 	add.w	r1, r7, #20
 8000a62:	2000      	movs	r0, #0
 8000a64:	9002      	str	r0, [sp, #8]
 8000a66:	9201      	str	r2, [sp, #4]
 8000a68:	685a      	ldr	r2, [r3, #4]
 8000a6a:	9200      	str	r2, [sp, #0]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	460a      	mov	r2, r1
 8000a70:	2117      	movs	r1, #23
 8000a72:	2028      	movs	r0, #40	@ 0x28
 8000a74:	f000 fa09 	bl	8000e8a <ST7735_WriteString>

	ST7735_WriteString(0, 34, "Temp3: ", Font_7x10, tempColor(temp3), ST7735_BLACK);
 8000a78:	f107 0310 	add.w	r3, r7, #16
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff fbf9 	bl	8000274 <tempColor>
 8000a82:	4603      	mov	r3, r0
 8000a84:	b29a      	uxth	r2, r3
 8000a86:	4b27      	ldr	r3, [pc, #156]	@ (8000b24 <StartAdjustDisplay+0x230>)
 8000a88:	2100      	movs	r1, #0
 8000a8a:	9102      	str	r1, [sp, #8]
 8000a8c:	9201      	str	r2, [sp, #4]
 8000a8e:	685a      	ldr	r2, [r3, #4]
 8000a90:	9200      	str	r2, [sp, #0]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a2d      	ldr	r2, [pc, #180]	@ (8000b4c <StartAdjustDisplay+0x258>)
 8000a96:	2122      	movs	r1, #34	@ 0x22
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f000 f9f6 	bl	8000e8a <ST7735_WriteString>
	ST7735_WriteString(40, 34, temp3, Font_7x10, tempColor(temp3), ST7735_BLACK);
 8000a9e:	f107 0310 	add.w	r3, r7, #16
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff fbe6 	bl	8000274 <tempColor>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	b29a      	uxth	r2, r3
 8000aac:	4b1d      	ldr	r3, [pc, #116]	@ (8000b24 <StartAdjustDisplay+0x230>)
 8000aae:	f107 0110 	add.w	r1, r7, #16
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	9002      	str	r0, [sp, #8]
 8000ab6:	9201      	str	r2, [sp, #4]
 8000ab8:	685a      	ldr	r2, [r3, #4]
 8000aba:	9200      	str	r2, [sp, #0]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	460a      	mov	r2, r1
 8000ac0:	2122      	movs	r1, #34	@ 0x22
 8000ac2:	2028      	movs	r0, #40	@ 0x28
 8000ac4:	f000 f9e1 	bl	8000e8a <ST7735_WriteString>

	ST7735_WriteString(0, 45, "BATT%: ", Font_7x10, batColor(batteryProcentage), ST7735_BLACK);
 8000ac8:	f107 030c 	add.w	r3, r7, #12
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff fbec 	bl	80002aa <batColor>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	b29a      	uxth	r2, r3
 8000ad6:	4b13      	ldr	r3, [pc, #76]	@ (8000b24 <StartAdjustDisplay+0x230>)
 8000ad8:	2100      	movs	r1, #0
 8000ada:	9102      	str	r1, [sp, #8]
 8000adc:	9201      	str	r2, [sp, #4]
 8000ade:	685a      	ldr	r2, [r3, #4]
 8000ae0:	9200      	str	r2, [sp, #0]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a1a      	ldr	r2, [pc, #104]	@ (8000b50 <StartAdjustDisplay+0x25c>)
 8000ae6:	212d      	movs	r1, #45	@ 0x2d
 8000ae8:	2000      	movs	r0, #0
 8000aea:	f000 f9ce 	bl	8000e8a <ST7735_WriteString>
	ST7735_WriteString(40, 45, batteryProcentage, Font_7x10, batColor(batteryProcentage), ST7735_BLACK);
 8000aee:	f107 030c 	add.w	r3, r7, #12
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff fbd9 	bl	80002aa <batColor>
 8000af8:	4603      	mov	r3, r0
 8000afa:	b29a      	uxth	r2, r3
 8000afc:	4b09      	ldr	r3, [pc, #36]	@ (8000b24 <StartAdjustDisplay+0x230>)
 8000afe:	f107 010c 	add.w	r1, r7, #12
 8000b02:	2000      	movs	r0, #0
 8000b04:	9002      	str	r0, [sp, #8]
 8000b06:	9201      	str	r2, [sp, #4]
 8000b08:	685a      	ldr	r2, [r3, #4]
 8000b0a:	9200      	str	r2, [sp, #0]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	460a      	mov	r2, r1
 8000b10:	212d      	movs	r1, #45	@ 0x2d
 8000b12:	2028      	movs	r0, #40	@ 0x28
 8000b14:	f000 f9b9 	bl	8000e8a <ST7735_WriteString>
	osDelay(500);
 8000b18:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b1c:	f002 fd70 	bl	8003600 <osDelay>
	ST7735_WriteString(0, 0, "Connection status:", Font_7x10, connectionColor(commStatus), ST7735_BLACK);
 8000b20:	bf00      	nop
 8000b22:	e72f      	b.n	8000984 <StartAdjustDisplay+0x90>
 8000b24:	20000000 	.word	0x20000000
 8000b28:	08004cd0 	.word	0x08004cd0
 8000b2c:	08004d28 	.word	0x08004d28
 8000b30:	08004d2c 	.word	0x08004d2c
 8000b34:	08004d30 	.word	0x08004d30
 8000b38:	08004d34 	.word	0x08004d34
 8000b3c:	08004d38 	.word	0x08004d38
 8000b40:	08004cf4 	.word	0x08004cf4
 8000b44:	08004d08 	.word	0x08004d08
 8000b48:	08004d10 	.word	0x08004d10
 8000b4c:	08004d18 	.word	0x08004d18
 8000b50:	08004d20 	.word	0x08004d20

08000b54 <StartReadInputs>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadInputs */
void StartReadInputs(void const * argument)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadInputs */
  /* Infinite loop */
  for(;;)
  {

    osDelay(1);
 8000b5c:	2001      	movs	r0, #1
 8000b5e:	f002 fd4f 	bl	8003600 <osDelay>
 8000b62:	e7fb      	b.n	8000b5c <StartReadInputs+0x8>

08000b64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a04      	ldr	r2, [pc, #16]	@ (8000b84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d101      	bne.n	8000b7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b76:	f000 fcd5 	bl	8001524 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40012c00 	.word	0x40012c00

08000b88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b8c:	b672      	cpsid	i
}
 8000b8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <Error_Handler+0x8>

08000b94 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2140      	movs	r1, #64	@ 0x40
 8000b9c:	4802      	ldr	r0, [pc, #8]	@ (8000ba8 <ST7735_Select+0x14>)
 8000b9e:	f000 ff75 	bl	8001a8c <HAL_GPIO_WritePin>
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40011000 	.word	0x40011000

08000bac <ST7735_Unselect>:

void ST7735_Unselect() {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	2140      	movs	r1, #64	@ 0x40
 8000bb4:	4802      	ldr	r0, [pc, #8]	@ (8000bc0 <ST7735_Unselect+0x14>)
 8000bb6:	f000 ff69 	bl	8001a8c <HAL_GPIO_WritePin>
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40011000 	.word	0x40011000

08000bc4 <ST7735_Reset>:

static void ST7735_Reset() {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bce:	4807      	ldr	r0, [pc, #28]	@ (8000bec <ST7735_Reset+0x28>)
 8000bd0:	f000 ff5c 	bl	8001a8c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000bd4:	2005      	movs	r0, #5
 8000bd6:	f000 fcc1 	bl	800155c <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8000bda:	2201      	movs	r2, #1
 8000bdc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000be0:	4802      	ldr	r0, [pc, #8]	@ (8000bec <ST7735_Reset+0x28>)
 8000be2:	f000 ff53 	bl	8001a8c <HAL_GPIO_WritePin>
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40010c00 	.word	0x40010c00

08000bf0 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c00:	4806      	ldr	r0, [pc, #24]	@ (8000c1c <ST7735_WriteCommand+0x2c>)
 8000c02:	f000 ff43 	bl	8001a8c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000c06:	1df9      	adds	r1, r7, #7
 8000c08:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	4804      	ldr	r0, [pc, #16]	@ (8000c20 <ST7735_WriteCommand+0x30>)
 8000c10:	f001 fc32 	bl	8002478 <HAL_SPI_Transmit>
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40010c00 	.word	0x40010c00
 8000c20:	2000037c 	.word	0x2000037c

08000c24 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8000c2e:	2201      	movs	r2, #1
 8000c30:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c34:	4807      	ldr	r0, [pc, #28]	@ (8000c54 <ST7735_WriteData+0x30>)
 8000c36:	f000 ff29 	bl	8001a8c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	b29a      	uxth	r2, r3
 8000c3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c42:	6879      	ldr	r1, [r7, #4]
 8000c44:	4804      	ldr	r0, [pc, #16]	@ (8000c58 <ST7735_WriteData+0x34>)
 8000c46:	f001 fc17 	bl	8002478 <HAL_SPI_Transmit>
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40010c00 	.word	0x40010c00
 8000c58:	2000037c 	.word	0x2000037c

08000c5c <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	1c5a      	adds	r2, r3, #1
 8000c68:	607a      	str	r2, [r7, #4]
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8000c6e:	e034      	b.n	8000cda <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	1c5a      	adds	r2, r3, #1
 8000c74:	607a      	str	r2, [r7, #4]
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000c7a:	7afb      	ldrb	r3, [r7, #11]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ffb7 	bl	8000bf0 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	1c5a      	adds	r2, r3, #1
 8000c86:	607a      	str	r2, [r7, #4]
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000c8c:	7abb      	ldrb	r3, [r7, #10]
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c94:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000c96:	7abb      	ldrb	r3, [r7, #10]
 8000c98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000c9c:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8000c9e:	7abb      	ldrb	r3, [r7, #10]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d008      	beq.n	8000cb6 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000ca4:	7abb      	ldrb	r3, [r7, #10]
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f7ff ffbb 	bl	8000c24 <ST7735_WriteData>
            addr += numArgs;
 8000cae:	7abb      	ldrb	r3, [r7, #10]
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000cb6:	89bb      	ldrh	r3, [r7, #12]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d00e      	beq.n	8000cda <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	1c5a      	adds	r2, r3, #1
 8000cc0:	607a      	str	r2, [r7, #4]
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000cc6:	89bb      	ldrh	r3, [r7, #12]
 8000cc8:	2bff      	cmp	r3, #255	@ 0xff
 8000cca:	d102      	bne.n	8000cd2 <ST7735_ExecuteCommandList+0x76>
 8000ccc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000cd0:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000cd2:	89bb      	ldrh	r3, [r7, #12]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f000 fc41 	bl	800155c <HAL_Delay>
    while(numCommands--) {
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
 8000cdc:	1e5a      	subs	r2, r3, #1
 8000cde:	73fa      	strb	r2, [r7, #15]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d1c5      	bne.n	8000c70 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8000ce4:	bf00      	nop
 8000ce6:	bf00      	nop
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8000cee:	b590      	push	{r4, r7, lr}
 8000cf0:	b085      	sub	sp, #20
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	4604      	mov	r4, r0
 8000cf6:	4608      	mov	r0, r1
 8000cf8:	4611      	mov	r1, r2
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	4623      	mov	r3, r4
 8000cfe:	71fb      	strb	r3, [r7, #7]
 8000d00:	4603      	mov	r3, r0
 8000d02:	71bb      	strb	r3, [r7, #6]
 8000d04:	460b      	mov	r3, r1
 8000d06:	717b      	strb	r3, [r7, #5]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000d0c:	202a      	movs	r0, #42	@ 0x2a
 8000d0e:	f7ff ff6f 	bl	8000bf0 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8000d12:	2300      	movs	r3, #0
 8000d14:	733b      	strb	r3, [r7, #12]
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	737b      	strb	r3, [r7, #13]
 8000d1e:	2300      	movs	r3, #0
 8000d20:	73bb      	strb	r3, [r7, #14]
 8000d22:	797b      	ldrb	r3, [r7, #5]
 8000d24:	3301      	adds	r3, #1
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000d2a:	f107 030c 	add.w	r3, r7, #12
 8000d2e:	2104      	movs	r1, #4
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff ff77 	bl	8000c24 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000d36:	202b      	movs	r0, #43	@ 0x2b
 8000d38:	f7ff ff5a 	bl	8000bf0 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8000d3c:	79bb      	ldrb	r3, [r7, #6]
 8000d3e:	331a      	adds	r3, #26
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8000d44:	793b      	ldrb	r3, [r7, #4]
 8000d46:	331a      	adds	r3, #26
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000d4c:	f107 030c 	add.w	r3, r7, #12
 8000d50:	2104      	movs	r1, #4
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff ff66 	bl	8000c24 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000d58:	202c      	movs	r0, #44	@ 0x2c
 8000d5a:	f7ff ff49 	bl	8000bf0 <ST7735_WriteCommand>
}
 8000d5e:	bf00      	nop
 8000d60:	3714      	adds	r7, #20
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd90      	pop	{r4, r7, pc}
	...

08000d68 <ST7735_Init>:

void ST7735_Init() {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
    ST7735_Select();
 8000d6c:	f7ff ff12 	bl	8000b94 <ST7735_Select>
    ST7735_Reset();
 8000d70:	f7ff ff28 	bl	8000bc4 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8000d74:	4806      	ldr	r0, [pc, #24]	@ (8000d90 <ST7735_Init+0x28>)
 8000d76:	f7ff ff71 	bl	8000c5c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8000d7a:	4806      	ldr	r0, [pc, #24]	@ (8000d94 <ST7735_Init+0x2c>)
 8000d7c:	f7ff ff6e 	bl	8000c5c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8000d80:	4805      	ldr	r0, [pc, #20]	@ (8000d98 <ST7735_Init+0x30>)
 8000d82:	f7ff ff6b 	bl	8000c5c <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8000d86:	f7ff ff11 	bl	8000bac <ST7735_Unselect>
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	080054b0 	.word	0x080054b0
 8000d94:	080054ec 	.word	0x080054ec
 8000d98:	080054fc 	.word	0x080054fc

08000d9c <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	b590      	push	{r4, r7, lr}
 8000da0:	b089      	sub	sp, #36	@ 0x24
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	637b      	str	r3, [r7, #52]	@ 0x34
 8000da6:	4603      	mov	r3, r0
 8000da8:	80fb      	strh	r3, [r7, #6]
 8000daa:	460b      	mov	r3, r1
 8000dac:	80bb      	strh	r3, [r7, #4]
 8000dae:	4613      	mov	r3, r2
 8000db0:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000db2:	88fb      	ldrh	r3, [r7, #6]
 8000db4:	b2d8      	uxtb	r0, r3
 8000db6:	88bb      	ldrh	r3, [r7, #4]
 8000db8:	b2d9      	uxtb	r1, r3
 8000dba:	88fb      	ldrh	r3, [r7, #6]
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000dc2:	4413      	add	r3, r2
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	b2dc      	uxtb	r4, r3
 8000dca:	88bb      	ldrh	r3, [r7, #4]
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000dd2:	4413      	add	r3, r2
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	4622      	mov	r2, r4
 8000ddc:	f7ff ff87 	bl	8000cee <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000de0:	2300      	movs	r3, #0
 8000de2:	61fb      	str	r3, [r7, #28]
 8000de4:	e043      	b.n	8000e6e <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8000de6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000de8:	78fb      	ldrb	r3, [r7, #3]
 8000dea:	3b20      	subs	r3, #32
 8000dec:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8000df0:	fb01 f303 	mul.w	r3, r1, r3
 8000df4:	4619      	mov	r1, r3
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	440b      	add	r3, r1
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	4413      	add	r3, r2
 8000dfe:	881b      	ldrh	r3, [r3, #0]
 8000e00:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000e02:	2300      	movs	r3, #0
 8000e04:	61bb      	str	r3, [r7, #24]
 8000e06:	e029      	b.n	8000e5c <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8000e08:	697a      	ldr	r2, [r7, #20]
 8000e0a:	69bb      	ldr	r3, [r7, #24]
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d00e      	beq.n	8000e36 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000e18:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000e1a:	0a1b      	lsrs	r3, r3, #8
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	743b      	strb	r3, [r7, #16]
 8000e22:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8000e28:	f107 0310 	add.w	r3, r7, #16
 8000e2c:	2102      	movs	r1, #2
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff fef8 	bl	8000c24 <ST7735_WriteData>
 8000e34:	e00f      	b.n	8000e56 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000e36:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000e3a:	0a1b      	lsrs	r3, r3, #8
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	733b      	strb	r3, [r7, #12]
 8000e42:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8000e4a:	f107 030c 	add.w	r3, r7, #12
 8000e4e:	2102      	movs	r1, #2
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff fee7 	bl	8000c24 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	61bb      	str	r3, [r7, #24]
 8000e5c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000e60:	461a      	mov	r2, r3
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d3cf      	bcc.n	8000e08 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	61fb      	str	r3, [r7, #28]
 8000e6e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000e72:	461a      	mov	r2, r3
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d3b5      	bcc.n	8000de6 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000e7a:	bf00      	nop
 8000e7c:	bf00      	nop
 8000e7e:	3724      	adds	r7, #36	@ 0x24
 8000e80:	46bd      	mov	sp, r7
 8000e82:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000e86:	b002      	add	sp, #8
 8000e88:	4770      	bx	lr

08000e8a <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af04      	add	r7, sp, #16
 8000e92:	603a      	str	r2, [r7, #0]
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	4603      	mov	r3, r0
 8000e98:	80fb      	strh	r3, [r7, #6]
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8000e9e:	f7ff fe79 	bl	8000b94 <ST7735_Select>

    while(*str) {
 8000ea2:	e02d      	b.n	8000f00 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8000ea4:	88fb      	ldrh	r3, [r7, #6]
 8000ea6:	7d3a      	ldrb	r2, [r7, #20]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	2b9f      	cmp	r3, #159	@ 0x9f
 8000eac:	dd13      	ble.n	8000ed6 <ST7735_WriteString+0x4c>
            x = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000eb2:	7d7b      	ldrb	r3, [r7, #21]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	88bb      	ldrh	r3, [r7, #4]
 8000eb8:	4413      	add	r3, r2
 8000eba:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8000ebc:	88bb      	ldrh	r3, [r7, #4]
 8000ebe:	7d7a      	ldrb	r2, [r7, #21]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	2b4f      	cmp	r3, #79	@ 0x4f
 8000ec4:	dc21      	bgt.n	8000f0a <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b20      	cmp	r3, #32
 8000ecc:	d103      	bne.n	8000ed6 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	603b      	str	r3, [r7, #0]
                continue;
 8000ed4:	e014      	b.n	8000f00 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	781a      	ldrb	r2, [r3, #0]
 8000eda:	88b9      	ldrh	r1, [r7, #4]
 8000edc:	88f8      	ldrh	r0, [r7, #6]
 8000ede:	8c3b      	ldrh	r3, [r7, #32]
 8000ee0:	9302      	str	r3, [sp, #8]
 8000ee2:	8bbb      	ldrh	r3, [r7, #28]
 8000ee4:	9301      	str	r3, [sp, #4]
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	f7ff ff56 	bl	8000d9c <ST7735_WriteChar>
        x += font.width;
 8000ef0:	7d3b      	ldrb	r3, [r7, #20]
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	88fb      	ldrh	r3, [r7, #6]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	80fb      	strh	r3, [r7, #6]
        str++;
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	3301      	adds	r3, #1
 8000efe:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d1cd      	bne.n	8000ea4 <ST7735_WriteString+0x1a>
 8000f08:	e000      	b.n	8000f0c <ST7735_WriteString+0x82>
                break;
 8000f0a:	bf00      	nop
    }

    ST7735_Unselect();
 8000f0c:	f7ff fe4e 	bl	8000bac <ST7735_Unselect>
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f1a:	b002      	add	sp, #8
 8000f1c:	4770      	bx	lr
	...

08000f20 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000f20:	b590      	push	{r4, r7, lr}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4604      	mov	r4, r0
 8000f28:	4608      	mov	r0, r1
 8000f2a:	4611      	mov	r1, r2
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4623      	mov	r3, r4
 8000f30:	80fb      	strh	r3, [r7, #6]
 8000f32:	4603      	mov	r3, r0
 8000f34:	80bb      	strh	r3, [r7, #4]
 8000f36:	460b      	mov	r3, r1
 8000f38:	807b      	strh	r3, [r7, #2]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000f3e:	88fb      	ldrh	r3, [r7, #6]
 8000f40:	2b9f      	cmp	r3, #159	@ 0x9f
 8000f42:	d858      	bhi.n	8000ff6 <ST7735_FillRectangle+0xd6>
 8000f44:	88bb      	ldrh	r3, [r7, #4]
 8000f46:	2b4f      	cmp	r3, #79	@ 0x4f
 8000f48:	d855      	bhi.n	8000ff6 <ST7735_FillRectangle+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8000f4a:	88fa      	ldrh	r2, [r7, #6]
 8000f4c:	887b      	ldrh	r3, [r7, #2]
 8000f4e:	4413      	add	r3, r2
 8000f50:	2ba0      	cmp	r3, #160	@ 0xa0
 8000f52:	dd03      	ble.n	8000f5c <ST7735_FillRectangle+0x3c>
 8000f54:	88fb      	ldrh	r3, [r7, #6]
 8000f56:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 8000f5a:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8000f5c:	88ba      	ldrh	r2, [r7, #4]
 8000f5e:	883b      	ldrh	r3, [r7, #0]
 8000f60:	4413      	add	r3, r2
 8000f62:	2b50      	cmp	r3, #80	@ 0x50
 8000f64:	dd03      	ble.n	8000f6e <ST7735_FillRectangle+0x4e>
 8000f66:	88bb      	ldrh	r3, [r7, #4]
 8000f68:	f1c3 0350 	rsb	r3, r3, #80	@ 0x50
 8000f6c:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000f6e:	f7ff fe11 	bl	8000b94 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000f72:	88fb      	ldrh	r3, [r7, #6]
 8000f74:	b2d8      	uxtb	r0, r3
 8000f76:	88bb      	ldrh	r3, [r7, #4]
 8000f78:	b2d9      	uxtb	r1, r3
 8000f7a:	88fb      	ldrh	r3, [r7, #6]
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	887b      	ldrh	r3, [r7, #2]
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	4413      	add	r3, r2
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	3b01      	subs	r3, #1
 8000f88:	b2dc      	uxtb	r4, r3
 8000f8a:	88bb      	ldrh	r3, [r7, #4]
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	883b      	ldrh	r3, [r7, #0]
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	4413      	add	r3, r2
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	3b01      	subs	r3, #1
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	4622      	mov	r2, r4
 8000f9c:	f7ff fea7 	bl	8000cee <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000fa0:	8c3b      	ldrh	r3, [r7, #32]
 8000fa2:	0a1b      	lsrs	r3, r3, #8
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	733b      	strb	r3, [r7, #12]
 8000faa:	8c3b      	ldrh	r3, [r7, #32]
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fb6:	4812      	ldr	r0, [pc, #72]	@ (8001000 <ST7735_FillRectangle+0xe0>)
 8000fb8:	f000 fd68 	bl	8001a8c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000fbc:	883b      	ldrh	r3, [r7, #0]
 8000fbe:	80bb      	strh	r3, [r7, #4]
 8000fc0:	e013      	b.n	8000fea <ST7735_FillRectangle+0xca>
        for(x = w; x > 0; x--) {
 8000fc2:	887b      	ldrh	r3, [r7, #2]
 8000fc4:	80fb      	strh	r3, [r7, #6]
 8000fc6:	e00a      	b.n	8000fde <ST7735_FillRectangle+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000fc8:	f107 010c 	add.w	r1, r7, #12
 8000fcc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fd0:	2202      	movs	r2, #2
 8000fd2:	480c      	ldr	r0, [pc, #48]	@ (8001004 <ST7735_FillRectangle+0xe4>)
 8000fd4:	f001 fa50 	bl	8002478 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000fd8:	88fb      	ldrh	r3, [r7, #6]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	80fb      	strh	r3, [r7, #6]
 8000fde:	88fb      	ldrh	r3, [r7, #6]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d1f1      	bne.n	8000fc8 <ST7735_FillRectangle+0xa8>
    for(y = h; y > 0; y--) {
 8000fe4:	88bb      	ldrh	r3, [r7, #4]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	80bb      	strh	r3, [r7, #4]
 8000fea:	88bb      	ldrh	r3, [r7, #4]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d1e8      	bne.n	8000fc2 <ST7735_FillRectangle+0xa2>
        }
    }

    ST7735_Unselect();
 8000ff0:	f7ff fddc 	bl	8000bac <ST7735_Unselect>
 8000ff4:	e000      	b.n	8000ff8 <ST7735_FillRectangle+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000ff6:	bf00      	nop
}
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd90      	pop	{r4, r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40010c00 	.word	0x40010c00
 8001004:	2000037c 	.word	0x2000037c

08001008 <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af02      	add	r7, sp, #8
 800100e:	4603      	mov	r3, r0
 8001010:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8001012:	88fb      	ldrh	r3, [r7, #6]
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	2350      	movs	r3, #80	@ 0x50
 8001018:	22a0      	movs	r2, #160	@ 0xa0
 800101a:	2100      	movs	r1, #0
 800101c:	2000      	movs	r0, #0
 800101e:	f7ff ff7f 	bl	8000f20 <ST7735_FillRectangle>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001032:	4b18      	ldr	r3, [pc, #96]	@ (8001094 <HAL_MspInit+0x68>)
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	4a17      	ldr	r2, [pc, #92]	@ (8001094 <HAL_MspInit+0x68>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	6193      	str	r3, [r2, #24]
 800103e:	4b15      	ldr	r3, [pc, #84]	@ (8001094 <HAL_MspInit+0x68>)
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800104a:	4b12      	ldr	r3, [pc, #72]	@ (8001094 <HAL_MspInit+0x68>)
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	4a11      	ldr	r2, [pc, #68]	@ (8001094 <HAL_MspInit+0x68>)
 8001050:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001054:	61d3      	str	r3, [r2, #28]
 8001056:	4b0f      	ldr	r3, [pc, #60]	@ (8001094 <HAL_MspInit+0x68>)
 8001058:	69db      	ldr	r3, [r3, #28]
 800105a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	210f      	movs	r1, #15
 8001066:	f06f 0001 	mvn.w	r0, #1
 800106a:	f000 fb50 	bl	800170e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800106e:	4b0a      	ldr	r3, [pc, #40]	@ (8001098 <HAL_MspInit+0x6c>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	4a04      	ldr	r2, [pc, #16]	@ (8001098 <HAL_MspInit+0x6c>)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800108a:	bf00      	nop
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40021000 	.word	0x40021000
 8001098:	40010000 	.word	0x40010000

0800109c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	@ 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0318 	add.w	r3, r7, #24
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a31      	ldr	r2, [pc, #196]	@ (800117c <HAL_SPI_MspInit+0xe0>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d130      	bne.n	800111e <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010bc:	4b30      	ldr	r3, [pc, #192]	@ (8001180 <HAL_SPI_MspInit+0xe4>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	4a2f      	ldr	r2, [pc, #188]	@ (8001180 <HAL_SPI_MspInit+0xe4>)
 80010c2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010c6:	6193      	str	r3, [r2, #24]
 80010c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001180 <HAL_SPI_MspInit+0xe4>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010d0:	617b      	str	r3, [r7, #20]
 80010d2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001180 <HAL_SPI_MspInit+0xe4>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	4a29      	ldr	r2, [pc, #164]	@ (8001180 <HAL_SPI_MspInit+0xe4>)
 80010da:	f043 0304 	orr.w	r3, r3, #4
 80010de:	6193      	str	r3, [r2, #24]
 80010e0:	4b27      	ldr	r3, [pc, #156]	@ (8001180 <HAL_SPI_MspInit+0xe4>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	f003 0304 	and.w	r3, r3, #4
 80010e8:	613b      	str	r3, [r7, #16]
 80010ea:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80010ec:	23a0      	movs	r3, #160	@ 0xa0
 80010ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f0:	2302      	movs	r3, #2
 80010f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010f4:	2303      	movs	r3, #3
 80010f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f8:	f107 0318 	add.w	r3, r7, #24
 80010fc:	4619      	mov	r1, r3
 80010fe:	4821      	ldr	r0, [pc, #132]	@ (8001184 <HAL_SPI_MspInit+0xe8>)
 8001100:	f000 fb30 	bl	8001764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001104:	2340      	movs	r3, #64	@ 0x40
 8001106:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001108:	2300      	movs	r3, #0
 800110a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001110:	f107 0318 	add.w	r3, r7, #24
 8001114:	4619      	mov	r1, r3
 8001116:	481b      	ldr	r0, [pc, #108]	@ (8001184 <HAL_SPI_MspInit+0xe8>)
 8001118:	f000 fb24 	bl	8001764 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800111c:	e029      	b.n	8001172 <HAL_SPI_MspInit+0xd6>
  else if(hspi->Instance==SPI2)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a19      	ldr	r2, [pc, #100]	@ (8001188 <HAL_SPI_MspInit+0xec>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d124      	bne.n	8001172 <HAL_SPI_MspInit+0xd6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001128:	4b15      	ldr	r3, [pc, #84]	@ (8001180 <HAL_SPI_MspInit+0xe4>)
 800112a:	69db      	ldr	r3, [r3, #28]
 800112c:	4a14      	ldr	r2, [pc, #80]	@ (8001180 <HAL_SPI_MspInit+0xe4>)
 800112e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001132:	61d3      	str	r3, [r2, #28]
 8001134:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <HAL_SPI_MspInit+0xe4>)
 8001136:	69db      	ldr	r3, [r3, #28]
 8001138:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001140:	4b0f      	ldr	r3, [pc, #60]	@ (8001180 <HAL_SPI_MspInit+0xe4>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	4a0e      	ldr	r2, [pc, #56]	@ (8001180 <HAL_SPI_MspInit+0xe4>)
 8001146:	f043 0308 	orr.w	r3, r3, #8
 800114a:	6193      	str	r3, [r2, #24]
 800114c:	4b0c      	ldr	r3, [pc, #48]	@ (8001180 <HAL_SPI_MspInit+0xe4>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	f003 0308 	and.w	r3, r3, #8
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001158:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 800115c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001162:	2303      	movs	r3, #3
 8001164:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001166:	f107 0318 	add.w	r3, r7, #24
 800116a:	4619      	mov	r1, r3
 800116c:	4807      	ldr	r0, [pc, #28]	@ (800118c <HAL_SPI_MspInit+0xf0>)
 800116e:	f000 faf9 	bl	8001764 <HAL_GPIO_Init>
}
 8001172:	bf00      	nop
 8001174:	3728      	adds	r7, #40	@ 0x28
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40013000 	.word	0x40013000
 8001180:	40021000 	.word	0x40021000
 8001184:	40010800 	.word	0x40010800
 8001188:	40003800 	.word	0x40003800
 800118c:	40010c00 	.word	0x40010c00

08001190 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a09      	ldr	r2, [pc, #36]	@ (80011c4 <HAL_TIM_PWM_MspInit+0x34>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d10b      	bne.n	80011ba <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80011a2:	4b09      	ldr	r3, [pc, #36]	@ (80011c8 <HAL_TIM_PWM_MspInit+0x38>)
 80011a4:	69db      	ldr	r3, [r3, #28]
 80011a6:	4a08      	ldr	r2, [pc, #32]	@ (80011c8 <HAL_TIM_PWM_MspInit+0x38>)
 80011a8:	f043 0304 	orr.w	r3, r3, #4
 80011ac:	61d3      	str	r3, [r2, #28]
 80011ae:	4b06      	ldr	r3, [pc, #24]	@ (80011c8 <HAL_TIM_PWM_MspInit+0x38>)
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	f003 0304 	and.w	r3, r3, #4
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 80011ba:	bf00      	nop
 80011bc:	3714      	adds	r7, #20
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr
 80011c4:	40000800 	.word	0x40000800
 80011c8:	40021000 	.word	0x40021000

080011cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a09      	ldr	r2, [pc, #36]	@ (8001200 <HAL_TIM_Base_MspInit+0x34>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d10b      	bne.n	80011f6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80011de:	4b09      	ldr	r3, [pc, #36]	@ (8001204 <HAL_TIM_Base_MspInit+0x38>)
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	4a08      	ldr	r2, [pc, #32]	@ (8001204 <HAL_TIM_Base_MspInit+0x38>)
 80011e4:	f043 0320 	orr.w	r3, r3, #32
 80011e8:	61d3      	str	r3, [r2, #28]
 80011ea:	4b06      	ldr	r3, [pc, #24]	@ (8001204 <HAL_TIM_Base_MspInit+0x38>)
 80011ec:	69db      	ldr	r3, [r3, #28]
 80011ee:	f003 0320 	and.w	r3, r3, #32
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM7_MspInit 1 */

  }

}
 80011f6:	bf00      	nop
 80011f8:	3714      	adds	r7, #20
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr
 8001200:	40001400 	.word	0x40001400
 8001204:	40021000 	.word	0x40021000

08001208 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001210:	f107 0310 	add.w	r3, r7, #16
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a0f      	ldr	r2, [pc, #60]	@ (8001260 <HAL_TIM_MspPostInit+0x58>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d117      	bne.n	8001258 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001228:	4b0e      	ldr	r3, [pc, #56]	@ (8001264 <HAL_TIM_MspPostInit+0x5c>)
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	4a0d      	ldr	r2, [pc, #52]	@ (8001264 <HAL_TIM_MspPostInit+0x5c>)
 800122e:	f043 0308 	orr.w	r3, r3, #8
 8001232:	6193      	str	r3, [r2, #24]
 8001234:	4b0b      	ldr	r3, [pc, #44]	@ (8001264 <HAL_TIM_MspPostInit+0x5c>)
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	f003 0308 	and.w	r3, r3, #8
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001240:	23c0      	movs	r3, #192	@ 0xc0
 8001242:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001244:	2302      	movs	r3, #2
 8001246:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001248:	2302      	movs	r3, #2
 800124a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124c:	f107 0310 	add.w	r3, r7, #16
 8001250:	4619      	mov	r1, r3
 8001252:	4805      	ldr	r0, [pc, #20]	@ (8001268 <HAL_TIM_MspPostInit+0x60>)
 8001254:	f000 fa86 	bl	8001764 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001258:	bf00      	nop
 800125a:	3720      	adds	r7, #32
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40000800 	.word	0x40000800
 8001264:	40021000 	.word	0x40021000
 8001268:	40010c00 	.word	0x40010c00

0800126c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08a      	sub	sp, #40	@ 0x28
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 0318 	add.w	r3, r7, #24
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a37      	ldr	r2, [pc, #220]	@ (8001364 <HAL_UART_MspInit+0xf8>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d132      	bne.n	80012f2 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800128c:	4b36      	ldr	r3, [pc, #216]	@ (8001368 <HAL_UART_MspInit+0xfc>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	4a35      	ldr	r2, [pc, #212]	@ (8001368 <HAL_UART_MspInit+0xfc>)
 8001292:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001296:	6193      	str	r3, [r2, #24]
 8001298:	4b33      	ldr	r3, [pc, #204]	@ (8001368 <HAL_UART_MspInit+0xfc>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012a0:	617b      	str	r3, [r7, #20]
 80012a2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a4:	4b30      	ldr	r3, [pc, #192]	@ (8001368 <HAL_UART_MspInit+0xfc>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	4a2f      	ldr	r2, [pc, #188]	@ (8001368 <HAL_UART_MspInit+0xfc>)
 80012aa:	f043 0304 	orr.w	r3, r3, #4
 80012ae:	6193      	str	r3, [r2, #24]
 80012b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001368 <HAL_UART_MspInit+0xfc>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	f003 0304 	and.w	r3, r3, #4
 80012b8:	613b      	str	r3, [r7, #16]
 80012ba:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c2:	2302      	movs	r3, #2
 80012c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012c6:	2303      	movs	r3, #3
 80012c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ca:	f107 0318 	add.w	r3, r7, #24
 80012ce:	4619      	mov	r1, r3
 80012d0:	4826      	ldr	r0, [pc, #152]	@ (800136c <HAL_UART_MspInit+0x100>)
 80012d2:	f000 fa47 	bl	8001764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012dc:	2300      	movs	r3, #0
 80012de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e4:	f107 0318 	add.w	r3, r7, #24
 80012e8:	4619      	mov	r1, r3
 80012ea:	4820      	ldr	r0, [pc, #128]	@ (800136c <HAL_UART_MspInit+0x100>)
 80012ec:	f000 fa3a 	bl	8001764 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012f0:	e034      	b.n	800135c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a1e      	ldr	r2, [pc, #120]	@ (8001370 <HAL_UART_MspInit+0x104>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d12f      	bne.n	800135c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80012fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001368 <HAL_UART_MspInit+0xfc>)
 80012fe:	69db      	ldr	r3, [r3, #28]
 8001300:	4a19      	ldr	r2, [pc, #100]	@ (8001368 <HAL_UART_MspInit+0xfc>)
 8001302:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001306:	61d3      	str	r3, [r2, #28]
 8001308:	4b17      	ldr	r3, [pc, #92]	@ (8001368 <HAL_UART_MspInit+0xfc>)
 800130a:	69db      	ldr	r3, [r3, #28]
 800130c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001314:	4b14      	ldr	r3, [pc, #80]	@ (8001368 <HAL_UART_MspInit+0xfc>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	4a13      	ldr	r2, [pc, #76]	@ (8001368 <HAL_UART_MspInit+0xfc>)
 800131a:	f043 0304 	orr.w	r3, r3, #4
 800131e:	6193      	str	r3, [r2, #24]
 8001320:	4b11      	ldr	r3, [pc, #68]	@ (8001368 <HAL_UART_MspInit+0xfc>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	f003 0304 	and.w	r3, r3, #4
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800132c:	2304      	movs	r3, #4
 800132e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001330:	2302      	movs	r3, #2
 8001332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001334:	2303      	movs	r3, #3
 8001336:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001338:	f107 0318 	add.w	r3, r7, #24
 800133c:	4619      	mov	r1, r3
 800133e:	480b      	ldr	r0, [pc, #44]	@ (800136c <HAL_UART_MspInit+0x100>)
 8001340:	f000 fa10 	bl	8001764 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001344:	2308      	movs	r3, #8
 8001346:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001348:	2300      	movs	r3, #0
 800134a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001350:	f107 0318 	add.w	r3, r7, #24
 8001354:	4619      	mov	r1, r3
 8001356:	4805      	ldr	r0, [pc, #20]	@ (800136c <HAL_UART_MspInit+0x100>)
 8001358:	f000 fa04 	bl	8001764 <HAL_GPIO_Init>
}
 800135c:	bf00      	nop
 800135e:	3728      	adds	r7, #40	@ 0x28
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40013800 	.word	0x40013800
 8001368:	40021000 	.word	0x40021000
 800136c:	40010800 	.word	0x40010800
 8001370:	40004400 	.word	0x40004400

08001374 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08c      	sub	sp, #48	@ 0x30
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800137c:	2300      	movs	r3, #0
 800137e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001380:	2300      	movs	r3, #0
 8001382:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001384:	2300      	movs	r3, #0
 8001386:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800138a:	4b2e      	ldr	r3, [pc, #184]	@ (8001444 <HAL_InitTick+0xd0>)
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	4a2d      	ldr	r2, [pc, #180]	@ (8001444 <HAL_InitTick+0xd0>)
 8001390:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001394:	6193      	str	r3, [r2, #24]
 8001396:	4b2b      	ldr	r3, [pc, #172]	@ (8001444 <HAL_InitTick+0xd0>)
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013a2:	f107 020c 	add.w	r2, r7, #12
 80013a6:	f107 0310 	add.w	r3, r7, #16
 80013aa:	4611      	mov	r1, r2
 80013ac:	4618      	mov	r0, r3
 80013ae:	f000 ff91 	bl	80022d4 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80013b2:	f000 ff7b 	bl	80022ac <HAL_RCC_GetPCLK2Freq>
 80013b6:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013ba:	4a23      	ldr	r2, [pc, #140]	@ (8001448 <HAL_InitTick+0xd4>)
 80013bc:	fba2 2303 	umull	r2, r3, r2, r3
 80013c0:	0c9b      	lsrs	r3, r3, #18
 80013c2:	3b01      	subs	r3, #1
 80013c4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80013c6:	4b21      	ldr	r3, [pc, #132]	@ (800144c <HAL_InitTick+0xd8>)
 80013c8:	4a21      	ldr	r2, [pc, #132]	@ (8001450 <HAL_InitTick+0xdc>)
 80013ca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80013cc:	4b1f      	ldr	r3, [pc, #124]	@ (800144c <HAL_InitTick+0xd8>)
 80013ce:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013d2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80013d4:	4a1d      	ldr	r2, [pc, #116]	@ (800144c <HAL_InitTick+0xd8>)
 80013d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80013da:	4b1c      	ldr	r3, [pc, #112]	@ (800144c <HAL_InitTick+0xd8>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e0:	4b1a      	ldr	r3, [pc, #104]	@ (800144c <HAL_InitTick+0xd8>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e6:	4b19      	ldr	r3, [pc, #100]	@ (800144c <HAL_InitTick+0xd8>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80013ec:	4817      	ldr	r0, [pc, #92]	@ (800144c <HAL_InitTick+0xd8>)
 80013ee:	f001 fa2d 	bl	800284c <HAL_TIM_Base_Init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80013f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d11b      	bne.n	8001438 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001400:	4812      	ldr	r0, [pc, #72]	@ (800144c <HAL_InitTick+0xd8>)
 8001402:	f001 fa73 	bl	80028ec <HAL_TIM_Base_Start_IT>
 8001406:	4603      	mov	r3, r0
 8001408:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800140c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001410:	2b00      	cmp	r3, #0
 8001412:	d111      	bne.n	8001438 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001414:	2019      	movs	r0, #25
 8001416:	f000 f996 	bl	8001746 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b0f      	cmp	r3, #15
 800141e:	d808      	bhi.n	8001432 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001420:	2200      	movs	r2, #0
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	2019      	movs	r0, #25
 8001426:	f000 f972 	bl	800170e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800142a:	4a0a      	ldr	r2, [pc, #40]	@ (8001454 <HAL_InitTick+0xe0>)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6013      	str	r3, [r2, #0]
 8001430:	e002      	b.n	8001438 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001438:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800143c:	4618      	mov	r0, r3
 800143e:	3730      	adds	r7, #48	@ 0x30
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40021000 	.word	0x40021000
 8001448:	431bde83 	.word	0x431bde83
 800144c:	20000504 	.word	0x20000504
 8001450:	40012c00 	.word	0x40012c00
 8001454:	2000000c 	.word	0x2000000c

08001458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800145c:	bf00      	nop
 800145e:	e7fd      	b.n	800145c <NMI_Handler+0x4>

08001460 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001464:	bf00      	nop
 8001466:	e7fd      	b.n	8001464 <HardFault_Handler+0x4>

08001468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800146c:	bf00      	nop
 800146e:	e7fd      	b.n	800146c <MemManage_Handler+0x4>

08001470 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001474:	bf00      	nop
 8001476:	e7fd      	b.n	8001474 <BusFault_Handler+0x4>

08001478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800147c:	bf00      	nop
 800147e:	e7fd      	b.n	800147c <UsageFault_Handler+0x4>

08001480 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr

0800148c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001490:	4802      	ldr	r0, [pc, #8]	@ (800149c <TIM1_UP_IRQHandler+0x10>)
 8001492:	f001 fada 	bl	8002a4a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000504 	.word	0x20000504

080014a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr

080014ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014ac:	f7ff fff8 	bl	80014a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014b0:	480b      	ldr	r0, [pc, #44]	@ (80014e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80014b2:	490c      	ldr	r1, [pc, #48]	@ (80014e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80014b4:	4a0c      	ldr	r2, [pc, #48]	@ (80014e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80014b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b8:	e002      	b.n	80014c0 <LoopCopyDataInit>

080014ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014be:	3304      	adds	r3, #4

080014c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c4:	d3f9      	bcc.n	80014ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014c6:	4a09      	ldr	r2, [pc, #36]	@ (80014ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014c8:	4c09      	ldr	r4, [pc, #36]	@ (80014f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014cc:	e001      	b.n	80014d2 <LoopFillZerobss>

080014ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d0:	3204      	adds	r2, #4

080014d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d4:	d3fb      	bcc.n	80014ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014d6:	f003 fb39 	bl	8004b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014da:	f7fe ff29 	bl	8000330 <main>
  bx lr
 80014de:	4770      	bx	lr
  ldr r0, =_sdata
 80014e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80014e8:	08005664 	.word	0x08005664
  ldr r2, =_sbss
 80014ec:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80014f0:	20001fdc 	.word	0x20001fdc

080014f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014f4:	e7fe      	b.n	80014f4 <ADC1_2_IRQHandler>
	...

080014f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014fc:	4b08      	ldr	r3, [pc, #32]	@ (8001520 <HAL_Init+0x28>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a07      	ldr	r2, [pc, #28]	@ (8001520 <HAL_Init+0x28>)
 8001502:	f043 0310 	orr.w	r3, r3, #16
 8001506:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001508:	2003      	movs	r0, #3
 800150a:	f000 f8f5 	bl	80016f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800150e:	200f      	movs	r0, #15
 8001510:	f7ff ff30 	bl	8001374 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001514:	f7ff fd8a 	bl	800102c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40022000 	.word	0x40022000

08001524 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001528:	4b05      	ldr	r3, [pc, #20]	@ (8001540 <HAL_IncTick+0x1c>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	461a      	mov	r2, r3
 800152e:	4b05      	ldr	r3, [pc, #20]	@ (8001544 <HAL_IncTick+0x20>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4413      	add	r3, r2
 8001534:	4a03      	ldr	r2, [pc, #12]	@ (8001544 <HAL_IncTick+0x20>)
 8001536:	6013      	str	r3, [r2, #0]
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr
 8001540:	20000010 	.word	0x20000010
 8001544:	2000054c 	.word	0x2000054c

08001548 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return uwTick;
 800154c:	4b02      	ldr	r3, [pc, #8]	@ (8001558 <HAL_GetTick+0x10>)
 800154e:	681b      	ldr	r3, [r3, #0]
}
 8001550:	4618      	mov	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr
 8001558:	2000054c 	.word	0x2000054c

0800155c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001564:	f7ff fff0 	bl	8001548 <HAL_GetTick>
 8001568:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001574:	d005      	beq.n	8001582 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001576:	4b0a      	ldr	r3, [pc, #40]	@ (80015a0 <HAL_Delay+0x44>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	461a      	mov	r2, r3
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	4413      	add	r3, r2
 8001580:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001582:	bf00      	nop
 8001584:	f7ff ffe0 	bl	8001548 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	429a      	cmp	r2, r3
 8001592:	d8f7      	bhi.n	8001584 <HAL_Delay+0x28>
  {
  }
}
 8001594:	bf00      	nop
 8001596:	bf00      	nop
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000010 	.word	0x20000010

080015a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b4:	4b0c      	ldr	r3, [pc, #48]	@ (80015e8 <__NVIC_SetPriorityGrouping+0x44>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ba:	68ba      	ldr	r2, [r7, #8]
 80015bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015c0:	4013      	ands	r3, r2
 80015c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015d6:	4a04      	ldr	r2, [pc, #16]	@ (80015e8 <__NVIC_SetPriorityGrouping+0x44>)
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	60d3      	str	r3, [r2, #12]
}
 80015dc:	bf00      	nop
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015f0:	4b04      	ldr	r3, [pc, #16]	@ (8001604 <__NVIC_GetPriorityGrouping+0x18>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	0a1b      	lsrs	r3, r3, #8
 80015f6:	f003 0307 	and.w	r3, r3, #7
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	2b00      	cmp	r3, #0
 8001618:	db0b      	blt.n	8001632 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	f003 021f 	and.w	r2, r3, #31
 8001620:	4906      	ldr	r1, [pc, #24]	@ (800163c <__NVIC_EnableIRQ+0x34>)
 8001622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001626:	095b      	lsrs	r3, r3, #5
 8001628:	2001      	movs	r0, #1
 800162a:	fa00 f202 	lsl.w	r2, r0, r2
 800162e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr
 800163c:	e000e100 	.word	0xe000e100

08001640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	6039      	str	r1, [r7, #0]
 800164a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001650:	2b00      	cmp	r3, #0
 8001652:	db0a      	blt.n	800166a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	b2da      	uxtb	r2, r3
 8001658:	490c      	ldr	r1, [pc, #48]	@ (800168c <__NVIC_SetPriority+0x4c>)
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	0112      	lsls	r2, r2, #4
 8001660:	b2d2      	uxtb	r2, r2
 8001662:	440b      	add	r3, r1
 8001664:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001668:	e00a      	b.n	8001680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	b2da      	uxtb	r2, r3
 800166e:	4908      	ldr	r1, [pc, #32]	@ (8001690 <__NVIC_SetPriority+0x50>)
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	f003 030f 	and.w	r3, r3, #15
 8001676:	3b04      	subs	r3, #4
 8001678:	0112      	lsls	r2, r2, #4
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	440b      	add	r3, r1
 800167e:	761a      	strb	r2, [r3, #24]
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	bc80      	pop	{r7}
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	e000e100 	.word	0xe000e100
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001694:	b480      	push	{r7}
 8001696:	b089      	sub	sp, #36	@ 0x24
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f1c3 0307 	rsb	r3, r3, #7
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	bf28      	it	cs
 80016b2:	2304      	movcs	r3, #4
 80016b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3304      	adds	r3, #4
 80016ba:	2b06      	cmp	r3, #6
 80016bc:	d902      	bls.n	80016c4 <NVIC_EncodePriority+0x30>
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	3b03      	subs	r3, #3
 80016c2:	e000      	b.n	80016c6 <NVIC_EncodePriority+0x32>
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43da      	mvns	r2, r3
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	401a      	ands	r2, r3
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016dc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	fa01 f303 	lsl.w	r3, r1, r3
 80016e6:	43d9      	mvns	r1, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ec:	4313      	orrs	r3, r2
         );
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3724      	adds	r7, #36	@ 0x24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr

080016f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff ff4f 	bl	80015a4 <__NVIC_SetPriorityGrouping>
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800170e:	b580      	push	{r7, lr}
 8001710:	b086      	sub	sp, #24
 8001712:	af00      	add	r7, sp, #0
 8001714:	4603      	mov	r3, r0
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	607a      	str	r2, [r7, #4]
 800171a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001720:	f7ff ff64 	bl	80015ec <__NVIC_GetPriorityGrouping>
 8001724:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	68b9      	ldr	r1, [r7, #8]
 800172a:	6978      	ldr	r0, [r7, #20]
 800172c:	f7ff ffb2 	bl	8001694 <NVIC_EncodePriority>
 8001730:	4602      	mov	r2, r0
 8001732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001736:	4611      	mov	r1, r2
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff81 	bl	8001640 <__NVIC_SetPriority>
}
 800173e:	bf00      	nop
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	4603      	mov	r3, r0
 800174e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff57 	bl	8001608 <__NVIC_EnableIRQ>
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
	...

08001764 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001764:	b480      	push	{r7}
 8001766:	b08b      	sub	sp, #44	@ 0x2c
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800176e:	2300      	movs	r3, #0
 8001770:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001772:	2300      	movs	r3, #0
 8001774:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001776:	e179      	b.n	8001a6c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001778:	2201      	movs	r2, #1
 800177a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	69fa      	ldr	r2, [r7, #28]
 8001788:	4013      	ands	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	429a      	cmp	r2, r3
 8001792:	f040 8168 	bne.w	8001a66 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	4a96      	ldr	r2, [pc, #600]	@ (80019f4 <HAL_GPIO_Init+0x290>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d05e      	beq.n	800185e <HAL_GPIO_Init+0xfa>
 80017a0:	4a94      	ldr	r2, [pc, #592]	@ (80019f4 <HAL_GPIO_Init+0x290>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d875      	bhi.n	8001892 <HAL_GPIO_Init+0x12e>
 80017a6:	4a94      	ldr	r2, [pc, #592]	@ (80019f8 <HAL_GPIO_Init+0x294>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d058      	beq.n	800185e <HAL_GPIO_Init+0xfa>
 80017ac:	4a92      	ldr	r2, [pc, #584]	@ (80019f8 <HAL_GPIO_Init+0x294>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d86f      	bhi.n	8001892 <HAL_GPIO_Init+0x12e>
 80017b2:	4a92      	ldr	r2, [pc, #584]	@ (80019fc <HAL_GPIO_Init+0x298>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d052      	beq.n	800185e <HAL_GPIO_Init+0xfa>
 80017b8:	4a90      	ldr	r2, [pc, #576]	@ (80019fc <HAL_GPIO_Init+0x298>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d869      	bhi.n	8001892 <HAL_GPIO_Init+0x12e>
 80017be:	4a90      	ldr	r2, [pc, #576]	@ (8001a00 <HAL_GPIO_Init+0x29c>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d04c      	beq.n	800185e <HAL_GPIO_Init+0xfa>
 80017c4:	4a8e      	ldr	r2, [pc, #568]	@ (8001a00 <HAL_GPIO_Init+0x29c>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d863      	bhi.n	8001892 <HAL_GPIO_Init+0x12e>
 80017ca:	4a8e      	ldr	r2, [pc, #568]	@ (8001a04 <HAL_GPIO_Init+0x2a0>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d046      	beq.n	800185e <HAL_GPIO_Init+0xfa>
 80017d0:	4a8c      	ldr	r2, [pc, #560]	@ (8001a04 <HAL_GPIO_Init+0x2a0>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d85d      	bhi.n	8001892 <HAL_GPIO_Init+0x12e>
 80017d6:	2b12      	cmp	r3, #18
 80017d8:	d82a      	bhi.n	8001830 <HAL_GPIO_Init+0xcc>
 80017da:	2b12      	cmp	r3, #18
 80017dc:	d859      	bhi.n	8001892 <HAL_GPIO_Init+0x12e>
 80017de:	a201      	add	r2, pc, #4	@ (adr r2, 80017e4 <HAL_GPIO_Init+0x80>)
 80017e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e4:	0800185f 	.word	0x0800185f
 80017e8:	08001839 	.word	0x08001839
 80017ec:	0800184b 	.word	0x0800184b
 80017f0:	0800188d 	.word	0x0800188d
 80017f4:	08001893 	.word	0x08001893
 80017f8:	08001893 	.word	0x08001893
 80017fc:	08001893 	.word	0x08001893
 8001800:	08001893 	.word	0x08001893
 8001804:	08001893 	.word	0x08001893
 8001808:	08001893 	.word	0x08001893
 800180c:	08001893 	.word	0x08001893
 8001810:	08001893 	.word	0x08001893
 8001814:	08001893 	.word	0x08001893
 8001818:	08001893 	.word	0x08001893
 800181c:	08001893 	.word	0x08001893
 8001820:	08001893 	.word	0x08001893
 8001824:	08001893 	.word	0x08001893
 8001828:	08001841 	.word	0x08001841
 800182c:	08001855 	.word	0x08001855
 8001830:	4a75      	ldr	r2, [pc, #468]	@ (8001a08 <HAL_GPIO_Init+0x2a4>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d013      	beq.n	800185e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001836:	e02c      	b.n	8001892 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	623b      	str	r3, [r7, #32]
          break;
 800183e:	e029      	b.n	8001894 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	3304      	adds	r3, #4
 8001846:	623b      	str	r3, [r7, #32]
          break;
 8001848:	e024      	b.n	8001894 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	3308      	adds	r3, #8
 8001850:	623b      	str	r3, [r7, #32]
          break;
 8001852:	e01f      	b.n	8001894 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	330c      	adds	r3, #12
 800185a:	623b      	str	r3, [r7, #32]
          break;
 800185c:	e01a      	b.n	8001894 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d102      	bne.n	800186c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001866:	2304      	movs	r3, #4
 8001868:	623b      	str	r3, [r7, #32]
          break;
 800186a:	e013      	b.n	8001894 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d105      	bne.n	8001880 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001874:	2308      	movs	r3, #8
 8001876:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	69fa      	ldr	r2, [r7, #28]
 800187c:	611a      	str	r2, [r3, #16]
          break;
 800187e:	e009      	b.n	8001894 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001880:	2308      	movs	r3, #8
 8001882:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69fa      	ldr	r2, [r7, #28]
 8001888:	615a      	str	r2, [r3, #20]
          break;
 800188a:	e003      	b.n	8001894 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800188c:	2300      	movs	r3, #0
 800188e:	623b      	str	r3, [r7, #32]
          break;
 8001890:	e000      	b.n	8001894 <HAL_GPIO_Init+0x130>
          break;
 8001892:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	2bff      	cmp	r3, #255	@ 0xff
 8001898:	d801      	bhi.n	800189e <HAL_GPIO_Init+0x13a>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	e001      	b.n	80018a2 <HAL_GPIO_Init+0x13e>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	3304      	adds	r3, #4
 80018a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	2bff      	cmp	r3, #255	@ 0xff
 80018a8:	d802      	bhi.n	80018b0 <HAL_GPIO_Init+0x14c>
 80018aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	e002      	b.n	80018b6 <HAL_GPIO_Init+0x152>
 80018b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b2:	3b08      	subs	r3, #8
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	210f      	movs	r1, #15
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	fa01 f303 	lsl.w	r3, r1, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	401a      	ands	r2, r3
 80018c8:	6a39      	ldr	r1, [r7, #32]
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	fa01 f303 	lsl.w	r3, r1, r3
 80018d0:	431a      	orrs	r2, r3
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f000 80c1 	beq.w	8001a66 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018e4:	4b49      	ldr	r3, [pc, #292]	@ (8001a0c <HAL_GPIO_Init+0x2a8>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	4a48      	ldr	r2, [pc, #288]	@ (8001a0c <HAL_GPIO_Init+0x2a8>)
 80018ea:	f043 0301 	orr.w	r3, r3, #1
 80018ee:	6193      	str	r3, [r2, #24]
 80018f0:	4b46      	ldr	r3, [pc, #280]	@ (8001a0c <HAL_GPIO_Init+0x2a8>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018fc:	4a44      	ldr	r2, [pc, #272]	@ (8001a10 <HAL_GPIO_Init+0x2ac>)
 80018fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001900:	089b      	lsrs	r3, r3, #2
 8001902:	3302      	adds	r3, #2
 8001904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001908:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800190a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190c:	f003 0303 	and.w	r3, r3, #3
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	220f      	movs	r2, #15
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	4013      	ands	r3, r2
 800191e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4a3c      	ldr	r2, [pc, #240]	@ (8001a14 <HAL_GPIO_Init+0x2b0>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d01f      	beq.n	8001968 <HAL_GPIO_Init+0x204>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a3b      	ldr	r2, [pc, #236]	@ (8001a18 <HAL_GPIO_Init+0x2b4>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d019      	beq.n	8001964 <HAL_GPIO_Init+0x200>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a3a      	ldr	r2, [pc, #232]	@ (8001a1c <HAL_GPIO_Init+0x2b8>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d013      	beq.n	8001960 <HAL_GPIO_Init+0x1fc>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a39      	ldr	r2, [pc, #228]	@ (8001a20 <HAL_GPIO_Init+0x2bc>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d00d      	beq.n	800195c <HAL_GPIO_Init+0x1f8>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a38      	ldr	r2, [pc, #224]	@ (8001a24 <HAL_GPIO_Init+0x2c0>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d007      	beq.n	8001958 <HAL_GPIO_Init+0x1f4>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a37      	ldr	r2, [pc, #220]	@ (8001a28 <HAL_GPIO_Init+0x2c4>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d101      	bne.n	8001954 <HAL_GPIO_Init+0x1f0>
 8001950:	2305      	movs	r3, #5
 8001952:	e00a      	b.n	800196a <HAL_GPIO_Init+0x206>
 8001954:	2306      	movs	r3, #6
 8001956:	e008      	b.n	800196a <HAL_GPIO_Init+0x206>
 8001958:	2304      	movs	r3, #4
 800195a:	e006      	b.n	800196a <HAL_GPIO_Init+0x206>
 800195c:	2303      	movs	r3, #3
 800195e:	e004      	b.n	800196a <HAL_GPIO_Init+0x206>
 8001960:	2302      	movs	r3, #2
 8001962:	e002      	b.n	800196a <HAL_GPIO_Init+0x206>
 8001964:	2301      	movs	r3, #1
 8001966:	e000      	b.n	800196a <HAL_GPIO_Init+0x206>
 8001968:	2300      	movs	r3, #0
 800196a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800196c:	f002 0203 	and.w	r2, r2, #3
 8001970:	0092      	lsls	r2, r2, #2
 8001972:	4093      	lsls	r3, r2
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	4313      	orrs	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800197a:	4925      	ldr	r1, [pc, #148]	@ (8001a10 <HAL_GPIO_Init+0x2ac>)
 800197c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197e:	089b      	lsrs	r3, r3, #2
 8001980:	3302      	adds	r3, #2
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d006      	beq.n	80019a2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001994:	4b25      	ldr	r3, [pc, #148]	@ (8001a2c <HAL_GPIO_Init+0x2c8>)
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	4924      	ldr	r1, [pc, #144]	@ (8001a2c <HAL_GPIO_Init+0x2c8>)
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	4313      	orrs	r3, r2
 800199e:	608b      	str	r3, [r1, #8]
 80019a0:	e006      	b.n	80019b0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019a2:	4b22      	ldr	r3, [pc, #136]	@ (8001a2c <HAL_GPIO_Init+0x2c8>)
 80019a4:	689a      	ldr	r2, [r3, #8]
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	43db      	mvns	r3, r3
 80019aa:	4920      	ldr	r1, [pc, #128]	@ (8001a2c <HAL_GPIO_Init+0x2c8>)
 80019ac:	4013      	ands	r3, r2
 80019ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d006      	beq.n	80019ca <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019bc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a2c <HAL_GPIO_Init+0x2c8>)
 80019be:	68da      	ldr	r2, [r3, #12]
 80019c0:	491a      	ldr	r1, [pc, #104]	@ (8001a2c <HAL_GPIO_Init+0x2c8>)
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	60cb      	str	r3, [r1, #12]
 80019c8:	e006      	b.n	80019d8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019ca:	4b18      	ldr	r3, [pc, #96]	@ (8001a2c <HAL_GPIO_Init+0x2c8>)
 80019cc:	68da      	ldr	r2, [r3, #12]
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	43db      	mvns	r3, r3
 80019d2:	4916      	ldr	r1, [pc, #88]	@ (8001a2c <HAL_GPIO_Init+0x2c8>)
 80019d4:	4013      	ands	r3, r2
 80019d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d025      	beq.n	8001a30 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019e4:	4b11      	ldr	r3, [pc, #68]	@ (8001a2c <HAL_GPIO_Init+0x2c8>)
 80019e6:	685a      	ldr	r2, [r3, #4]
 80019e8:	4910      	ldr	r1, [pc, #64]	@ (8001a2c <HAL_GPIO_Init+0x2c8>)
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	604b      	str	r3, [r1, #4]
 80019f0:	e025      	b.n	8001a3e <HAL_GPIO_Init+0x2da>
 80019f2:	bf00      	nop
 80019f4:	10320000 	.word	0x10320000
 80019f8:	10310000 	.word	0x10310000
 80019fc:	10220000 	.word	0x10220000
 8001a00:	10210000 	.word	0x10210000
 8001a04:	10120000 	.word	0x10120000
 8001a08:	10110000 	.word	0x10110000
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	40010000 	.word	0x40010000
 8001a14:	40010800 	.word	0x40010800
 8001a18:	40010c00 	.word	0x40010c00
 8001a1c:	40011000 	.word	0x40011000
 8001a20:	40011400 	.word	0x40011400
 8001a24:	40011800 	.word	0x40011800
 8001a28:	40011c00 	.word	0x40011c00
 8001a2c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a30:	4b15      	ldr	r3, [pc, #84]	@ (8001a88 <HAL_GPIO_Init+0x324>)
 8001a32:	685a      	ldr	r2, [r3, #4]
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	43db      	mvns	r3, r3
 8001a38:	4913      	ldr	r1, [pc, #76]	@ (8001a88 <HAL_GPIO_Init+0x324>)
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d006      	beq.n	8001a58 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a88 <HAL_GPIO_Init+0x324>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	490e      	ldr	r1, [pc, #56]	@ (8001a88 <HAL_GPIO_Init+0x324>)
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	600b      	str	r3, [r1, #0]
 8001a56:	e006      	b.n	8001a66 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a58:	4b0b      	ldr	r3, [pc, #44]	@ (8001a88 <HAL_GPIO_Init+0x324>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	4909      	ldr	r1, [pc, #36]	@ (8001a88 <HAL_GPIO_Init+0x324>)
 8001a62:	4013      	ands	r3, r2
 8001a64:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a68:	3301      	adds	r3, #1
 8001a6a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a72:	fa22 f303 	lsr.w	r3, r2, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f47f ae7e 	bne.w	8001778 <HAL_GPIO_Init+0x14>
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	bf00      	nop
 8001a80:	372c      	adds	r7, #44	@ 0x2c
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr
 8001a88:	40010400 	.word	0x40010400

08001a8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	460b      	mov	r3, r1
 8001a96:	807b      	strh	r3, [r7, #2]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a9c:	787b      	ldrb	r3, [r7, #1]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aa2:	887a      	ldrh	r2, [r7, #2]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001aa8:	e003      	b.n	8001ab2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001aaa:	887b      	ldrh	r3, [r7, #2]
 8001aac:	041a      	lsls	r2, r3, #16
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	611a      	str	r2, [r3, #16]
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr

08001abc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ace:	887a      	ldrh	r2, [r7, #2]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	041a      	lsls	r2, r3, #16
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	43d9      	mvns	r1, r3
 8001ada:	887b      	ldrh	r3, [r7, #2]
 8001adc:	400b      	ands	r3, r1
 8001ade:	431a      	orrs	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	611a      	str	r2, [r3, #16]
}
 8001ae4:	bf00      	nop
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr
	...

08001af0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e272      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f000 8087 	beq.w	8001c1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b10:	4b92      	ldr	r3, [pc, #584]	@ (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 030c 	and.w	r3, r3, #12
 8001b18:	2b04      	cmp	r3, #4
 8001b1a:	d00c      	beq.n	8001b36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b1c:	4b8f      	ldr	r3, [pc, #572]	@ (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 030c 	and.w	r3, r3, #12
 8001b24:	2b08      	cmp	r3, #8
 8001b26:	d112      	bne.n	8001b4e <HAL_RCC_OscConfig+0x5e>
 8001b28:	4b8c      	ldr	r3, [pc, #560]	@ (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b34:	d10b      	bne.n	8001b4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b36:	4b89      	ldr	r3, [pc, #548]	@ (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d06c      	beq.n	8001c1c <HAL_RCC_OscConfig+0x12c>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d168      	bne.n	8001c1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e24c      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b56:	d106      	bne.n	8001b66 <HAL_RCC_OscConfig+0x76>
 8001b58:	4b80      	ldr	r3, [pc, #512]	@ (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a7f      	ldr	r2, [pc, #508]	@ (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b62:	6013      	str	r3, [r2, #0]
 8001b64:	e02e      	b.n	8001bc4 <HAL_RCC_OscConfig+0xd4>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10c      	bne.n	8001b88 <HAL_RCC_OscConfig+0x98>
 8001b6e:	4b7b      	ldr	r3, [pc, #492]	@ (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a7a      	ldr	r2, [pc, #488]	@ (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	4b78      	ldr	r3, [pc, #480]	@ (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a77      	ldr	r2, [pc, #476]	@ (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b80:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	e01d      	b.n	8001bc4 <HAL_RCC_OscConfig+0xd4>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b90:	d10c      	bne.n	8001bac <HAL_RCC_OscConfig+0xbc>
 8001b92:	4b72      	ldr	r3, [pc, #456]	@ (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a71      	ldr	r2, [pc, #452]	@ (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b9c:	6013      	str	r3, [r2, #0]
 8001b9e:	4b6f      	ldr	r3, [pc, #444]	@ (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a6e      	ldr	r2, [pc, #440]	@ (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ba8:	6013      	str	r3, [r2, #0]
 8001baa:	e00b      	b.n	8001bc4 <HAL_RCC_OscConfig+0xd4>
 8001bac:	4b6b      	ldr	r3, [pc, #428]	@ (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a6a      	ldr	r2, [pc, #424]	@ (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001bb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bb6:	6013      	str	r3, [r2, #0]
 8001bb8:	4b68      	ldr	r3, [pc, #416]	@ (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a67      	ldr	r2, [pc, #412]	@ (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001bbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bc2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d013      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bcc:	f7ff fcbc 	bl	8001548 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bd4:	f7ff fcb8 	bl	8001548 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b64      	cmp	r3, #100	@ 0x64
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e200      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be6:	4b5d      	ldr	r3, [pc, #372]	@ (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d0f0      	beq.n	8001bd4 <HAL_RCC_OscConfig+0xe4>
 8001bf2:	e014      	b.n	8001c1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf4:	f7ff fca8 	bl	8001548 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bfc:	f7ff fca4 	bl	8001548 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b64      	cmp	r3, #100	@ 0x64
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e1ec      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c0e:	4b53      	ldr	r3, [pc, #332]	@ (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f0      	bne.n	8001bfc <HAL_RCC_OscConfig+0x10c>
 8001c1a:	e000      	b.n	8001c1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d063      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c2a:	4b4c      	ldr	r3, [pc, #304]	@ (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f003 030c 	and.w	r3, r3, #12
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d00b      	beq.n	8001c4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c36:	4b49      	ldr	r3, [pc, #292]	@ (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f003 030c 	and.w	r3, r3, #12
 8001c3e:	2b08      	cmp	r3, #8
 8001c40:	d11c      	bne.n	8001c7c <HAL_RCC_OscConfig+0x18c>
 8001c42:	4b46      	ldr	r3, [pc, #280]	@ (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d116      	bne.n	8001c7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c4e:	4b43      	ldr	r3, [pc, #268]	@ (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d005      	beq.n	8001c66 <HAL_RCC_OscConfig+0x176>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d001      	beq.n	8001c66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e1c0      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c66:	4b3d      	ldr	r3, [pc, #244]	@ (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	4939      	ldr	r1, [pc, #228]	@ (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c7a:	e03a      	b.n	8001cf2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d020      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c84:	4b36      	ldr	r3, [pc, #216]	@ (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001c86:	2201      	movs	r2, #1
 8001c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8a:	f7ff fc5d 	bl	8001548 <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c92:	f7ff fc59 	bl	8001548 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e1a1      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca4:	4b2d      	ldr	r3, [pc, #180]	@ (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d0f0      	beq.n	8001c92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb0:	4b2a      	ldr	r3, [pc, #168]	@ (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	4927      	ldr	r1, [pc, #156]	@ (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	600b      	str	r3, [r1, #0]
 8001cc4:	e015      	b.n	8001cf2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cc6:	4b26      	ldr	r3, [pc, #152]	@ (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ccc:	f7ff fc3c 	bl	8001548 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cd4:	f7ff fc38 	bl	8001548 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e180      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ce6:	4b1d      	ldr	r3, [pc, #116]	@ (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1f0      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0308 	and.w	r3, r3, #8
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d03a      	beq.n	8001d74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d019      	beq.n	8001d3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d06:	4b17      	ldr	r3, [pc, #92]	@ (8001d64 <HAL_RCC_OscConfig+0x274>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d0c:	f7ff fc1c 	bl	8001548 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d14:	f7ff fc18 	bl	8001548 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e160      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d26:	4b0d      	ldr	r3, [pc, #52]	@ (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0f0      	beq.n	8001d14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d32:	2001      	movs	r0, #1
 8001d34:	f000 fafe 	bl	8002334 <RCC_Delay>
 8001d38:	e01c      	b.n	8001d74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d64 <HAL_RCC_OscConfig+0x274>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d40:	f7ff fc02 	bl	8001548 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d46:	e00f      	b.n	8001d68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d48:	f7ff fbfe 	bl	8001548 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d908      	bls.n	8001d68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e146      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
 8001d5a:	bf00      	nop
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	42420000 	.word	0x42420000
 8001d64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d68:	4b92      	ldr	r3, [pc, #584]	@ (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1e9      	bne.n	8001d48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f000 80a6 	beq.w	8001ece <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d82:	2300      	movs	r3, #0
 8001d84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d86:	4b8b      	ldr	r3, [pc, #556]	@ (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10d      	bne.n	8001dae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d92:	4b88      	ldr	r3, [pc, #544]	@ (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	4a87      	ldr	r2, [pc, #540]	@ (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001d98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d9c:	61d3      	str	r3, [r2, #28]
 8001d9e:	4b85      	ldr	r3, [pc, #532]	@ (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001da6:	60bb      	str	r3, [r7, #8]
 8001da8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001daa:	2301      	movs	r3, #1
 8001dac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dae:	4b82      	ldr	r3, [pc, #520]	@ (8001fb8 <HAL_RCC_OscConfig+0x4c8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d118      	bne.n	8001dec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dba:	4b7f      	ldr	r3, [pc, #508]	@ (8001fb8 <HAL_RCC_OscConfig+0x4c8>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a7e      	ldr	r2, [pc, #504]	@ (8001fb8 <HAL_RCC_OscConfig+0x4c8>)
 8001dc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dc6:	f7ff fbbf 	bl	8001548 <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dce:	f7ff fbbb 	bl	8001548 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b64      	cmp	r3, #100	@ 0x64
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e103      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de0:	4b75      	ldr	r3, [pc, #468]	@ (8001fb8 <HAL_RCC_OscConfig+0x4c8>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d0f0      	beq.n	8001dce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d106      	bne.n	8001e02 <HAL_RCC_OscConfig+0x312>
 8001df4:	4b6f      	ldr	r3, [pc, #444]	@ (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	4a6e      	ldr	r2, [pc, #440]	@ (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001dfa:	f043 0301 	orr.w	r3, r3, #1
 8001dfe:	6213      	str	r3, [r2, #32]
 8001e00:	e02d      	b.n	8001e5e <HAL_RCC_OscConfig+0x36e>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d10c      	bne.n	8001e24 <HAL_RCC_OscConfig+0x334>
 8001e0a:	4b6a      	ldr	r3, [pc, #424]	@ (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	4a69      	ldr	r2, [pc, #420]	@ (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e10:	f023 0301 	bic.w	r3, r3, #1
 8001e14:	6213      	str	r3, [r2, #32]
 8001e16:	4b67      	ldr	r3, [pc, #412]	@ (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	4a66      	ldr	r2, [pc, #408]	@ (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e1c:	f023 0304 	bic.w	r3, r3, #4
 8001e20:	6213      	str	r3, [r2, #32]
 8001e22:	e01c      	b.n	8001e5e <HAL_RCC_OscConfig+0x36e>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	2b05      	cmp	r3, #5
 8001e2a:	d10c      	bne.n	8001e46 <HAL_RCC_OscConfig+0x356>
 8001e2c:	4b61      	ldr	r3, [pc, #388]	@ (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	4a60      	ldr	r2, [pc, #384]	@ (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e32:	f043 0304 	orr.w	r3, r3, #4
 8001e36:	6213      	str	r3, [r2, #32]
 8001e38:	4b5e      	ldr	r3, [pc, #376]	@ (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e3a:	6a1b      	ldr	r3, [r3, #32]
 8001e3c:	4a5d      	ldr	r2, [pc, #372]	@ (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e3e:	f043 0301 	orr.w	r3, r3, #1
 8001e42:	6213      	str	r3, [r2, #32]
 8001e44:	e00b      	b.n	8001e5e <HAL_RCC_OscConfig+0x36e>
 8001e46:	4b5b      	ldr	r3, [pc, #364]	@ (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e48:	6a1b      	ldr	r3, [r3, #32]
 8001e4a:	4a5a      	ldr	r2, [pc, #360]	@ (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e4c:	f023 0301 	bic.w	r3, r3, #1
 8001e50:	6213      	str	r3, [r2, #32]
 8001e52:	4b58      	ldr	r3, [pc, #352]	@ (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e54:	6a1b      	ldr	r3, [r3, #32]
 8001e56:	4a57      	ldr	r2, [pc, #348]	@ (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e58:	f023 0304 	bic.w	r3, r3, #4
 8001e5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d015      	beq.n	8001e92 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e66:	f7ff fb6f 	bl	8001548 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e6c:	e00a      	b.n	8001e84 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e6e:	f7ff fb6b 	bl	8001548 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e0b1      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e84:	4b4b      	ldr	r3, [pc, #300]	@ (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0ee      	beq.n	8001e6e <HAL_RCC_OscConfig+0x37e>
 8001e90:	e014      	b.n	8001ebc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e92:	f7ff fb59 	bl	8001548 <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e98:	e00a      	b.n	8001eb0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e9a:	f7ff fb55 	bl	8001548 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e09b      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eb0:	4b40      	ldr	r3, [pc, #256]	@ (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1ee      	bne.n	8001e9a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ebc:	7dfb      	ldrb	r3, [r7, #23]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d105      	bne.n	8001ece <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ec2:	4b3c      	ldr	r3, [pc, #240]	@ (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	4a3b      	ldr	r2, [pc, #236]	@ (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001ec8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ecc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f000 8087 	beq.w	8001fe6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ed8:	4b36      	ldr	r3, [pc, #216]	@ (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 030c 	and.w	r3, r3, #12
 8001ee0:	2b08      	cmp	r3, #8
 8001ee2:	d061      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d146      	bne.n	8001f7a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eec:	4b33      	ldr	r3, [pc, #204]	@ (8001fbc <HAL_RCC_OscConfig+0x4cc>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef2:	f7ff fb29 	bl	8001548 <HAL_GetTick>
 8001ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ef8:	e008      	b.n	8001f0c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001efa:	f7ff fb25 	bl	8001548 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e06d      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f0c:	4b29      	ldr	r3, [pc, #164]	@ (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1f0      	bne.n	8001efa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
 8001f1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f20:	d108      	bne.n	8001f34 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f22:	4b24      	ldr	r3, [pc, #144]	@ (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	4921      	ldr	r1, [pc, #132]	@ (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f34:	4b1f      	ldr	r3, [pc, #124]	@ (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a19      	ldr	r1, [r3, #32]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f44:	430b      	orrs	r3, r1
 8001f46:	491b      	ldr	r1, [pc, #108]	@ (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fbc <HAL_RCC_OscConfig+0x4cc>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f52:	f7ff faf9 	bl	8001548 <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f5a:	f7ff faf5 	bl	8001548 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e03d      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f6c:	4b11      	ldr	r3, [pc, #68]	@ (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0f0      	beq.n	8001f5a <HAL_RCC_OscConfig+0x46a>
 8001f78:	e035      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f7a:	4b10      	ldr	r3, [pc, #64]	@ (8001fbc <HAL_RCC_OscConfig+0x4cc>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f80:	f7ff fae2 	bl	8001548 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f88:	f7ff fade 	bl	8001548 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e026      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f9a:	4b06      	ldr	r3, [pc, #24]	@ (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f0      	bne.n	8001f88 <HAL_RCC_OscConfig+0x498>
 8001fa6:	e01e      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d107      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e019      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	40007000 	.word	0x40007000
 8001fbc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff0 <HAL_RCC_OscConfig+0x500>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d106      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d001      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e000      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3718      	adds	r7, #24
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40021000 	.word	0x40021000

08001ff4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e0d0      	b.n	80021aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002008:	4b6a      	ldr	r3, [pc, #424]	@ (80021b4 <HAL_RCC_ClockConfig+0x1c0>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0307 	and.w	r3, r3, #7
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	429a      	cmp	r2, r3
 8002014:	d910      	bls.n	8002038 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002016:	4b67      	ldr	r3, [pc, #412]	@ (80021b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f023 0207 	bic.w	r2, r3, #7
 800201e:	4965      	ldr	r1, [pc, #404]	@ (80021b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	4313      	orrs	r3, r2
 8002024:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002026:	4b63      	ldr	r3, [pc, #396]	@ (80021b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	429a      	cmp	r2, r3
 8002032:	d001      	beq.n	8002038 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e0b8      	b.n	80021aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d020      	beq.n	8002086 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	2b00      	cmp	r3, #0
 800204e:	d005      	beq.n	800205c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002050:	4b59      	ldr	r3, [pc, #356]	@ (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	4a58      	ldr	r2, [pc, #352]	@ (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002056:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800205a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0308 	and.w	r3, r3, #8
 8002064:	2b00      	cmp	r3, #0
 8002066:	d005      	beq.n	8002074 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002068:	4b53      	ldr	r3, [pc, #332]	@ (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	4a52      	ldr	r2, [pc, #328]	@ (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 800206e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002072:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002074:	4b50      	ldr	r3, [pc, #320]	@ (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	494d      	ldr	r1, [pc, #308]	@ (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002082:	4313      	orrs	r3, r2
 8002084:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b00      	cmp	r3, #0
 8002090:	d040      	beq.n	8002114 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d107      	bne.n	80020aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800209a:	4b47      	ldr	r3, [pc, #284]	@ (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d115      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e07f      	b.n	80021aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d107      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020b2:	4b41      	ldr	r3, [pc, #260]	@ (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d109      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e073      	b.n	80021aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c2:	4b3d      	ldr	r3, [pc, #244]	@ (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e06b      	b.n	80021aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020d2:	4b39      	ldr	r3, [pc, #228]	@ (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f023 0203 	bic.w	r2, r3, #3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	4936      	ldr	r1, [pc, #216]	@ (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020e4:	f7ff fa30 	bl	8001548 <HAL_GetTick>
 80020e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ea:	e00a      	b.n	8002102 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ec:	f7ff fa2c 	bl	8001548 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e053      	b.n	80021aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002102:	4b2d      	ldr	r3, [pc, #180]	@ (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f003 020c 	and.w	r2, r3, #12
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	429a      	cmp	r2, r3
 8002112:	d1eb      	bne.n	80020ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002114:	4b27      	ldr	r3, [pc, #156]	@ (80021b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	429a      	cmp	r2, r3
 8002120:	d210      	bcs.n	8002144 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002122:	4b24      	ldr	r3, [pc, #144]	@ (80021b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f023 0207 	bic.w	r2, r3, #7
 800212a:	4922      	ldr	r1, [pc, #136]	@ (80021b4 <HAL_RCC_ClockConfig+0x1c0>)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	4313      	orrs	r3, r2
 8002130:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002132:	4b20      	ldr	r3, [pc, #128]	@ (80021b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	429a      	cmp	r2, r3
 800213e:	d001      	beq.n	8002144 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e032      	b.n	80021aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	2b00      	cmp	r3, #0
 800214e:	d008      	beq.n	8002162 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002150:	4b19      	ldr	r3, [pc, #100]	@ (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	4916      	ldr	r1, [pc, #88]	@ (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 800215e:	4313      	orrs	r3, r2
 8002160:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	2b00      	cmp	r3, #0
 800216c:	d009      	beq.n	8002182 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800216e:	4b12      	ldr	r3, [pc, #72]	@ (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	490e      	ldr	r1, [pc, #56]	@ (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 800217e:	4313      	orrs	r3, r2
 8002180:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002182:	f000 f821 	bl	80021c8 <HAL_RCC_GetSysClockFreq>
 8002186:	4602      	mov	r2, r0
 8002188:	4b0b      	ldr	r3, [pc, #44]	@ (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	091b      	lsrs	r3, r3, #4
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	490a      	ldr	r1, [pc, #40]	@ (80021bc <HAL_RCC_ClockConfig+0x1c8>)
 8002194:	5ccb      	ldrb	r3, [r1, r3]
 8002196:	fa22 f303 	lsr.w	r3, r2, r3
 800219a:	4a09      	ldr	r2, [pc, #36]	@ (80021c0 <HAL_RCC_ClockConfig+0x1cc>)
 800219c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800219e:	4b09      	ldr	r3, [pc, #36]	@ (80021c4 <HAL_RCC_ClockConfig+0x1d0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff f8e6 	bl	8001374 <HAL_InitTick>

  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40022000 	.word	0x40022000
 80021b8:	40021000 	.word	0x40021000
 80021bc:	08005528 	.word	0x08005528
 80021c0:	20000008 	.word	0x20000008
 80021c4:	2000000c 	.word	0x2000000c

080021c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b087      	sub	sp, #28
 80021cc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	60fb      	str	r3, [r7, #12]
 80021d2:	2300      	movs	r3, #0
 80021d4:	60bb      	str	r3, [r7, #8]
 80021d6:	2300      	movs	r3, #0
 80021d8:	617b      	str	r3, [r7, #20]
 80021da:	2300      	movs	r3, #0
 80021dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021de:	2300      	movs	r3, #0
 80021e0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021e2:	4b1e      	ldr	r3, [pc, #120]	@ (800225c <HAL_RCC_GetSysClockFreq+0x94>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f003 030c 	and.w	r3, r3, #12
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	d002      	beq.n	80021f8 <HAL_RCC_GetSysClockFreq+0x30>
 80021f2:	2b08      	cmp	r3, #8
 80021f4:	d003      	beq.n	80021fe <HAL_RCC_GetSysClockFreq+0x36>
 80021f6:	e027      	b.n	8002248 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021f8:	4b19      	ldr	r3, [pc, #100]	@ (8002260 <HAL_RCC_GetSysClockFreq+0x98>)
 80021fa:	613b      	str	r3, [r7, #16]
      break;
 80021fc:	e027      	b.n	800224e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	0c9b      	lsrs	r3, r3, #18
 8002202:	f003 030f 	and.w	r3, r3, #15
 8002206:	4a17      	ldr	r2, [pc, #92]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002208:	5cd3      	ldrb	r3, [r2, r3]
 800220a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d010      	beq.n	8002238 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002216:	4b11      	ldr	r3, [pc, #68]	@ (800225c <HAL_RCC_GetSysClockFreq+0x94>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	0c5b      	lsrs	r3, r3, #17
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	4a11      	ldr	r2, [pc, #68]	@ (8002268 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002222:	5cd3      	ldrb	r3, [r2, r3]
 8002224:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a0d      	ldr	r2, [pc, #52]	@ (8002260 <HAL_RCC_GetSysClockFreq+0x98>)
 800222a:	fb03 f202 	mul.w	r2, r3, r2
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	fbb2 f3f3 	udiv	r3, r2, r3
 8002234:	617b      	str	r3, [r7, #20]
 8002236:	e004      	b.n	8002242 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a0c      	ldr	r2, [pc, #48]	@ (800226c <HAL_RCC_GetSysClockFreq+0xa4>)
 800223c:	fb02 f303 	mul.w	r3, r2, r3
 8002240:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	613b      	str	r3, [r7, #16]
      break;
 8002246:	e002      	b.n	800224e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002248:	4b05      	ldr	r3, [pc, #20]	@ (8002260 <HAL_RCC_GetSysClockFreq+0x98>)
 800224a:	613b      	str	r3, [r7, #16]
      break;
 800224c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800224e:	693b      	ldr	r3, [r7, #16]
}
 8002250:	4618      	mov	r0, r3
 8002252:	371c      	adds	r7, #28
 8002254:	46bd      	mov	sp, r7
 8002256:	bc80      	pop	{r7}
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	40021000 	.word	0x40021000
 8002260:	007a1200 	.word	0x007a1200
 8002264:	08005540 	.word	0x08005540
 8002268:	08005550 	.word	0x08005550
 800226c:	003d0900 	.word	0x003d0900

08002270 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002274:	4b02      	ldr	r3, [pc, #8]	@ (8002280 <HAL_RCC_GetHCLKFreq+0x10>)
 8002276:	681b      	ldr	r3, [r3, #0]
}
 8002278:	4618      	mov	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr
 8002280:	20000008 	.word	0x20000008

08002284 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002288:	f7ff fff2 	bl	8002270 <HAL_RCC_GetHCLKFreq>
 800228c:	4602      	mov	r2, r0
 800228e:	4b05      	ldr	r3, [pc, #20]	@ (80022a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	0a1b      	lsrs	r3, r3, #8
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	4903      	ldr	r1, [pc, #12]	@ (80022a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800229a:	5ccb      	ldrb	r3, [r1, r3]
 800229c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40021000 	.word	0x40021000
 80022a8:	08005538 	.word	0x08005538

080022ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022b0:	f7ff ffde 	bl	8002270 <HAL_RCC_GetHCLKFreq>
 80022b4:	4602      	mov	r2, r0
 80022b6:	4b05      	ldr	r3, [pc, #20]	@ (80022cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	0adb      	lsrs	r3, r3, #11
 80022bc:	f003 0307 	and.w	r3, r3, #7
 80022c0:	4903      	ldr	r1, [pc, #12]	@ (80022d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022c2:	5ccb      	ldrb	r3, [r1, r3]
 80022c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40021000 	.word	0x40021000
 80022d0:	08005538 	.word	0x08005538

080022d4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	220f      	movs	r2, #15
 80022e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80022e4:	4b11      	ldr	r3, [pc, #68]	@ (800232c <HAL_RCC_GetClockConfig+0x58>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 0203 	and.w	r2, r3, #3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80022f0:	4b0e      	ldr	r3, [pc, #56]	@ (800232c <HAL_RCC_GetClockConfig+0x58>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80022fc:	4b0b      	ldr	r3, [pc, #44]	@ (800232c <HAL_RCC_GetClockConfig+0x58>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002308:	4b08      	ldr	r3, [pc, #32]	@ (800232c <HAL_RCC_GetClockConfig+0x58>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	08db      	lsrs	r3, r3, #3
 800230e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002316:	4b06      	ldr	r3, [pc, #24]	@ (8002330 <HAL_RCC_GetClockConfig+0x5c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0207 	and.w	r2, r3, #7
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002322:	bf00      	nop
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	bc80      	pop	{r7}
 800232a:	4770      	bx	lr
 800232c:	40021000 	.word	0x40021000
 8002330:	40022000 	.word	0x40022000

08002334 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800233c:	4b0a      	ldr	r3, [pc, #40]	@ (8002368 <RCC_Delay+0x34>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a0a      	ldr	r2, [pc, #40]	@ (800236c <RCC_Delay+0x38>)
 8002342:	fba2 2303 	umull	r2, r3, r2, r3
 8002346:	0a5b      	lsrs	r3, r3, #9
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	fb02 f303 	mul.w	r3, r2, r3
 800234e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002350:	bf00      	nop
  }
  while (Delay --);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	1e5a      	subs	r2, r3, #1
 8002356:	60fa      	str	r2, [r7, #12]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1f9      	bne.n	8002350 <RCC_Delay+0x1c>
}
 800235c:	bf00      	nop
 800235e:	bf00      	nop
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr
 8002368:	20000008 	.word	0x20000008
 800236c:	10624dd3 	.word	0x10624dd3

08002370 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e076      	b.n	8002470 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002386:	2b00      	cmp	r3, #0
 8002388:	d108      	bne.n	800239c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002392:	d009      	beq.n	80023a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	61da      	str	r2, [r3, #28]
 800239a:	e005      	b.n	80023a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d106      	bne.n	80023c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7fe fe6a 	bl	800109c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2202      	movs	r2, #2
 80023cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80023de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80023f0:	431a      	orrs	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	431a      	orrs	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002418:	431a      	orrs	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800242c:	ea42 0103 	orr.w	r1, r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002434:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	430a      	orrs	r2, r1
 800243e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	0c1a      	lsrs	r2, r3, #16
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f002 0204 	and.w	r2, r2, #4
 800244e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	69da      	ldr	r2, [r3, #28]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800245e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2201      	movs	r2, #1
 800246a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b088      	sub	sp, #32
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	603b      	str	r3, [r7, #0]
 8002484:	4613      	mov	r3, r2
 8002486:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002488:	2300      	movs	r3, #0
 800248a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002492:	2b01      	cmp	r3, #1
 8002494:	d101      	bne.n	800249a <HAL_SPI_Transmit+0x22>
 8002496:	2302      	movs	r3, #2
 8002498:	e12d      	b.n	80026f6 <HAL_SPI_Transmit+0x27e>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024a2:	f7ff f851 	bl	8001548 <HAL_GetTick>
 80024a6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80024a8:	88fb      	ldrh	r3, [r7, #6]
 80024aa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d002      	beq.n	80024be <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80024b8:	2302      	movs	r3, #2
 80024ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80024bc:	e116      	b.n	80026ec <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d002      	beq.n	80024ca <HAL_SPI_Transmit+0x52>
 80024c4:	88fb      	ldrh	r3, [r7, #6]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d102      	bne.n	80024d0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80024ce:	e10d      	b.n	80026ec <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2203      	movs	r2, #3
 80024d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	68ba      	ldr	r2, [r7, #8]
 80024e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	88fa      	ldrh	r2, [r7, #6]
 80024e8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	88fa      	ldrh	r2, [r7, #6]
 80024ee:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2200      	movs	r2, #0
 800250c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002516:	d10f      	bne.n	8002538 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002526:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002536:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002542:	2b40      	cmp	r3, #64	@ 0x40
 8002544:	d007      	beq.n	8002556 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002554:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800255e:	d14f      	bne.n	8002600 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d002      	beq.n	800256e <HAL_SPI_Transmit+0xf6>
 8002568:	8afb      	ldrh	r3, [r7, #22]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d142      	bne.n	80025f4 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002572:	881a      	ldrh	r2, [r3, #0]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257e:	1c9a      	adds	r2, r3, #2
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002588:	b29b      	uxth	r3, r3
 800258a:	3b01      	subs	r3, #1
 800258c:	b29a      	uxth	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002592:	e02f      	b.n	80025f4 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d112      	bne.n	80025c8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a6:	881a      	ldrh	r2, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b2:	1c9a      	adds	r2, r3, #2
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025bc:	b29b      	uxth	r3, r3
 80025be:	3b01      	subs	r3, #1
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80025c6:	e015      	b.n	80025f4 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025c8:	f7fe ffbe 	bl	8001548 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d803      	bhi.n	80025e0 <HAL_SPI_Transmit+0x168>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025de:	d102      	bne.n	80025e6 <HAL_SPI_Transmit+0x16e>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d106      	bne.n	80025f4 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80025f2:	e07b      	b.n	80026ec <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1ca      	bne.n	8002594 <HAL_SPI_Transmit+0x11c>
 80025fe:	e050      	b.n	80026a2 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d002      	beq.n	800260e <HAL_SPI_Transmit+0x196>
 8002608:	8afb      	ldrh	r3, [r7, #22]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d144      	bne.n	8002698 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	330c      	adds	r3, #12
 8002618:	7812      	ldrb	r2, [r2, #0]
 800261a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002620:	1c5a      	adds	r2, r3, #1
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800262a:	b29b      	uxth	r3, r3
 800262c:	3b01      	subs	r3, #1
 800262e:	b29a      	uxth	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002634:	e030      	b.n	8002698 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b02      	cmp	r3, #2
 8002642:	d113      	bne.n	800266c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	330c      	adds	r3, #12
 800264e:	7812      	ldrb	r2, [r2, #0]
 8002650:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002656:	1c5a      	adds	r2, r3, #1
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002660:	b29b      	uxth	r3, r3
 8002662:	3b01      	subs	r3, #1
 8002664:	b29a      	uxth	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	86da      	strh	r2, [r3, #54]	@ 0x36
 800266a:	e015      	b.n	8002698 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800266c:	f7fe ff6c 	bl	8001548 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	429a      	cmp	r2, r3
 800267a:	d803      	bhi.n	8002684 <HAL_SPI_Transmit+0x20c>
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002682:	d102      	bne.n	800268a <HAL_SPI_Transmit+0x212>
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d106      	bne.n	8002698 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002696:	e029      	b.n	80026ec <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800269c:	b29b      	uxth	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1c9      	bne.n	8002636 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	6839      	ldr	r1, [r7, #0]
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f000 f8b2 	bl	8002810 <SPI_EndRxTxTransaction>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d002      	beq.n	80026b8 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2220      	movs	r2, #32
 80026b6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d10a      	bne.n	80026d6 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026c0:	2300      	movs	r3, #0
 80026c2:	613b      	str	r3, [r7, #16]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	613b      	str	r3, [r7, #16]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	613b      	str	r3, [r7, #16]
 80026d4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d002      	beq.n	80026e4 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	77fb      	strb	r3, [r7, #31]
 80026e2:	e003      	b.n	80026ec <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80026f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3720      	adds	r7, #32
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
	...

08002700 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b088      	sub	sp, #32
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	603b      	str	r3, [r7, #0]
 800270c:	4613      	mov	r3, r2
 800270e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002710:	f7fe ff1a 	bl	8001548 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002718:	1a9b      	subs	r3, r3, r2
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	4413      	add	r3, r2
 800271e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002720:	f7fe ff12 	bl	8001548 <HAL_GetTick>
 8002724:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002726:	4b39      	ldr	r3, [pc, #228]	@ (800280c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	015b      	lsls	r3, r3, #5
 800272c:	0d1b      	lsrs	r3, r3, #20
 800272e:	69fa      	ldr	r2, [r7, #28]
 8002730:	fb02 f303 	mul.w	r3, r2, r3
 8002734:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002736:	e054      	b.n	80027e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800273e:	d050      	beq.n	80027e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002740:	f7fe ff02 	bl	8001548 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	69fa      	ldr	r2, [r7, #28]
 800274c:	429a      	cmp	r2, r3
 800274e:	d902      	bls.n	8002756 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d13d      	bne.n	80027d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002764:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800276e:	d111      	bne.n	8002794 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002778:	d004      	beq.n	8002784 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002782:	d107      	bne.n	8002794 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002792:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002798:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800279c:	d10f      	bne.n	80027be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80027bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e017      	b.n	8002802 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80027d8:	2300      	movs	r3, #0
 80027da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	3b01      	subs	r3, #1
 80027e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	4013      	ands	r3, r2
 80027ec:	68ba      	ldr	r2, [r7, #8]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	bf0c      	ite	eq
 80027f2:	2301      	moveq	r3, #1
 80027f4:	2300      	movne	r3, #0
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	461a      	mov	r2, r3
 80027fa:	79fb      	ldrb	r3, [r7, #7]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d19b      	bne.n	8002738 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3720      	adds	r7, #32
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	20000008 	.word	0x20000008

08002810 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af02      	add	r7, sp, #8
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	9300      	str	r3, [sp, #0]
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	2200      	movs	r2, #0
 8002824:	2180      	movs	r1, #128	@ 0x80
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f7ff ff6a 	bl	8002700 <SPI_WaitFlagStateUntilTimeout>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d007      	beq.n	8002842 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002836:	f043 0220 	orr.w	r2, r3, #32
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e000      	b.n	8002844 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e041      	b.n	80028e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d106      	bne.n	8002878 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7fe fcaa 	bl	80011cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2202      	movs	r2, #2
 800287c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3304      	adds	r3, #4
 8002888:	4619      	mov	r1, r3
 800288a:	4610      	mov	r0, r2
 800288c:	f000 facc 	bl	8002e28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
	...

080028ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d001      	beq.n	8002904 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e044      	b.n	800298e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2202      	movs	r2, #2
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f042 0201 	orr.w	r2, r2, #1
 800291a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a1d      	ldr	r2, [pc, #116]	@ (8002998 <HAL_TIM_Base_Start_IT+0xac>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d018      	beq.n	8002958 <HAL_TIM_Base_Start_IT+0x6c>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a1c      	ldr	r2, [pc, #112]	@ (800299c <HAL_TIM_Base_Start_IT+0xb0>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d013      	beq.n	8002958 <HAL_TIM_Base_Start_IT+0x6c>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002938:	d00e      	beq.n	8002958 <HAL_TIM_Base_Start_IT+0x6c>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a18      	ldr	r2, [pc, #96]	@ (80029a0 <HAL_TIM_Base_Start_IT+0xb4>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d009      	beq.n	8002958 <HAL_TIM_Base_Start_IT+0x6c>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a16      	ldr	r2, [pc, #88]	@ (80029a4 <HAL_TIM_Base_Start_IT+0xb8>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d004      	beq.n	8002958 <HAL_TIM_Base_Start_IT+0x6c>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a15      	ldr	r2, [pc, #84]	@ (80029a8 <HAL_TIM_Base_Start_IT+0xbc>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d111      	bne.n	800297c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2b06      	cmp	r3, #6
 8002968:	d010      	beq.n	800298c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f042 0201 	orr.w	r2, r2, #1
 8002978:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800297a:	e007      	b.n	800298c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0201 	orr.w	r2, r2, #1
 800298a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr
 8002998:	40012c00 	.word	0x40012c00
 800299c:	40013400 	.word	0x40013400
 80029a0:	40000400 	.word	0x40000400
 80029a4:	40000800 	.word	0x40000800
 80029a8:	40000c00 	.word	0x40000c00

080029ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e041      	b.n	8002a42 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d106      	bne.n	80029d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f7fe fbdc 	bl	8001190 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2202      	movs	r2, #2
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3304      	adds	r3, #4
 80029e8:	4619      	mov	r1, r3
 80029ea:	4610      	mov	r0, r2
 80029ec:	f000 fa1c 	bl	8002e28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b082      	sub	sp, #8
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d122      	bne.n	8002aa6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d11b      	bne.n	8002aa6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f06f 0202 	mvn.w	r2, #2
 8002a76:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	f003 0303 	and.w	r3, r3, #3
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d003      	beq.n	8002a94 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 f9b0 	bl	8002df2 <HAL_TIM_IC_CaptureCallback>
 8002a92:	e005      	b.n	8002aa0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 f9a3 	bl	8002de0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f9b2 	bl	8002e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	2b04      	cmp	r3, #4
 8002ab2:	d122      	bne.n	8002afa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	f003 0304 	and.w	r3, r3, #4
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	d11b      	bne.n	8002afa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f06f 0204 	mvn.w	r2, #4
 8002aca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2202      	movs	r2, #2
 8002ad0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d003      	beq.n	8002ae8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 f986 	bl	8002df2 <HAL_TIM_IC_CaptureCallback>
 8002ae6:	e005      	b.n	8002af4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 f979 	bl	8002de0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f988 	bl	8002e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	f003 0308 	and.w	r3, r3, #8
 8002b04:	2b08      	cmp	r3, #8
 8002b06:	d122      	bne.n	8002b4e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	2b08      	cmp	r3, #8
 8002b14:	d11b      	bne.n	8002b4e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f06f 0208 	mvn.w	r2, #8
 8002b1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2204      	movs	r2, #4
 8002b24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	69db      	ldr	r3, [r3, #28]
 8002b2c:	f003 0303 	and.w	r3, r3, #3
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d003      	beq.n	8002b3c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 f95c 	bl	8002df2 <HAL_TIM_IC_CaptureCallback>
 8002b3a:	e005      	b.n	8002b48 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 f94f 	bl	8002de0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f95e 	bl	8002e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	f003 0310 	and.w	r3, r3, #16
 8002b58:	2b10      	cmp	r3, #16
 8002b5a:	d122      	bne.n	8002ba2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	f003 0310 	and.w	r3, r3, #16
 8002b66:	2b10      	cmp	r3, #16
 8002b68:	d11b      	bne.n	8002ba2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f06f 0210 	mvn.w	r2, #16
 8002b72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2208      	movs	r2, #8
 8002b78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	69db      	ldr	r3, [r3, #28]
 8002b80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d003      	beq.n	8002b90 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 f932 	bl	8002df2 <HAL_TIM_IC_CaptureCallback>
 8002b8e:	e005      	b.n	8002b9c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 f925 	bl	8002de0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f934 	bl	8002e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d10e      	bne.n	8002bce <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d107      	bne.n	8002bce <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f06f 0201 	mvn.w	r2, #1
 8002bc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f7fd ffcb 	bl	8000b64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bd8:	2b80      	cmp	r3, #128	@ 0x80
 8002bda:	d10e      	bne.n	8002bfa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002be6:	2b80      	cmp	r3, #128	@ 0x80
 8002be8:	d107      	bne.n	8002bfa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002bf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 fbb2 	bl	800335e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c04:	2b40      	cmp	r3, #64	@ 0x40
 8002c06:	d10e      	bne.n	8002c26 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c12:	2b40      	cmp	r3, #64	@ 0x40
 8002c14:	d107      	bne.n	8002c26 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002c1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 f8f8 	bl	8002e16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	f003 0320 	and.w	r3, r3, #32
 8002c30:	2b20      	cmp	r3, #32
 8002c32:	d10e      	bne.n	8002c52 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	f003 0320 	and.w	r3, r3, #32
 8002c3e:	2b20      	cmp	r3, #32
 8002c40:	d107      	bne.n	8002c52 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f06f 0220 	mvn.w	r2, #32
 8002c4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 fb7d 	bl	800334c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c52:	bf00      	nop
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
	...

08002c5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d101      	bne.n	8002c7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002c76:	2302      	movs	r3, #2
 8002c78:	e0ae      	b.n	8002dd8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2b0c      	cmp	r3, #12
 8002c86:	f200 809f 	bhi.w	8002dc8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002c8a:	a201      	add	r2, pc, #4	@ (adr r2, 8002c90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c90:	08002cc5 	.word	0x08002cc5
 8002c94:	08002dc9 	.word	0x08002dc9
 8002c98:	08002dc9 	.word	0x08002dc9
 8002c9c:	08002dc9 	.word	0x08002dc9
 8002ca0:	08002d05 	.word	0x08002d05
 8002ca4:	08002dc9 	.word	0x08002dc9
 8002ca8:	08002dc9 	.word	0x08002dc9
 8002cac:	08002dc9 	.word	0x08002dc9
 8002cb0:	08002d47 	.word	0x08002d47
 8002cb4:	08002dc9 	.word	0x08002dc9
 8002cb8:	08002dc9 	.word	0x08002dc9
 8002cbc:	08002dc9 	.word	0x08002dc9
 8002cc0:	08002d87 	.word	0x08002d87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68b9      	ldr	r1, [r7, #8]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 f926 	bl	8002f1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	699a      	ldr	r2, [r3, #24]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 0208 	orr.w	r2, r2, #8
 8002cde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	699a      	ldr	r2, [r3, #24]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 0204 	bic.w	r2, r2, #4
 8002cee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6999      	ldr	r1, [r3, #24]
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	691a      	ldr	r2, [r3, #16]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	619a      	str	r2, [r3, #24]
      break;
 8002d02:	e064      	b.n	8002dce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68b9      	ldr	r1, [r7, #8]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 f976 	bl	8002ffc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	699a      	ldr	r2, [r3, #24]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	699a      	ldr	r2, [r3, #24]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6999      	ldr	r1, [r3, #24]
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	021a      	lsls	r2, r3, #8
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	430a      	orrs	r2, r1
 8002d42:	619a      	str	r2, [r3, #24]
      break;
 8002d44:	e043      	b.n	8002dce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68b9      	ldr	r1, [r7, #8]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f000 f9c9 	bl	80030e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	69da      	ldr	r2, [r3, #28]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f042 0208 	orr.w	r2, r2, #8
 8002d60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	69da      	ldr	r2, [r3, #28]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0204 	bic.w	r2, r2, #4
 8002d70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	69d9      	ldr	r1, [r3, #28]
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	691a      	ldr	r2, [r3, #16]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	430a      	orrs	r2, r1
 8002d82:	61da      	str	r2, [r3, #28]
      break;
 8002d84:	e023      	b.n	8002dce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68b9      	ldr	r1, [r7, #8]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f000 fa1d 	bl	80031cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	69da      	ldr	r2, [r3, #28]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002da0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	69da      	ldr	r2, [r3, #28]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002db0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	69d9      	ldr	r1, [r3, #28]
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	021a      	lsls	r2, r3, #8
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	61da      	str	r2, [r3, #28]
      break;
 8002dc6:	e002      	b.n	8002dce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	75fb      	strb	r3, [r7, #23]
      break;
 8002dcc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3718      	adds	r7, #24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bc80      	pop	{r7}
 8002df0:	4770      	bx	lr

08002df2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bc80      	pop	{r7}
 8002e02:	4770      	bx	lr

08002e04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bc80      	pop	{r7}
 8002e14:	4770      	bx	lr

08002e16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b083      	sub	sp, #12
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bc80      	pop	{r7}
 8002e26:	4770      	bx	lr

08002e28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a33      	ldr	r2, [pc, #204]	@ (8002f08 <TIM_Base_SetConfig+0xe0>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d013      	beq.n	8002e68 <TIM_Base_SetConfig+0x40>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a32      	ldr	r2, [pc, #200]	@ (8002f0c <TIM_Base_SetConfig+0xe4>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d00f      	beq.n	8002e68 <TIM_Base_SetConfig+0x40>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e4e:	d00b      	beq.n	8002e68 <TIM_Base_SetConfig+0x40>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a2f      	ldr	r2, [pc, #188]	@ (8002f10 <TIM_Base_SetConfig+0xe8>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d007      	beq.n	8002e68 <TIM_Base_SetConfig+0x40>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a2e      	ldr	r2, [pc, #184]	@ (8002f14 <TIM_Base_SetConfig+0xec>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d003      	beq.n	8002e68 <TIM_Base_SetConfig+0x40>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a2d      	ldr	r2, [pc, #180]	@ (8002f18 <TIM_Base_SetConfig+0xf0>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d108      	bne.n	8002e7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a22      	ldr	r2, [pc, #136]	@ (8002f08 <TIM_Base_SetConfig+0xe0>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d013      	beq.n	8002eaa <TIM_Base_SetConfig+0x82>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a21      	ldr	r2, [pc, #132]	@ (8002f0c <TIM_Base_SetConfig+0xe4>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d00f      	beq.n	8002eaa <TIM_Base_SetConfig+0x82>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e90:	d00b      	beq.n	8002eaa <TIM_Base_SetConfig+0x82>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a1e      	ldr	r2, [pc, #120]	@ (8002f10 <TIM_Base_SetConfig+0xe8>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d007      	beq.n	8002eaa <TIM_Base_SetConfig+0x82>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a1d      	ldr	r2, [pc, #116]	@ (8002f14 <TIM_Base_SetConfig+0xec>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d003      	beq.n	8002eaa <TIM_Base_SetConfig+0x82>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a1c      	ldr	r2, [pc, #112]	@ (8002f18 <TIM_Base_SetConfig+0xf0>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d108      	bne.n	8002ebc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002eb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a09      	ldr	r2, [pc, #36]	@ (8002f08 <TIM_Base_SetConfig+0xe0>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d003      	beq.n	8002ef0 <TIM_Base_SetConfig+0xc8>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a08      	ldr	r2, [pc, #32]	@ (8002f0c <TIM_Base_SetConfig+0xe4>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d103      	bne.n	8002ef8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	691a      	ldr	r2, [r3, #16]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	615a      	str	r2, [r3, #20]
}
 8002efe:	bf00      	nop
 8002f00:	3714      	adds	r7, #20
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bc80      	pop	{r7}
 8002f06:	4770      	bx	lr
 8002f08:	40012c00 	.word	0x40012c00
 8002f0c:	40013400 	.word	0x40013400
 8002f10:	40000400 	.word	0x40000400
 8002f14:	40000800 	.word	0x40000800
 8002f18:	40000c00 	.word	0x40000c00

08002f1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b087      	sub	sp, #28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	f023 0201 	bic.w	r2, r3, #1
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f023 0303 	bic.w	r3, r3, #3
 8002f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	f023 0302 	bic.w	r3, r3, #2
 8002f64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a20      	ldr	r2, [pc, #128]	@ (8002ff4 <TIM_OC1_SetConfig+0xd8>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d003      	beq.n	8002f80 <TIM_OC1_SetConfig+0x64>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a1f      	ldr	r2, [pc, #124]	@ (8002ff8 <TIM_OC1_SetConfig+0xdc>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d10c      	bne.n	8002f9a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f023 0308 	bic.w	r3, r3, #8
 8002f86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	f023 0304 	bic.w	r3, r3, #4
 8002f98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a15      	ldr	r2, [pc, #84]	@ (8002ff4 <TIM_OC1_SetConfig+0xd8>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d003      	beq.n	8002faa <TIM_OC1_SetConfig+0x8e>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a14      	ldr	r2, [pc, #80]	@ (8002ff8 <TIM_OC1_SetConfig+0xdc>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d111      	bne.n	8002fce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002fb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685a      	ldr	r2, [r3, #4]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	621a      	str	r2, [r3, #32]
}
 8002fe8:	bf00      	nop
 8002fea:	371c      	adds	r7, #28
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bc80      	pop	{r7}
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	40012c00 	.word	0x40012c00
 8002ff8:	40013400 	.word	0x40013400

08002ffc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b087      	sub	sp, #28
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	f023 0210 	bic.w	r2, r3, #16
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800302a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003032:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	021b      	lsls	r3, r3, #8
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	4313      	orrs	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	f023 0320 	bic.w	r3, r3, #32
 8003046:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	011b      	lsls	r3, r3, #4
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	4313      	orrs	r3, r2
 8003052:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a21      	ldr	r2, [pc, #132]	@ (80030dc <TIM_OC2_SetConfig+0xe0>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d003      	beq.n	8003064 <TIM_OC2_SetConfig+0x68>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a20      	ldr	r2, [pc, #128]	@ (80030e0 <TIM_OC2_SetConfig+0xe4>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d10d      	bne.n	8003080 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800306a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	4313      	orrs	r3, r2
 8003076:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800307e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a16      	ldr	r2, [pc, #88]	@ (80030dc <TIM_OC2_SetConfig+0xe0>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d003      	beq.n	8003090 <TIM_OC2_SetConfig+0x94>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a15      	ldr	r2, [pc, #84]	@ (80030e0 <TIM_OC2_SetConfig+0xe4>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d113      	bne.n	80030b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003096:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800309e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685a      	ldr	r2, [r3, #4]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	621a      	str	r2, [r3, #32]
}
 80030d2:	bf00      	nop
 80030d4:	371c      	adds	r7, #28
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr
 80030dc:	40012c00 	.word	0x40012c00
 80030e0:	40013400 	.word	0x40013400

080030e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b087      	sub	sp, #28
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f023 0303 	bic.w	r3, r3, #3
 800311a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	4313      	orrs	r3, r2
 8003124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800312c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	021b      	lsls	r3, r3, #8
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	4313      	orrs	r3, r2
 8003138:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a21      	ldr	r2, [pc, #132]	@ (80031c4 <TIM_OC3_SetConfig+0xe0>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d003      	beq.n	800314a <TIM_OC3_SetConfig+0x66>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a20      	ldr	r2, [pc, #128]	@ (80031c8 <TIM_OC3_SetConfig+0xe4>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d10d      	bne.n	8003166 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003150:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	021b      	lsls	r3, r3, #8
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	4313      	orrs	r3, r2
 800315c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003164:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a16      	ldr	r2, [pc, #88]	@ (80031c4 <TIM_OC3_SetConfig+0xe0>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d003      	beq.n	8003176 <TIM_OC3_SetConfig+0x92>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a15      	ldr	r2, [pc, #84]	@ (80031c8 <TIM_OC3_SetConfig+0xe4>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d113      	bne.n	800319e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800317c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003184:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	011b      	lsls	r3, r3, #4
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	4313      	orrs	r3, r2
 8003190:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	011b      	lsls	r3, r3, #4
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	4313      	orrs	r3, r2
 800319c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	621a      	str	r2, [r3, #32]
}
 80031b8:	bf00      	nop
 80031ba:	371c      	adds	r7, #28
 80031bc:	46bd      	mov	sp, r7
 80031be:	bc80      	pop	{r7}
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	40012c00 	.word	0x40012c00
 80031c8:	40013400 	.word	0x40013400

080031cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a1b      	ldr	r3, [r3, #32]
 80031e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003202:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	021b      	lsls	r3, r3, #8
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	4313      	orrs	r3, r2
 800320e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003216:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	031b      	lsls	r3, r3, #12
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	4313      	orrs	r3, r2
 8003222:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a11      	ldr	r2, [pc, #68]	@ (800326c <TIM_OC4_SetConfig+0xa0>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d003      	beq.n	8003234 <TIM_OC4_SetConfig+0x68>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a10      	ldr	r2, [pc, #64]	@ (8003270 <TIM_OC4_SetConfig+0xa4>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d109      	bne.n	8003248 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800323a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	019b      	lsls	r3, r3, #6
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	4313      	orrs	r3, r2
 8003246:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	621a      	str	r2, [r3, #32]
}
 8003262:	bf00      	nop
 8003264:	371c      	adds	r7, #28
 8003266:	46bd      	mov	sp, r7
 8003268:	bc80      	pop	{r7}
 800326a:	4770      	bx	lr
 800326c:	40012c00 	.word	0x40012c00
 8003270:	40013400 	.word	0x40013400

08003274 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003284:	2b01      	cmp	r3, #1
 8003286:	d101      	bne.n	800328c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003288:	2302      	movs	r3, #2
 800328a:	e050      	b.n	800332e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2202      	movs	r2, #2
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a1b      	ldr	r2, [pc, #108]	@ (8003338 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d018      	beq.n	8003302 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a19      	ldr	r2, [pc, #100]	@ (800333c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d013      	beq.n	8003302 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032e2:	d00e      	beq.n	8003302 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a15      	ldr	r2, [pc, #84]	@ (8003340 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d009      	beq.n	8003302 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a14      	ldr	r2, [pc, #80]	@ (8003344 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d004      	beq.n	8003302 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a12      	ldr	r2, [pc, #72]	@ (8003348 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d10c      	bne.n	800331c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003308:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	68ba      	ldr	r2, [r7, #8]
 8003310:	4313      	orrs	r3, r2
 8003312:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68ba      	ldr	r2, [r7, #8]
 800331a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3714      	adds	r7, #20
 8003332:	46bd      	mov	sp, r7
 8003334:	bc80      	pop	{r7}
 8003336:	4770      	bx	lr
 8003338:	40012c00 	.word	0x40012c00
 800333c:	40013400 	.word	0x40013400
 8003340:	40000400 	.word	0x40000400
 8003344:	40000800 	.word	0x40000800
 8003348:	40000c00 	.word	0x40000c00

0800334c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	bc80      	pop	{r7}
 800335c:	4770      	bx	lr

0800335e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800335e:	b480      	push	{r7}
 8003360:	b083      	sub	sp, #12
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	bc80      	pop	{r7}
 800336e:	4770      	bx	lr

08003370 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e042      	b.n	8003408 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d106      	bne.n	800339c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7fd ff68 	bl	800126c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2224      	movs	r2, #36	@ 0x24
 80033a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68da      	ldr	r2, [r3, #12]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 f82b 	bl	8003410 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	691a      	ldr	r2, [r3, #16]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80033c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	695a      	ldr	r2, [r3, #20]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80033d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68da      	ldr	r2, [r3, #12]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2220      	movs	r2, #32
 80033fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68da      	ldr	r2, [r3, #12]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	430a      	orrs	r2, r1
 800342c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	431a      	orrs	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	4313      	orrs	r3, r2
 800343e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800344a:	f023 030c 	bic.w	r3, r3, #12
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	6812      	ldr	r2, [r2, #0]
 8003452:	68b9      	ldr	r1, [r7, #8]
 8003454:	430b      	orrs	r3, r1
 8003456:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	699a      	ldr	r2, [r3, #24]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a2c      	ldr	r2, [pc, #176]	@ (8003524 <UART_SetConfig+0x114>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d103      	bne.n	8003480 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003478:	f7fe ff18 	bl	80022ac <HAL_RCC_GetPCLK2Freq>
 800347c:	60f8      	str	r0, [r7, #12]
 800347e:	e002      	b.n	8003486 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003480:	f7fe ff00 	bl	8002284 <HAL_RCC_GetPCLK1Freq>
 8003484:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	4613      	mov	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	009a      	lsls	r2, r3, #2
 8003490:	441a      	add	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	fbb2 f3f3 	udiv	r3, r2, r3
 800349c:	4a22      	ldr	r2, [pc, #136]	@ (8003528 <UART_SetConfig+0x118>)
 800349e:	fba2 2303 	umull	r2, r3, r2, r3
 80034a2:	095b      	lsrs	r3, r3, #5
 80034a4:	0119      	lsls	r1, r3, #4
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	4613      	mov	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	009a      	lsls	r2, r3, #2
 80034b0:	441a      	add	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80034bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003528 <UART_SetConfig+0x118>)
 80034be:	fba3 0302 	umull	r0, r3, r3, r2
 80034c2:	095b      	lsrs	r3, r3, #5
 80034c4:	2064      	movs	r0, #100	@ 0x64
 80034c6:	fb00 f303 	mul.w	r3, r0, r3
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	011b      	lsls	r3, r3, #4
 80034ce:	3332      	adds	r3, #50	@ 0x32
 80034d0:	4a15      	ldr	r2, [pc, #84]	@ (8003528 <UART_SetConfig+0x118>)
 80034d2:	fba2 2303 	umull	r2, r3, r2, r3
 80034d6:	095b      	lsrs	r3, r3, #5
 80034d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034dc:	4419      	add	r1, r3
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	4613      	mov	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	009a      	lsls	r2, r3, #2
 80034e8:	441a      	add	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80034f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003528 <UART_SetConfig+0x118>)
 80034f6:	fba3 0302 	umull	r0, r3, r3, r2
 80034fa:	095b      	lsrs	r3, r3, #5
 80034fc:	2064      	movs	r0, #100	@ 0x64
 80034fe:	fb00 f303 	mul.w	r3, r0, r3
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	011b      	lsls	r3, r3, #4
 8003506:	3332      	adds	r3, #50	@ 0x32
 8003508:	4a07      	ldr	r2, [pc, #28]	@ (8003528 <UART_SetConfig+0x118>)
 800350a:	fba2 2303 	umull	r2, r3, r2, r3
 800350e:	095b      	lsrs	r3, r3, #5
 8003510:	f003 020f 	and.w	r2, r3, #15
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	440a      	add	r2, r1
 800351a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800351c:	bf00      	nop
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40013800 	.word	0x40013800
 8003528:	51eb851f 	.word	0x51eb851f

0800352c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	4603      	mov	r3, r0
 8003534:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003536:	2300      	movs	r3, #0
 8003538:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800353a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800353e:	2b84      	cmp	r3, #132	@ 0x84
 8003540:	d005      	beq.n	800354e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003542:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	4413      	add	r3, r2
 800354a:	3303      	adds	r3, #3
 800354c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800354e:	68fb      	ldr	r3, [r7, #12]
}
 8003550:	4618      	mov	r0, r3
 8003552:	3714      	adds	r7, #20
 8003554:	46bd      	mov	sp, r7
 8003556:	bc80      	pop	{r7}
 8003558:	4770      	bx	lr

0800355a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800355e:	f000 faef 	bl	8003b40 <vTaskStartScheduler>
  
  return osOK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	bd80      	pop	{r7, pc}

08003568 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800356a:	b089      	sub	sp, #36	@ 0x24
 800356c:	af04      	add	r7, sp, #16
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d020      	beq.n	80035bc <osThreadCreate+0x54>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d01c      	beq.n	80035bc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685c      	ldr	r4, [r3, #4]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691e      	ldr	r6, [r3, #16]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff ffc9 	bl	800352c <makeFreeRtosPriority>
 800359a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035a4:	9202      	str	r2, [sp, #8]
 80035a6:	9301      	str	r3, [sp, #4]
 80035a8:	9100      	str	r1, [sp, #0]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	4632      	mov	r2, r6
 80035ae:	4629      	mov	r1, r5
 80035b0:	4620      	mov	r0, r4
 80035b2:	f000 f8e8 	bl	8003786 <xTaskCreateStatic>
 80035b6:	4603      	mov	r3, r0
 80035b8:	60fb      	str	r3, [r7, #12]
 80035ba:	e01c      	b.n	80035f6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685c      	ldr	r4, [r3, #4]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035c8:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff ffab 	bl	800352c <makeFreeRtosPriority>
 80035d6:	4602      	mov	r2, r0
 80035d8:	f107 030c 	add.w	r3, r7, #12
 80035dc:	9301      	str	r3, [sp, #4]
 80035de:	9200      	str	r2, [sp, #0]
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	4632      	mov	r2, r6
 80035e4:	4629      	mov	r1, r5
 80035e6:	4620      	mov	r0, r4
 80035e8:	f000 f92c 	bl	8003844 <xTaskCreate>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d001      	beq.n	80035f6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80035f2:	2300      	movs	r3, #0
 80035f4:	e000      	b.n	80035f8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80035f6:	68fb      	ldr	r3, [r7, #12]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3714      	adds	r7, #20
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003600 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <osDelay+0x16>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	e000      	b.n	8003618 <osDelay+0x18>
 8003616:	2301      	movs	r3, #1
 8003618:	4618      	mov	r0, r3
 800361a:	f000 fa5b 	bl	8003ad4 <vTaskDelay>
  
  return osOK;
 800361e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f103 0208 	add.w	r2, r3, #8
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003640:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f103 0208 	add.w	r2, r3, #8
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f103 0208 	add.w	r2, r3, #8
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	bc80      	pop	{r7}
 8003664:	4770      	bx	lr

08003666 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003666:	b480      	push	{r7}
 8003668:	b083      	sub	sp, #12
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	bc80      	pop	{r7}
 800367c:	4770      	bx	lr

0800367e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800367e:	b480      	push	{r7}
 8003680:	b085      	sub	sp, #20
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
 8003686:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	1c5a      	adds	r2, r3, #1
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	601a      	str	r2, [r3, #0]
}
 80036ba:	bf00      	nop
 80036bc:	3714      	adds	r7, #20
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr

080036c4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036da:	d103      	bne.n	80036e4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	60fb      	str	r3, [r7, #12]
 80036e2:	e00c      	b.n	80036fe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	3308      	adds	r3, #8
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	e002      	b.n	80036f2 <vListInsert+0x2e>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68ba      	ldr	r2, [r7, #8]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d2f6      	bcs.n	80036ec <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	1c5a      	adds	r2, r3, #1
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	601a      	str	r2, [r3, #0]
}
 800372a:	bf00      	nop
 800372c:	3714      	adds	r7, #20
 800372e:	46bd      	mov	sp, r7
 8003730:	bc80      	pop	{r7}
 8003732:	4770      	bx	lr

08003734 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6892      	ldr	r2, [r2, #8]
 800374a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	6852      	ldr	r2, [r2, #4]
 8003754:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	429a      	cmp	r2, r3
 800375e:	d103      	bne.n	8003768 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689a      	ldr	r2, [r3, #8]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	1e5a      	subs	r2, r3, #1
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
}
 800377c:	4618      	mov	r0, r3
 800377e:	3714      	adds	r7, #20
 8003780:	46bd      	mov	sp, r7
 8003782:	bc80      	pop	{r7}
 8003784:	4770      	bx	lr

08003786 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003786:	b580      	push	{r7, lr}
 8003788:	b08e      	sub	sp, #56	@ 0x38
 800378a:	af04      	add	r7, sp, #16
 800378c:	60f8      	str	r0, [r7, #12]
 800378e:	60b9      	str	r1, [r7, #8]
 8003790:	607a      	str	r2, [r7, #4]
 8003792:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10b      	bne.n	80037b2 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800379a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800379e:	f383 8811 	msr	BASEPRI, r3
 80037a2:	f3bf 8f6f 	isb	sy
 80037a6:	f3bf 8f4f 	dsb	sy
 80037aa:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80037ac:	bf00      	nop
 80037ae:	bf00      	nop
 80037b0:	e7fd      	b.n	80037ae <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80037b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10b      	bne.n	80037d0 <xTaskCreateStatic+0x4a>
	__asm volatile
 80037b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037bc:	f383 8811 	msr	BASEPRI, r3
 80037c0:	f3bf 8f6f 	isb	sy
 80037c4:	f3bf 8f4f 	dsb	sy
 80037c8:	61fb      	str	r3, [r7, #28]
}
 80037ca:	bf00      	nop
 80037cc:	bf00      	nop
 80037ce:	e7fd      	b.n	80037cc <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80037d0:	23a0      	movs	r3, #160	@ 0xa0
 80037d2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	2ba0      	cmp	r3, #160	@ 0xa0
 80037d8:	d00b      	beq.n	80037f2 <xTaskCreateStatic+0x6c>
	__asm volatile
 80037da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037de:	f383 8811 	msr	BASEPRI, r3
 80037e2:	f3bf 8f6f 	isb	sy
 80037e6:	f3bf 8f4f 	dsb	sy
 80037ea:	61bb      	str	r3, [r7, #24]
}
 80037ec:	bf00      	nop
 80037ee:	bf00      	nop
 80037f0:	e7fd      	b.n	80037ee <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80037f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d01e      	beq.n	8003836 <xTaskCreateStatic+0xb0>
 80037f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d01b      	beq.n	8003836 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80037fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003800:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003804:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003806:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800380a:	2202      	movs	r2, #2
 800380c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003810:	2300      	movs	r3, #0
 8003812:	9303      	str	r3, [sp, #12]
 8003814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003816:	9302      	str	r3, [sp, #8]
 8003818:	f107 0314 	add.w	r3, r7, #20
 800381c:	9301      	str	r3, [sp, #4]
 800381e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	68b9      	ldr	r1, [r7, #8]
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f000 f851 	bl	80038d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800382e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003830:	f000 f8e6 	bl	8003a00 <prvAddNewTaskToReadyList>
 8003834:	e001      	b.n	800383a <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8003836:	2300      	movs	r3, #0
 8003838:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800383a:	697b      	ldr	r3, [r7, #20]
	}
 800383c:	4618      	mov	r0, r3
 800383e:	3728      	adds	r7, #40	@ 0x28
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003844:	b580      	push	{r7, lr}
 8003846:	b08c      	sub	sp, #48	@ 0x30
 8003848:	af04      	add	r7, sp, #16
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	603b      	str	r3, [r7, #0]
 8003850:	4613      	mov	r3, r2
 8003852:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003854:	88fb      	ldrh	r3, [r7, #6]
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	4618      	mov	r0, r3
 800385a:	f000 fea1 	bl	80045a0 <pvPortMalloc>
 800385e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00e      	beq.n	8003884 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003866:	20a0      	movs	r0, #160	@ 0xa0
 8003868:	f000 fe9a 	bl	80045a0 <pvPortMalloc>
 800386c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	631a      	str	r2, [r3, #48]	@ 0x30
 800387a:	e005      	b.n	8003888 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800387c:	6978      	ldr	r0, [r7, #20]
 800387e:	f000 ff57 	bl	8004730 <vPortFree>
 8003882:	e001      	b.n	8003888 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003884:	2300      	movs	r3, #0
 8003886:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d017      	beq.n	80038be <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003896:	88fa      	ldrh	r2, [r7, #6]
 8003898:	2300      	movs	r3, #0
 800389a:	9303      	str	r3, [sp, #12]
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	9302      	str	r3, [sp, #8]
 80038a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038a2:	9301      	str	r3, [sp, #4]
 80038a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038a6:	9300      	str	r3, [sp, #0]
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	68b9      	ldr	r1, [r7, #8]
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f000 f80f 	bl	80038d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038b2:	69f8      	ldr	r0, [r7, #28]
 80038b4:	f000 f8a4 	bl	8003a00 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80038b8:	2301      	movs	r3, #1
 80038ba:	61bb      	str	r3, [r7, #24]
 80038bc:	e002      	b.n	80038c4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80038be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80038c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80038c4:	69bb      	ldr	r3, [r7, #24]
	}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3720      	adds	r7, #32
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
	...

080038d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b088      	sub	sp, #32
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
 80038dc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80038de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80038e8:	3b01      	subs	r3, #1
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4413      	add	r3, r2
 80038ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	f023 0307 	bic.w	r3, r3, #7
 80038f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	f003 0307 	and.w	r3, r3, #7
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00b      	beq.n	800391a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003906:	f383 8811 	msr	BASEPRI, r3
 800390a:	f3bf 8f6f 	isb	sy
 800390e:	f3bf 8f4f 	dsb	sy
 8003912:	617b      	str	r3, [r7, #20]
}
 8003914:	bf00      	nop
 8003916:	bf00      	nop
 8003918:	e7fd      	b.n	8003916 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800391a:	2300      	movs	r3, #0
 800391c:	61fb      	str	r3, [r7, #28]
 800391e:	e012      	b.n	8003946 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003920:	68ba      	ldr	r2, [r7, #8]
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	4413      	add	r3, r2
 8003926:	7819      	ldrb	r1, [r3, #0]
 8003928:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	4413      	add	r3, r2
 800392e:	3334      	adds	r3, #52	@ 0x34
 8003930:	460a      	mov	r2, r1
 8003932:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	4413      	add	r3, r2
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d006      	beq.n	800394e <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	3301      	adds	r3, #1
 8003944:	61fb      	str	r3, [r7, #28]
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	2b0f      	cmp	r3, #15
 800394a:	d9e9      	bls.n	8003920 <prvInitialiseNewTask+0x50>
 800394c:	e000      	b.n	8003950 <prvInitialiseNewTask+0x80>
		{
			break;
 800394e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800395a:	2b06      	cmp	r3, #6
 800395c:	d901      	bls.n	8003962 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800395e:	2306      	movs	r3, #6
 8003960:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003964:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003966:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800396a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800396c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800396e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003970:	2200      	movs	r2, #0
 8003972:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003976:	3304      	adds	r3, #4
 8003978:	4618      	mov	r0, r3
 800397a:	f7ff fe74 	bl	8003666 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800397e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003980:	3318      	adds	r3, #24
 8003982:	4618      	mov	r0, r3
 8003984:	f7ff fe6f 	bl	8003666 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800398a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800398c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800398e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003990:	f1c3 0207 	rsb	r2, r3, #7
 8003994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003996:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800399a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800399c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800399e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a0:	2200      	movs	r2, #0
 80039a2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80039a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80039ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b0:	334c      	adds	r3, #76	@ 0x4c
 80039b2:	224c      	movs	r2, #76	@ 0x4c
 80039b4:	2100      	movs	r1, #0
 80039b6:	4618      	mov	r0, r3
 80039b8:	f001 f864 	bl	8004a84 <memset>
 80039bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039be:	4a0d      	ldr	r2, [pc, #52]	@ (80039f4 <prvInitialiseNewTask+0x124>)
 80039c0:	651a      	str	r2, [r3, #80]	@ 0x50
 80039c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c4:	4a0c      	ldr	r2, [pc, #48]	@ (80039f8 <prvInitialiseNewTask+0x128>)
 80039c6:	655a      	str	r2, [r3, #84]	@ 0x54
 80039c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ca:	4a0c      	ldr	r2, [pc, #48]	@ (80039fc <prvInitialiseNewTask+0x12c>)
 80039cc:	659a      	str	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	68f9      	ldr	r1, [r7, #12]
 80039d2:	69b8      	ldr	r0, [r7, #24]
 80039d4:	f000 fc30 	bl	8004238 <pxPortInitialiseStack>
 80039d8:	4602      	mov	r2, r0
 80039da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039dc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80039de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d002      	beq.n	80039ea <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80039e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039ea:	bf00      	nop
 80039ec:	3720      	adds	r7, #32
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	20001ea0 	.word	0x20001ea0
 80039f8:	20001f08 	.word	0x20001f08
 80039fc:	20001f70 	.word	0x20001f70

08003a00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a08:	f000 fd08 	bl	800441c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a0c:	4b2a      	ldr	r3, [pc, #168]	@ (8003ab8 <prvAddNewTaskToReadyList+0xb8>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	3301      	adds	r3, #1
 8003a12:	4a29      	ldr	r2, [pc, #164]	@ (8003ab8 <prvAddNewTaskToReadyList+0xb8>)
 8003a14:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003a16:	4b29      	ldr	r3, [pc, #164]	@ (8003abc <prvAddNewTaskToReadyList+0xbc>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d109      	bne.n	8003a32 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003a1e:	4a27      	ldr	r2, [pc, #156]	@ (8003abc <prvAddNewTaskToReadyList+0xbc>)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a24:	4b24      	ldr	r3, [pc, #144]	@ (8003ab8 <prvAddNewTaskToReadyList+0xb8>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d110      	bne.n	8003a4e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003a2c:	f000 fad6 	bl	8003fdc <prvInitialiseTaskLists>
 8003a30:	e00d      	b.n	8003a4e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003a32:	4b23      	ldr	r3, [pc, #140]	@ (8003ac0 <prvAddNewTaskToReadyList+0xc0>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d109      	bne.n	8003a4e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003a3a:	4b20      	ldr	r3, [pc, #128]	@ (8003abc <prvAddNewTaskToReadyList+0xbc>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d802      	bhi.n	8003a4e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003a48:	4a1c      	ldr	r2, [pc, #112]	@ (8003abc <prvAddNewTaskToReadyList+0xbc>)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003a4e:	4b1d      	ldr	r3, [pc, #116]	@ (8003ac4 <prvAddNewTaskToReadyList+0xc4>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	3301      	adds	r3, #1
 8003a54:	4a1b      	ldr	r2, [pc, #108]	@ (8003ac4 <prvAddNewTaskToReadyList+0xc4>)
 8003a56:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	409a      	lsls	r2, r3
 8003a60:	4b19      	ldr	r3, [pc, #100]	@ (8003ac8 <prvAddNewTaskToReadyList+0xc8>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	4a18      	ldr	r2, [pc, #96]	@ (8003ac8 <prvAddNewTaskToReadyList+0xc8>)
 8003a68:	6013      	str	r3, [r2, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a6e:	4613      	mov	r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	4413      	add	r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	4a15      	ldr	r2, [pc, #84]	@ (8003acc <prvAddNewTaskToReadyList+0xcc>)
 8003a78:	441a      	add	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	3304      	adds	r3, #4
 8003a7e:	4619      	mov	r1, r3
 8003a80:	4610      	mov	r0, r2
 8003a82:	f7ff fdfc 	bl	800367e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003a86:	f000 fcf9 	bl	800447c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ac0 <prvAddNewTaskToReadyList+0xc0>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00e      	beq.n	8003ab0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003a92:	4b0a      	ldr	r3, [pc, #40]	@ (8003abc <prvAddNewTaskToReadyList+0xbc>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d207      	bcs.n	8003ab0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad0 <prvAddNewTaskToReadyList+0xd0>)
 8003aa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	f3bf 8f4f 	dsb	sy
 8003aac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ab0:	bf00      	nop
 8003ab2:	3708      	adds	r7, #8
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	20000650 	.word	0x20000650
 8003abc:	20000550 	.word	0x20000550
 8003ac0:	2000065c 	.word	0x2000065c
 8003ac4:	2000066c 	.word	0x2000066c
 8003ac8:	20000658 	.word	0x20000658
 8003acc:	20000554 	.word	0x20000554
 8003ad0:	e000ed04 	.word	0xe000ed04

08003ad4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003adc:	2300      	movs	r3, #0
 8003ade:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d018      	beq.n	8003b18 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003ae6:	4b14      	ldr	r3, [pc, #80]	@ (8003b38 <vTaskDelay+0x64>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00b      	beq.n	8003b06 <vTaskDelay+0x32>
	__asm volatile
 8003aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003af2:	f383 8811 	msr	BASEPRI, r3
 8003af6:	f3bf 8f6f 	isb	sy
 8003afa:	f3bf 8f4f 	dsb	sy
 8003afe:	60bb      	str	r3, [r7, #8]
}
 8003b00:	bf00      	nop
 8003b02:	bf00      	nop
 8003b04:	e7fd      	b.n	8003b02 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003b06:	f000 f885 	bl	8003c14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 fb2d 	bl	800416c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003b12:	f000 f88d 	bl	8003c30 <xTaskResumeAll>
 8003b16:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d107      	bne.n	8003b2e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003b1e:	4b07      	ldr	r3, [pc, #28]	@ (8003b3c <vTaskDelay+0x68>)
 8003b20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b24:	601a      	str	r2, [r3, #0]
 8003b26:	f3bf 8f4f 	dsb	sy
 8003b2a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003b2e:	bf00      	nop
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	20000678 	.word	0x20000678
 8003b3c:	e000ed04 	.word	0xe000ed04

08003b40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b08a      	sub	sp, #40	@ 0x28
 8003b44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003b46:	2300      	movs	r3, #0
 8003b48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003b4e:	463a      	mov	r2, r7
 8003b50:	1d39      	adds	r1, r7, #4
 8003b52:	f107 0308 	add.w	r3, r7, #8
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7fc fb74 	bl	8000244 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003b5c:	6839      	ldr	r1, [r7, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68ba      	ldr	r2, [r7, #8]
 8003b62:	9202      	str	r2, [sp, #8]
 8003b64:	9301      	str	r3, [sp, #4]
 8003b66:	2300      	movs	r3, #0
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	460a      	mov	r2, r1
 8003b6e:	4921      	ldr	r1, [pc, #132]	@ (8003bf4 <vTaskStartScheduler+0xb4>)
 8003b70:	4821      	ldr	r0, [pc, #132]	@ (8003bf8 <vTaskStartScheduler+0xb8>)
 8003b72:	f7ff fe08 	bl	8003786 <xTaskCreateStatic>
 8003b76:	4603      	mov	r3, r0
 8003b78:	4a20      	ldr	r2, [pc, #128]	@ (8003bfc <vTaskStartScheduler+0xbc>)
 8003b7a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003b7c:	4b1f      	ldr	r3, [pc, #124]	@ (8003bfc <vTaskStartScheduler+0xbc>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d002      	beq.n	8003b8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003b84:	2301      	movs	r3, #1
 8003b86:	617b      	str	r3, [r7, #20]
 8003b88:	e001      	b.n	8003b8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d11b      	bne.n	8003bcc <vTaskStartScheduler+0x8c>
	__asm volatile
 8003b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b98:	f383 8811 	msr	BASEPRI, r3
 8003b9c:	f3bf 8f6f 	isb	sy
 8003ba0:	f3bf 8f4f 	dsb	sy
 8003ba4:	613b      	str	r3, [r7, #16]
}
 8003ba6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003ba8:	4b15      	ldr	r3, [pc, #84]	@ (8003c00 <vTaskStartScheduler+0xc0>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	334c      	adds	r3, #76	@ 0x4c
 8003bae:	4a15      	ldr	r2, [pc, #84]	@ (8003c04 <vTaskStartScheduler+0xc4>)
 8003bb0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003bb2:	4b15      	ldr	r3, [pc, #84]	@ (8003c08 <vTaskStartScheduler+0xc8>)
 8003bb4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003bb8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003bba:	4b14      	ldr	r3, [pc, #80]	@ (8003c0c <vTaskStartScheduler+0xcc>)
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003bc0:	4b13      	ldr	r3, [pc, #76]	@ (8003c10 <vTaskStartScheduler+0xd0>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003bc6:	f000 fbb7 	bl	8004338 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003bca:	e00f      	b.n	8003bec <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003bd2:	d10b      	bne.n	8003bec <vTaskStartScheduler+0xac>
	__asm volatile
 8003bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bd8:	f383 8811 	msr	BASEPRI, r3
 8003bdc:	f3bf 8f6f 	isb	sy
 8003be0:	f3bf 8f4f 	dsb	sy
 8003be4:	60fb      	str	r3, [r7, #12]
}
 8003be6:	bf00      	nop
 8003be8:	bf00      	nop
 8003bea:	e7fd      	b.n	8003be8 <vTaskStartScheduler+0xa8>
}
 8003bec:	bf00      	nop
 8003bee:	3718      	adds	r7, #24
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	08004d3c 	.word	0x08004d3c
 8003bf8:	08003fad 	.word	0x08003fad
 8003bfc:	20000674 	.word	0x20000674
 8003c00:	20000550 	.word	0x20000550
 8003c04:	20000018 	.word	0x20000018
 8003c08:	20000670 	.word	0x20000670
 8003c0c:	2000065c 	.word	0x2000065c
 8003c10:	20000654 	.word	0x20000654

08003c14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003c18:	4b04      	ldr	r3, [pc, #16]	@ (8003c2c <vTaskSuspendAll+0x18>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	4a03      	ldr	r2, [pc, #12]	@ (8003c2c <vTaskSuspendAll+0x18>)
 8003c20:	6013      	str	r3, [r2, #0]
}
 8003c22:	bf00      	nop
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bc80      	pop	{r7}
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	20000678 	.word	0x20000678

08003c30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c36:	2300      	movs	r3, #0
 8003c38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c3e:	4b42      	ldr	r3, [pc, #264]	@ (8003d48 <xTaskResumeAll+0x118>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10b      	bne.n	8003c5e <xTaskResumeAll+0x2e>
	__asm volatile
 8003c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c4a:	f383 8811 	msr	BASEPRI, r3
 8003c4e:	f3bf 8f6f 	isb	sy
 8003c52:	f3bf 8f4f 	dsb	sy
 8003c56:	603b      	str	r3, [r7, #0]
}
 8003c58:	bf00      	nop
 8003c5a:	bf00      	nop
 8003c5c:	e7fd      	b.n	8003c5a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c5e:	f000 fbdd 	bl	800441c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c62:	4b39      	ldr	r3, [pc, #228]	@ (8003d48 <xTaskResumeAll+0x118>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	3b01      	subs	r3, #1
 8003c68:	4a37      	ldr	r2, [pc, #220]	@ (8003d48 <xTaskResumeAll+0x118>)
 8003c6a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c6c:	4b36      	ldr	r3, [pc, #216]	@ (8003d48 <xTaskResumeAll+0x118>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d161      	bne.n	8003d38 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c74:	4b35      	ldr	r3, [pc, #212]	@ (8003d4c <xTaskResumeAll+0x11c>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d05d      	beq.n	8003d38 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c7c:	e02e      	b.n	8003cdc <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003c7e:	4b34      	ldr	r3, [pc, #208]	@ (8003d50 <xTaskResumeAll+0x120>)
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	3318      	adds	r3, #24
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7ff fd52 	bl	8003734 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	3304      	adds	r3, #4
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7ff fd4d 	bl	8003734 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	409a      	lsls	r2, r3
 8003ca2:	4b2c      	ldr	r3, [pc, #176]	@ (8003d54 <xTaskResumeAll+0x124>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	4a2a      	ldr	r2, [pc, #168]	@ (8003d54 <xTaskResumeAll+0x124>)
 8003caa:	6013      	str	r3, [r2, #0]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4a27      	ldr	r2, [pc, #156]	@ (8003d58 <xTaskResumeAll+0x128>)
 8003cba:	441a      	add	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	3304      	adds	r3, #4
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4610      	mov	r0, r2
 8003cc4:	f7ff fcdb 	bl	800367e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ccc:	4b23      	ldr	r3, [pc, #140]	@ (8003d5c <xTaskResumeAll+0x12c>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d302      	bcc.n	8003cdc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003cd6:	4b22      	ldr	r3, [pc, #136]	@ (8003d60 <xTaskResumeAll+0x130>)
 8003cd8:	2201      	movs	r2, #1
 8003cda:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cdc:	4b1c      	ldr	r3, [pc, #112]	@ (8003d50 <xTaskResumeAll+0x120>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1cc      	bne.n	8003c7e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003cea:	f000 fa1b 	bl	8004124 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003cee:	4b1d      	ldr	r3, [pc, #116]	@ (8003d64 <xTaskResumeAll+0x134>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d010      	beq.n	8003d1c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003cfa:	f000 f837 	bl	8003d6c <xTaskIncrementTick>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d002      	beq.n	8003d0a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003d04:	4b16      	ldr	r3, [pc, #88]	@ (8003d60 <xTaskResumeAll+0x130>)
 8003d06:	2201      	movs	r2, #1
 8003d08:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1f1      	bne.n	8003cfa <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003d16:	4b13      	ldr	r3, [pc, #76]	@ (8003d64 <xTaskResumeAll+0x134>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d1c:	4b10      	ldr	r3, [pc, #64]	@ (8003d60 <xTaskResumeAll+0x130>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d009      	beq.n	8003d38 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d24:	2301      	movs	r3, #1
 8003d26:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d28:	4b0f      	ldr	r3, [pc, #60]	@ (8003d68 <xTaskResumeAll+0x138>)
 8003d2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d2e:	601a      	str	r2, [r3, #0]
 8003d30:	f3bf 8f4f 	dsb	sy
 8003d34:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d38:	f000 fba0 	bl	800447c <vPortExitCritical>

	return xAlreadyYielded;
 8003d3c:	68bb      	ldr	r3, [r7, #8]
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	20000678 	.word	0x20000678
 8003d4c:	20000650 	.word	0x20000650
 8003d50:	20000610 	.word	0x20000610
 8003d54:	20000658 	.word	0x20000658
 8003d58:	20000554 	.word	0x20000554
 8003d5c:	20000550 	.word	0x20000550
 8003d60:	20000664 	.word	0x20000664
 8003d64:	20000660 	.word	0x20000660
 8003d68:	e000ed04 	.word	0xe000ed04

08003d6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d72:	2300      	movs	r3, #0
 8003d74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d76:	4b51      	ldr	r3, [pc, #324]	@ (8003ebc <xTaskIncrementTick+0x150>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f040 808e 	bne.w	8003e9c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d80:	4b4f      	ldr	r3, [pc, #316]	@ (8003ec0 <xTaskIncrementTick+0x154>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	3301      	adds	r3, #1
 8003d86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003d88:	4a4d      	ldr	r2, [pc, #308]	@ (8003ec0 <xTaskIncrementTick+0x154>)
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d121      	bne.n	8003dd8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003d94:	4b4b      	ldr	r3, [pc, #300]	@ (8003ec4 <xTaskIncrementTick+0x158>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00b      	beq.n	8003db6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003da2:	f383 8811 	msr	BASEPRI, r3
 8003da6:	f3bf 8f6f 	isb	sy
 8003daa:	f3bf 8f4f 	dsb	sy
 8003dae:	603b      	str	r3, [r7, #0]
}
 8003db0:	bf00      	nop
 8003db2:	bf00      	nop
 8003db4:	e7fd      	b.n	8003db2 <xTaskIncrementTick+0x46>
 8003db6:	4b43      	ldr	r3, [pc, #268]	@ (8003ec4 <xTaskIncrementTick+0x158>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	4b42      	ldr	r3, [pc, #264]	@ (8003ec8 <xTaskIncrementTick+0x15c>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a40      	ldr	r2, [pc, #256]	@ (8003ec4 <xTaskIncrementTick+0x158>)
 8003dc2:	6013      	str	r3, [r2, #0]
 8003dc4:	4a40      	ldr	r2, [pc, #256]	@ (8003ec8 <xTaskIncrementTick+0x15c>)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6013      	str	r3, [r2, #0]
 8003dca:	4b40      	ldr	r3, [pc, #256]	@ (8003ecc <xTaskIncrementTick+0x160>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	3301      	adds	r3, #1
 8003dd0:	4a3e      	ldr	r2, [pc, #248]	@ (8003ecc <xTaskIncrementTick+0x160>)
 8003dd2:	6013      	str	r3, [r2, #0]
 8003dd4:	f000 f9a6 	bl	8004124 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003dd8:	4b3d      	ldr	r3, [pc, #244]	@ (8003ed0 <xTaskIncrementTick+0x164>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d34d      	bcc.n	8003e7e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003de2:	4b38      	ldr	r3, [pc, #224]	@ (8003ec4 <xTaskIncrementTick+0x158>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <xTaskIncrementTick+0x84>
 8003dec:	2301      	movs	r3, #1
 8003dee:	e000      	b.n	8003df2 <xTaskIncrementTick+0x86>
 8003df0:	2300      	movs	r3, #0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d004      	beq.n	8003e00 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003df6:	4b36      	ldr	r3, [pc, #216]	@ (8003ed0 <xTaskIncrementTick+0x164>)
 8003df8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003dfc:	601a      	str	r2, [r3, #0]
					break;
 8003dfe:	e03e      	b.n	8003e7e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003e00:	4b30      	ldr	r3, [pc, #192]	@ (8003ec4 <xTaskIncrementTick+0x158>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d203      	bcs.n	8003e20 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e18:	4a2d      	ldr	r2, [pc, #180]	@ (8003ed0 <xTaskIncrementTick+0x164>)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6013      	str	r3, [r2, #0]
						break;
 8003e1e:	e02e      	b.n	8003e7e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	3304      	adds	r3, #4
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7ff fc85 	bl	8003734 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d004      	beq.n	8003e3c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	3318      	adds	r3, #24
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7ff fc7c 	bl	8003734 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e40:	2201      	movs	r2, #1
 8003e42:	409a      	lsls	r2, r3
 8003e44:	4b23      	ldr	r3, [pc, #140]	@ (8003ed4 <xTaskIncrementTick+0x168>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	4a22      	ldr	r2, [pc, #136]	@ (8003ed4 <xTaskIncrementTick+0x168>)
 8003e4c:	6013      	str	r3, [r2, #0]
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e52:	4613      	mov	r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	4413      	add	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	4a1f      	ldr	r2, [pc, #124]	@ (8003ed8 <xTaskIncrementTick+0x16c>)
 8003e5c:	441a      	add	r2, r3
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	3304      	adds	r3, #4
 8003e62:	4619      	mov	r1, r3
 8003e64:	4610      	mov	r0, r2
 8003e66:	f7ff fc0a 	bl	800367e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8003edc <xTaskIncrementTick+0x170>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d3b4      	bcc.n	8003de2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e7c:	e7b1      	b.n	8003de2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e7e:	4b17      	ldr	r3, [pc, #92]	@ (8003edc <xTaskIncrementTick+0x170>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e84:	4914      	ldr	r1, [pc, #80]	@ (8003ed8 <xTaskIncrementTick+0x16c>)
 8003e86:	4613      	mov	r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	4413      	add	r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	440b      	add	r3, r1
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d907      	bls.n	8003ea6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003e96:	2301      	movs	r3, #1
 8003e98:	617b      	str	r3, [r7, #20]
 8003e9a:	e004      	b.n	8003ea6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003e9c:	4b10      	ldr	r3, [pc, #64]	@ (8003ee0 <xTaskIncrementTick+0x174>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	4a0f      	ldr	r2, [pc, #60]	@ (8003ee0 <xTaskIncrementTick+0x174>)
 8003ea4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8003ee4 <xTaskIncrementTick+0x178>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d001      	beq.n	8003eb2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003eb2:	697b      	ldr	r3, [r7, #20]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3718      	adds	r7, #24
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	20000678 	.word	0x20000678
 8003ec0:	20000654 	.word	0x20000654
 8003ec4:	20000608 	.word	0x20000608
 8003ec8:	2000060c 	.word	0x2000060c
 8003ecc:	20000668 	.word	0x20000668
 8003ed0:	20000670 	.word	0x20000670
 8003ed4:	20000658 	.word	0x20000658
 8003ed8:	20000554 	.word	0x20000554
 8003edc:	20000550 	.word	0x20000550
 8003ee0:	20000660 	.word	0x20000660
 8003ee4:	20000664 	.word	0x20000664

08003ee8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b087      	sub	sp, #28
 8003eec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003eee:	4b29      	ldr	r3, [pc, #164]	@ (8003f94 <vTaskSwitchContext+0xac>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d003      	beq.n	8003efe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003ef6:	4b28      	ldr	r3, [pc, #160]	@ (8003f98 <vTaskSwitchContext+0xb0>)
 8003ef8:	2201      	movs	r2, #1
 8003efa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003efc:	e045      	b.n	8003f8a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8003efe:	4b26      	ldr	r3, [pc, #152]	@ (8003f98 <vTaskSwitchContext+0xb0>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003f04:	4b25      	ldr	r3, [pc, #148]	@ (8003f9c <vTaskSwitchContext+0xb4>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	fab3 f383 	clz	r3, r3
 8003f10:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003f12:	7afb      	ldrb	r3, [r7, #11]
 8003f14:	f1c3 031f 	rsb	r3, r3, #31
 8003f18:	617b      	str	r3, [r7, #20]
 8003f1a:	4921      	ldr	r1, [pc, #132]	@ (8003fa0 <vTaskSwitchContext+0xb8>)
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	440b      	add	r3, r1
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10b      	bne.n	8003f46 <vTaskSwitchContext+0x5e>
	__asm volatile
 8003f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f32:	f383 8811 	msr	BASEPRI, r3
 8003f36:	f3bf 8f6f 	isb	sy
 8003f3a:	f3bf 8f4f 	dsb	sy
 8003f3e:	607b      	str	r3, [r7, #4]
}
 8003f40:	bf00      	nop
 8003f42:	bf00      	nop
 8003f44:	e7fd      	b.n	8003f42 <vTaskSwitchContext+0x5a>
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4a13      	ldr	r2, [pc, #76]	@ (8003fa0 <vTaskSwitchContext+0xb8>)
 8003f52:	4413      	add	r3, r2
 8003f54:	613b      	str	r3, [r7, #16]
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	605a      	str	r2, [r3, #4]
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	685a      	ldr	r2, [r3, #4]
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	3308      	adds	r3, #8
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d104      	bne.n	8003f76 <vTaskSwitchContext+0x8e>
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	605a      	str	r2, [r3, #4]
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	4a09      	ldr	r2, [pc, #36]	@ (8003fa4 <vTaskSwitchContext+0xbc>)
 8003f7e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003f80:	4b08      	ldr	r3, [pc, #32]	@ (8003fa4 <vTaskSwitchContext+0xbc>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	334c      	adds	r3, #76	@ 0x4c
 8003f86:	4a08      	ldr	r2, [pc, #32]	@ (8003fa8 <vTaskSwitchContext+0xc0>)
 8003f88:	6013      	str	r3, [r2, #0]
}
 8003f8a:	bf00      	nop
 8003f8c:	371c      	adds	r7, #28
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bc80      	pop	{r7}
 8003f92:	4770      	bx	lr
 8003f94:	20000678 	.word	0x20000678
 8003f98:	20000664 	.word	0x20000664
 8003f9c:	20000658 	.word	0x20000658
 8003fa0:	20000554 	.word	0x20000554
 8003fa4:	20000550 	.word	0x20000550
 8003fa8:	20000018 	.word	0x20000018

08003fac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003fb4:	f000 f852 	bl	800405c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003fb8:	4b06      	ldr	r3, [pc, #24]	@ (8003fd4 <prvIdleTask+0x28>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d9f9      	bls.n	8003fb4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003fc0:	4b05      	ldr	r3, [pc, #20]	@ (8003fd8 <prvIdleTask+0x2c>)
 8003fc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fc6:	601a      	str	r2, [r3, #0]
 8003fc8:	f3bf 8f4f 	dsb	sy
 8003fcc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003fd0:	e7f0      	b.n	8003fb4 <prvIdleTask+0x8>
 8003fd2:	bf00      	nop
 8003fd4:	20000554 	.word	0x20000554
 8003fd8:	e000ed04 	.word	0xe000ed04

08003fdc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	607b      	str	r3, [r7, #4]
 8003fe6:	e00c      	b.n	8004002 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	4613      	mov	r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	4413      	add	r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	4a12      	ldr	r2, [pc, #72]	@ (800403c <prvInitialiseTaskLists+0x60>)
 8003ff4:	4413      	add	r3, r2
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7ff fb16 	bl	8003628 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	3301      	adds	r3, #1
 8004000:	607b      	str	r3, [r7, #4]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b06      	cmp	r3, #6
 8004006:	d9ef      	bls.n	8003fe8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004008:	480d      	ldr	r0, [pc, #52]	@ (8004040 <prvInitialiseTaskLists+0x64>)
 800400a:	f7ff fb0d 	bl	8003628 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800400e:	480d      	ldr	r0, [pc, #52]	@ (8004044 <prvInitialiseTaskLists+0x68>)
 8004010:	f7ff fb0a 	bl	8003628 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004014:	480c      	ldr	r0, [pc, #48]	@ (8004048 <prvInitialiseTaskLists+0x6c>)
 8004016:	f7ff fb07 	bl	8003628 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800401a:	480c      	ldr	r0, [pc, #48]	@ (800404c <prvInitialiseTaskLists+0x70>)
 800401c:	f7ff fb04 	bl	8003628 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004020:	480b      	ldr	r0, [pc, #44]	@ (8004050 <prvInitialiseTaskLists+0x74>)
 8004022:	f7ff fb01 	bl	8003628 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004026:	4b0b      	ldr	r3, [pc, #44]	@ (8004054 <prvInitialiseTaskLists+0x78>)
 8004028:	4a05      	ldr	r2, [pc, #20]	@ (8004040 <prvInitialiseTaskLists+0x64>)
 800402a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800402c:	4b0a      	ldr	r3, [pc, #40]	@ (8004058 <prvInitialiseTaskLists+0x7c>)
 800402e:	4a05      	ldr	r2, [pc, #20]	@ (8004044 <prvInitialiseTaskLists+0x68>)
 8004030:	601a      	str	r2, [r3, #0]
}
 8004032:	bf00      	nop
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	20000554 	.word	0x20000554
 8004040:	200005e0 	.word	0x200005e0
 8004044:	200005f4 	.word	0x200005f4
 8004048:	20000610 	.word	0x20000610
 800404c:	20000624 	.word	0x20000624
 8004050:	2000063c 	.word	0x2000063c
 8004054:	20000608 	.word	0x20000608
 8004058:	2000060c 	.word	0x2000060c

0800405c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004062:	e019      	b.n	8004098 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004064:	f000 f9da 	bl	800441c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004068:	4b10      	ldr	r3, [pc, #64]	@ (80040ac <prvCheckTasksWaitingTermination+0x50>)
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	3304      	adds	r3, #4
 8004074:	4618      	mov	r0, r3
 8004076:	f7ff fb5d 	bl	8003734 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800407a:	4b0d      	ldr	r3, [pc, #52]	@ (80040b0 <prvCheckTasksWaitingTermination+0x54>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	3b01      	subs	r3, #1
 8004080:	4a0b      	ldr	r2, [pc, #44]	@ (80040b0 <prvCheckTasksWaitingTermination+0x54>)
 8004082:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004084:	4b0b      	ldr	r3, [pc, #44]	@ (80040b4 <prvCheckTasksWaitingTermination+0x58>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	3b01      	subs	r3, #1
 800408a:	4a0a      	ldr	r2, [pc, #40]	@ (80040b4 <prvCheckTasksWaitingTermination+0x58>)
 800408c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800408e:	f000 f9f5 	bl	800447c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f810 	bl	80040b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004098:	4b06      	ldr	r3, [pc, #24]	@ (80040b4 <prvCheckTasksWaitingTermination+0x58>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1e1      	bne.n	8004064 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80040a0:	bf00      	nop
 80040a2:	bf00      	nop
 80040a4:	3708      	adds	r7, #8
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	20000624 	.word	0x20000624
 80040b0:	20000650 	.word	0x20000650
 80040b4:	20000638 	.word	0x20000638

080040b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	334c      	adds	r3, #76	@ 0x4c
 80040c4:	4618      	mov	r0, r3
 80040c6:	f000 fce5 	bl	8004a94 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d108      	bne.n	80040e6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d8:	4618      	mov	r0, r3
 80040da:	f000 fb29 	bl	8004730 <vPortFree>
				vPortFree( pxTCB );
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 fb26 	bl	8004730 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80040e4:	e019      	b.n	800411a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d103      	bne.n	80040f8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 fb1d 	bl	8004730 <vPortFree>
	}
 80040f6:	e010      	b.n	800411a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d00b      	beq.n	800411a <prvDeleteTCB+0x62>
	__asm volatile
 8004102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004106:	f383 8811 	msr	BASEPRI, r3
 800410a:	f3bf 8f6f 	isb	sy
 800410e:	f3bf 8f4f 	dsb	sy
 8004112:	60fb      	str	r3, [r7, #12]
}
 8004114:	bf00      	nop
 8004116:	bf00      	nop
 8004118:	e7fd      	b.n	8004116 <prvDeleteTCB+0x5e>
	}
 800411a:	bf00      	nop
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
	...

08004124 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800412a:	4b0e      	ldr	r3, [pc, #56]	@ (8004164 <prvResetNextTaskUnblockTime+0x40>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d101      	bne.n	8004138 <prvResetNextTaskUnblockTime+0x14>
 8004134:	2301      	movs	r3, #1
 8004136:	e000      	b.n	800413a <prvResetNextTaskUnblockTime+0x16>
 8004138:	2300      	movs	r3, #0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d004      	beq.n	8004148 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800413e:	4b0a      	ldr	r3, [pc, #40]	@ (8004168 <prvResetNextTaskUnblockTime+0x44>)
 8004140:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004144:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004146:	e008      	b.n	800415a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004148:	4b06      	ldr	r3, [pc, #24]	@ (8004164 <prvResetNextTaskUnblockTime+0x40>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	4a04      	ldr	r2, [pc, #16]	@ (8004168 <prvResetNextTaskUnblockTime+0x44>)
 8004158:	6013      	str	r3, [r2, #0]
}
 800415a:	bf00      	nop
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	bc80      	pop	{r7}
 8004162:	4770      	bx	lr
 8004164:	20000608 	.word	0x20000608
 8004168:	20000670 	.word	0x20000670

0800416c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004176:	4b29      	ldr	r3, [pc, #164]	@ (800421c <prvAddCurrentTaskToDelayedList+0xb0>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800417c:	4b28      	ldr	r3, [pc, #160]	@ (8004220 <prvAddCurrentTaskToDelayedList+0xb4>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	3304      	adds	r3, #4
 8004182:	4618      	mov	r0, r3
 8004184:	f7ff fad6 	bl	8003734 <uxListRemove>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d10b      	bne.n	80041a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800418e:	4b24      	ldr	r3, [pc, #144]	@ (8004220 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004194:	2201      	movs	r2, #1
 8004196:	fa02 f303 	lsl.w	r3, r2, r3
 800419a:	43da      	mvns	r2, r3
 800419c:	4b21      	ldr	r3, [pc, #132]	@ (8004224 <prvAddCurrentTaskToDelayedList+0xb8>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4013      	ands	r3, r2
 80041a2:	4a20      	ldr	r2, [pc, #128]	@ (8004224 <prvAddCurrentTaskToDelayedList+0xb8>)
 80041a4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041ac:	d10a      	bne.n	80041c4 <prvAddCurrentTaskToDelayedList+0x58>
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d007      	beq.n	80041c4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041b4:	4b1a      	ldr	r3, [pc, #104]	@ (8004220 <prvAddCurrentTaskToDelayedList+0xb4>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	3304      	adds	r3, #4
 80041ba:	4619      	mov	r1, r3
 80041bc:	481a      	ldr	r0, [pc, #104]	@ (8004228 <prvAddCurrentTaskToDelayedList+0xbc>)
 80041be:	f7ff fa5e 	bl	800367e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80041c2:	e026      	b.n	8004212 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4413      	add	r3, r2
 80041ca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80041cc:	4b14      	ldr	r3, [pc, #80]	@ (8004220 <prvAddCurrentTaskToDelayedList+0xb4>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80041d4:	68ba      	ldr	r2, [r7, #8]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d209      	bcs.n	80041f0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041dc:	4b13      	ldr	r3, [pc, #76]	@ (800422c <prvAddCurrentTaskToDelayedList+0xc0>)
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	4b0f      	ldr	r3, [pc, #60]	@ (8004220 <prvAddCurrentTaskToDelayedList+0xb4>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3304      	adds	r3, #4
 80041e6:	4619      	mov	r1, r3
 80041e8:	4610      	mov	r0, r2
 80041ea:	f7ff fa6b 	bl	80036c4 <vListInsert>
}
 80041ee:	e010      	b.n	8004212 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041f0:	4b0f      	ldr	r3, [pc, #60]	@ (8004230 <prvAddCurrentTaskToDelayedList+0xc4>)
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	4b0a      	ldr	r3, [pc, #40]	@ (8004220 <prvAddCurrentTaskToDelayedList+0xb4>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	3304      	adds	r3, #4
 80041fa:	4619      	mov	r1, r3
 80041fc:	4610      	mov	r0, r2
 80041fe:	f7ff fa61 	bl	80036c4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004202:	4b0c      	ldr	r3, [pc, #48]	@ (8004234 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	429a      	cmp	r2, r3
 800420a:	d202      	bcs.n	8004212 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800420c:	4a09      	ldr	r2, [pc, #36]	@ (8004234 <prvAddCurrentTaskToDelayedList+0xc8>)
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	6013      	str	r3, [r2, #0]
}
 8004212:	bf00      	nop
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	20000654 	.word	0x20000654
 8004220:	20000550 	.word	0x20000550
 8004224:	20000658 	.word	0x20000658
 8004228:	2000063c 	.word	0x2000063c
 800422c:	2000060c 	.word	0x2000060c
 8004230:	20000608 	.word	0x20000608
 8004234:	20000670 	.word	0x20000670

08004238 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	3b04      	subs	r3, #4
 8004248:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004250:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	3b04      	subs	r3, #4
 8004256:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	f023 0201 	bic.w	r2, r3, #1
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	3b04      	subs	r3, #4
 8004266:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004268:	4a08      	ldr	r2, [pc, #32]	@ (800428c <pxPortInitialiseStack+0x54>)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	3b14      	subs	r3, #20
 8004272:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	3b20      	subs	r3, #32
 800427e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004280:	68fb      	ldr	r3, [r7, #12]
}
 8004282:	4618      	mov	r0, r3
 8004284:	3714      	adds	r7, #20
 8004286:	46bd      	mov	sp, r7
 8004288:	bc80      	pop	{r7}
 800428a:	4770      	bx	lr
 800428c:	08004291 	.word	0x08004291

08004290 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004296:	2300      	movs	r3, #0
 8004298:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800429a:	4b12      	ldr	r3, [pc, #72]	@ (80042e4 <prvTaskExitError+0x54>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80042a2:	d00b      	beq.n	80042bc <prvTaskExitError+0x2c>
	__asm volatile
 80042a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042a8:	f383 8811 	msr	BASEPRI, r3
 80042ac:	f3bf 8f6f 	isb	sy
 80042b0:	f3bf 8f4f 	dsb	sy
 80042b4:	60fb      	str	r3, [r7, #12]
}
 80042b6:	bf00      	nop
 80042b8:	bf00      	nop
 80042ba:	e7fd      	b.n	80042b8 <prvTaskExitError+0x28>
	__asm volatile
 80042bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042c0:	f383 8811 	msr	BASEPRI, r3
 80042c4:	f3bf 8f6f 	isb	sy
 80042c8:	f3bf 8f4f 	dsb	sy
 80042cc:	60bb      	str	r3, [r7, #8]
}
 80042ce:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80042d0:	bf00      	nop
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d0fc      	beq.n	80042d2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80042d8:	bf00      	nop
 80042da:	bf00      	nop
 80042dc:	3714      	adds	r7, #20
 80042de:	46bd      	mov	sp, r7
 80042e0:	bc80      	pop	{r7}
 80042e2:	4770      	bx	lr
 80042e4:	20000014 	.word	0x20000014
	...

080042f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80042f0:	4b07      	ldr	r3, [pc, #28]	@ (8004310 <pxCurrentTCBConst2>)
 80042f2:	6819      	ldr	r1, [r3, #0]
 80042f4:	6808      	ldr	r0, [r1, #0]
 80042f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80042fa:	f380 8809 	msr	PSP, r0
 80042fe:	f3bf 8f6f 	isb	sy
 8004302:	f04f 0000 	mov.w	r0, #0
 8004306:	f380 8811 	msr	BASEPRI, r0
 800430a:	f04e 0e0d 	orr.w	lr, lr, #13
 800430e:	4770      	bx	lr

08004310 <pxCurrentTCBConst2>:
 8004310:	20000550 	.word	0x20000550
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004314:	bf00      	nop
 8004316:	bf00      	nop

08004318 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004318:	4806      	ldr	r0, [pc, #24]	@ (8004334 <prvPortStartFirstTask+0x1c>)
 800431a:	6800      	ldr	r0, [r0, #0]
 800431c:	6800      	ldr	r0, [r0, #0]
 800431e:	f380 8808 	msr	MSP, r0
 8004322:	b662      	cpsie	i
 8004324:	b661      	cpsie	f
 8004326:	f3bf 8f4f 	dsb	sy
 800432a:	f3bf 8f6f 	isb	sy
 800432e:	df00      	svc	0
 8004330:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004332:	bf00      	nop
 8004334:	e000ed08 	.word	0xe000ed08

08004338 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800433e:	4b32      	ldr	r3, [pc, #200]	@ (8004408 <xPortStartScheduler+0xd0>)
 8004340:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	b2db      	uxtb	r3, r3
 8004348:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	22ff      	movs	r2, #255	@ 0xff
 800434e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	b2db      	uxtb	r3, r3
 8004356:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004358:	78fb      	ldrb	r3, [r7, #3]
 800435a:	b2db      	uxtb	r3, r3
 800435c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004360:	b2da      	uxtb	r2, r3
 8004362:	4b2a      	ldr	r3, [pc, #168]	@ (800440c <xPortStartScheduler+0xd4>)
 8004364:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004366:	4b2a      	ldr	r3, [pc, #168]	@ (8004410 <xPortStartScheduler+0xd8>)
 8004368:	2207      	movs	r2, #7
 800436a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800436c:	e009      	b.n	8004382 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800436e:	4b28      	ldr	r3, [pc, #160]	@ (8004410 <xPortStartScheduler+0xd8>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	3b01      	subs	r3, #1
 8004374:	4a26      	ldr	r2, [pc, #152]	@ (8004410 <xPortStartScheduler+0xd8>)
 8004376:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004378:	78fb      	ldrb	r3, [r7, #3]
 800437a:	b2db      	uxtb	r3, r3
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	b2db      	uxtb	r3, r3
 8004380:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004382:	78fb      	ldrb	r3, [r7, #3]
 8004384:	b2db      	uxtb	r3, r3
 8004386:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800438a:	2b80      	cmp	r3, #128	@ 0x80
 800438c:	d0ef      	beq.n	800436e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800438e:	4b20      	ldr	r3, [pc, #128]	@ (8004410 <xPortStartScheduler+0xd8>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f1c3 0307 	rsb	r3, r3, #7
 8004396:	2b04      	cmp	r3, #4
 8004398:	d00b      	beq.n	80043b2 <xPortStartScheduler+0x7a>
	__asm volatile
 800439a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800439e:	f383 8811 	msr	BASEPRI, r3
 80043a2:	f3bf 8f6f 	isb	sy
 80043a6:	f3bf 8f4f 	dsb	sy
 80043aa:	60bb      	str	r3, [r7, #8]
}
 80043ac:	bf00      	nop
 80043ae:	bf00      	nop
 80043b0:	e7fd      	b.n	80043ae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80043b2:	4b17      	ldr	r3, [pc, #92]	@ (8004410 <xPortStartScheduler+0xd8>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	021b      	lsls	r3, r3, #8
 80043b8:	4a15      	ldr	r2, [pc, #84]	@ (8004410 <xPortStartScheduler+0xd8>)
 80043ba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80043bc:	4b14      	ldr	r3, [pc, #80]	@ (8004410 <xPortStartScheduler+0xd8>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80043c4:	4a12      	ldr	r2, [pc, #72]	@ (8004410 <xPortStartScheduler+0xd8>)
 80043c6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80043d0:	4b10      	ldr	r3, [pc, #64]	@ (8004414 <xPortStartScheduler+0xdc>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a0f      	ldr	r2, [pc, #60]	@ (8004414 <xPortStartScheduler+0xdc>)
 80043d6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80043da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80043dc:	4b0d      	ldr	r3, [pc, #52]	@ (8004414 <xPortStartScheduler+0xdc>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a0c      	ldr	r2, [pc, #48]	@ (8004414 <xPortStartScheduler+0xdc>)
 80043e2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80043e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80043e8:	f000 f8b8 	bl	800455c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80043ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004418 <xPortStartScheduler+0xe0>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80043f2:	f7ff ff91 	bl	8004318 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80043f6:	f7ff fd77 	bl	8003ee8 <vTaskSwitchContext>
	prvTaskExitError();
 80043fa:	f7ff ff49 	bl	8004290 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	e000e400 	.word	0xe000e400
 800440c:	2000067c 	.word	0x2000067c
 8004410:	20000680 	.word	0x20000680
 8004414:	e000ed20 	.word	0xe000ed20
 8004418:	20000014 	.word	0x20000014

0800441c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
	__asm volatile
 8004422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004426:	f383 8811 	msr	BASEPRI, r3
 800442a:	f3bf 8f6f 	isb	sy
 800442e:	f3bf 8f4f 	dsb	sy
 8004432:	607b      	str	r3, [r7, #4]
}
 8004434:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004436:	4b0f      	ldr	r3, [pc, #60]	@ (8004474 <vPortEnterCritical+0x58>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	3301      	adds	r3, #1
 800443c:	4a0d      	ldr	r2, [pc, #52]	@ (8004474 <vPortEnterCritical+0x58>)
 800443e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004440:	4b0c      	ldr	r3, [pc, #48]	@ (8004474 <vPortEnterCritical+0x58>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d110      	bne.n	800446a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004448:	4b0b      	ldr	r3, [pc, #44]	@ (8004478 <vPortEnterCritical+0x5c>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00b      	beq.n	800446a <vPortEnterCritical+0x4e>
	__asm volatile
 8004452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004456:	f383 8811 	msr	BASEPRI, r3
 800445a:	f3bf 8f6f 	isb	sy
 800445e:	f3bf 8f4f 	dsb	sy
 8004462:	603b      	str	r3, [r7, #0]
}
 8004464:	bf00      	nop
 8004466:	bf00      	nop
 8004468:	e7fd      	b.n	8004466 <vPortEnterCritical+0x4a>
	}
}
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	bc80      	pop	{r7}
 8004472:	4770      	bx	lr
 8004474:	20000014 	.word	0x20000014
 8004478:	e000ed04 	.word	0xe000ed04

0800447c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004482:	4b12      	ldr	r3, [pc, #72]	@ (80044cc <vPortExitCritical+0x50>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10b      	bne.n	80044a2 <vPortExitCritical+0x26>
	__asm volatile
 800448a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800448e:	f383 8811 	msr	BASEPRI, r3
 8004492:	f3bf 8f6f 	isb	sy
 8004496:	f3bf 8f4f 	dsb	sy
 800449a:	607b      	str	r3, [r7, #4]
}
 800449c:	bf00      	nop
 800449e:	bf00      	nop
 80044a0:	e7fd      	b.n	800449e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80044a2:	4b0a      	ldr	r3, [pc, #40]	@ (80044cc <vPortExitCritical+0x50>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	3b01      	subs	r3, #1
 80044a8:	4a08      	ldr	r2, [pc, #32]	@ (80044cc <vPortExitCritical+0x50>)
 80044aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80044ac:	4b07      	ldr	r3, [pc, #28]	@ (80044cc <vPortExitCritical+0x50>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d105      	bne.n	80044c0 <vPortExitCritical+0x44>
 80044b4:	2300      	movs	r3, #0
 80044b6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80044be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bc80      	pop	{r7}
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	20000014 	.word	0x20000014

080044d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80044d0:	f3ef 8009 	mrs	r0, PSP
 80044d4:	f3bf 8f6f 	isb	sy
 80044d8:	4b0d      	ldr	r3, [pc, #52]	@ (8004510 <pxCurrentTCBConst>)
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80044e0:	6010      	str	r0, [r2, #0]
 80044e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80044e6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80044ea:	f380 8811 	msr	BASEPRI, r0
 80044ee:	f7ff fcfb 	bl	8003ee8 <vTaskSwitchContext>
 80044f2:	f04f 0000 	mov.w	r0, #0
 80044f6:	f380 8811 	msr	BASEPRI, r0
 80044fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80044fe:	6819      	ldr	r1, [r3, #0]
 8004500:	6808      	ldr	r0, [r1, #0]
 8004502:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004506:	f380 8809 	msr	PSP, r0
 800450a:	f3bf 8f6f 	isb	sy
 800450e:	4770      	bx	lr

08004510 <pxCurrentTCBConst>:
 8004510:	20000550 	.word	0x20000550
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004514:	bf00      	nop
 8004516:	bf00      	nop

08004518 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
	__asm volatile
 800451e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004522:	f383 8811 	msr	BASEPRI, r3
 8004526:	f3bf 8f6f 	isb	sy
 800452a:	f3bf 8f4f 	dsb	sy
 800452e:	607b      	str	r3, [r7, #4]
}
 8004530:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004532:	f7ff fc1b 	bl	8003d6c <xTaskIncrementTick>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d003      	beq.n	8004544 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800453c:	4b06      	ldr	r3, [pc, #24]	@ (8004558 <SysTick_Handler+0x40>)
 800453e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004542:	601a      	str	r2, [r3, #0]
 8004544:	2300      	movs	r3, #0
 8004546:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	f383 8811 	msr	BASEPRI, r3
}
 800454e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004550:	bf00      	nop
 8004552:	3708      	adds	r7, #8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	e000ed04 	.word	0xe000ed04

0800455c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800455c:	b480      	push	{r7}
 800455e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004560:	4b0a      	ldr	r3, [pc, #40]	@ (800458c <vPortSetupTimerInterrupt+0x30>)
 8004562:	2200      	movs	r2, #0
 8004564:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004566:	4b0a      	ldr	r3, [pc, #40]	@ (8004590 <vPortSetupTimerInterrupt+0x34>)
 8004568:	2200      	movs	r2, #0
 800456a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800456c:	4b09      	ldr	r3, [pc, #36]	@ (8004594 <vPortSetupTimerInterrupt+0x38>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a09      	ldr	r2, [pc, #36]	@ (8004598 <vPortSetupTimerInterrupt+0x3c>)
 8004572:	fba2 2303 	umull	r2, r3, r2, r3
 8004576:	099b      	lsrs	r3, r3, #6
 8004578:	4a08      	ldr	r2, [pc, #32]	@ (800459c <vPortSetupTimerInterrupt+0x40>)
 800457a:	3b01      	subs	r3, #1
 800457c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800457e:	4b03      	ldr	r3, [pc, #12]	@ (800458c <vPortSetupTimerInterrupt+0x30>)
 8004580:	2207      	movs	r2, #7
 8004582:	601a      	str	r2, [r3, #0]
}
 8004584:	bf00      	nop
 8004586:	46bd      	mov	sp, r7
 8004588:	bc80      	pop	{r7}
 800458a:	4770      	bx	lr
 800458c:	e000e010 	.word	0xe000e010
 8004590:	e000e018 	.word	0xe000e018
 8004594:	20000008 	.word	0x20000008
 8004598:	10624dd3 	.word	0x10624dd3
 800459c:	e000e014 	.word	0xe000e014

080045a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b08a      	sub	sp, #40	@ 0x28
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80045a8:	2300      	movs	r3, #0
 80045aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80045ac:	f7ff fb32 	bl	8003c14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80045b0:	4b5a      	ldr	r3, [pc, #360]	@ (800471c <pvPortMalloc+0x17c>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d101      	bne.n	80045bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80045b8:	f000 f916 	bl	80047e8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80045bc:	4b58      	ldr	r3, [pc, #352]	@ (8004720 <pvPortMalloc+0x180>)
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4013      	ands	r3, r2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f040 8090 	bne.w	80046ea <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d01e      	beq.n	800460e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80045d0:	2208      	movs	r2, #8
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4413      	add	r3, r2
 80045d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f003 0307 	and.w	r3, r3, #7
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d015      	beq.n	800460e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f023 0307 	bic.w	r3, r3, #7
 80045e8:	3308      	adds	r3, #8
 80045ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f003 0307 	and.w	r3, r3, #7
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00b      	beq.n	800460e <pvPortMalloc+0x6e>
	__asm volatile
 80045f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045fa:	f383 8811 	msr	BASEPRI, r3
 80045fe:	f3bf 8f6f 	isb	sy
 8004602:	f3bf 8f4f 	dsb	sy
 8004606:	617b      	str	r3, [r7, #20]
}
 8004608:	bf00      	nop
 800460a:	bf00      	nop
 800460c:	e7fd      	b.n	800460a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d06a      	beq.n	80046ea <pvPortMalloc+0x14a>
 8004614:	4b43      	ldr	r3, [pc, #268]	@ (8004724 <pvPortMalloc+0x184>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	429a      	cmp	r2, r3
 800461c:	d865      	bhi.n	80046ea <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800461e:	4b42      	ldr	r3, [pc, #264]	@ (8004728 <pvPortMalloc+0x188>)
 8004620:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004622:	4b41      	ldr	r3, [pc, #260]	@ (8004728 <pvPortMalloc+0x188>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004628:	e004      	b.n	8004634 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800462a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800462c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800462e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	429a      	cmp	r2, r3
 800463c:	d903      	bls.n	8004646 <pvPortMalloc+0xa6>
 800463e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1f1      	bne.n	800462a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004646:	4b35      	ldr	r3, [pc, #212]	@ (800471c <pvPortMalloc+0x17c>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800464c:	429a      	cmp	r2, r3
 800464e:	d04c      	beq.n	80046ea <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004650:	6a3b      	ldr	r3, [r7, #32]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2208      	movs	r2, #8
 8004656:	4413      	add	r3, r2
 8004658:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800465a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	6a3b      	ldr	r3, [r7, #32]
 8004660:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	1ad2      	subs	r2, r2, r3
 800466a:	2308      	movs	r3, #8
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	429a      	cmp	r2, r3
 8004670:	d920      	bls.n	80046b4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004672:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4413      	add	r3, r2
 8004678:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	f003 0307 	and.w	r3, r3, #7
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00b      	beq.n	800469c <pvPortMalloc+0xfc>
	__asm volatile
 8004684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004688:	f383 8811 	msr	BASEPRI, r3
 800468c:	f3bf 8f6f 	isb	sy
 8004690:	f3bf 8f4f 	dsb	sy
 8004694:	613b      	str	r3, [r7, #16]
}
 8004696:	bf00      	nop
 8004698:	bf00      	nop
 800469a:	e7fd      	b.n	8004698 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800469c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	1ad2      	subs	r2, r2, r3
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80046a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80046ae:	69b8      	ldr	r0, [r7, #24]
 80046b0:	f000 f8fc 	bl	80048ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80046b4:	4b1b      	ldr	r3, [pc, #108]	@ (8004724 <pvPortMalloc+0x184>)
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	4a19      	ldr	r2, [pc, #100]	@ (8004724 <pvPortMalloc+0x184>)
 80046c0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80046c2:	4b18      	ldr	r3, [pc, #96]	@ (8004724 <pvPortMalloc+0x184>)
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	4b19      	ldr	r3, [pc, #100]	@ (800472c <pvPortMalloc+0x18c>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d203      	bcs.n	80046d6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80046ce:	4b15      	ldr	r3, [pc, #84]	@ (8004724 <pvPortMalloc+0x184>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a16      	ldr	r2, [pc, #88]	@ (800472c <pvPortMalloc+0x18c>)
 80046d4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80046d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d8:	685a      	ldr	r2, [r3, #4]
 80046da:	4b11      	ldr	r3, [pc, #68]	@ (8004720 <pvPortMalloc+0x180>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	431a      	orrs	r2, r3
 80046e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80046e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e6:	2200      	movs	r2, #0
 80046e8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80046ea:	f7ff faa1 	bl	8003c30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	f003 0307 	and.w	r3, r3, #7
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00b      	beq.n	8004710 <pvPortMalloc+0x170>
	__asm volatile
 80046f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046fc:	f383 8811 	msr	BASEPRI, r3
 8004700:	f3bf 8f6f 	isb	sy
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	60fb      	str	r3, [r7, #12]
}
 800470a:	bf00      	nop
 800470c:	bf00      	nop
 800470e:	e7fd      	b.n	800470c <pvPortMalloc+0x16c>
	return pvReturn;
 8004710:	69fb      	ldr	r3, [r7, #28]
}
 8004712:	4618      	mov	r0, r3
 8004714:	3728      	adds	r7, #40	@ 0x28
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	20001e8c 	.word	0x20001e8c
 8004720:	20001e98 	.word	0x20001e98
 8004724:	20001e90 	.word	0x20001e90
 8004728:	20001e84 	.word	0x20001e84
 800472c:	20001e94 	.word	0x20001e94

08004730 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d04a      	beq.n	80047d8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004742:	2308      	movs	r3, #8
 8004744:	425b      	negs	r3, r3
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	4413      	add	r3, r2
 800474a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	4b22      	ldr	r3, [pc, #136]	@ (80047e0 <vPortFree+0xb0>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4013      	ands	r3, r2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10b      	bne.n	8004776 <vPortFree+0x46>
	__asm volatile
 800475e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004762:	f383 8811 	msr	BASEPRI, r3
 8004766:	f3bf 8f6f 	isb	sy
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	60fb      	str	r3, [r7, #12]
}
 8004770:	bf00      	nop
 8004772:	bf00      	nop
 8004774:	e7fd      	b.n	8004772 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00b      	beq.n	8004796 <vPortFree+0x66>
	__asm volatile
 800477e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004782:	f383 8811 	msr	BASEPRI, r3
 8004786:	f3bf 8f6f 	isb	sy
 800478a:	f3bf 8f4f 	dsb	sy
 800478e:	60bb      	str	r3, [r7, #8]
}
 8004790:	bf00      	nop
 8004792:	bf00      	nop
 8004794:	e7fd      	b.n	8004792 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	685a      	ldr	r2, [r3, #4]
 800479a:	4b11      	ldr	r3, [pc, #68]	@ (80047e0 <vPortFree+0xb0>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4013      	ands	r3, r2
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d019      	beq.n	80047d8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d115      	bne.n	80047d8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	4b0b      	ldr	r3, [pc, #44]	@ (80047e0 <vPortFree+0xb0>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	43db      	mvns	r3, r3
 80047b6:	401a      	ands	r2, r3
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80047bc:	f7ff fa2a 	bl	8003c14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	685a      	ldr	r2, [r3, #4]
 80047c4:	4b07      	ldr	r3, [pc, #28]	@ (80047e4 <vPortFree+0xb4>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4413      	add	r3, r2
 80047ca:	4a06      	ldr	r2, [pc, #24]	@ (80047e4 <vPortFree+0xb4>)
 80047cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80047ce:	6938      	ldr	r0, [r7, #16]
 80047d0:	f000 f86c 	bl	80048ac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80047d4:	f7ff fa2c 	bl	8003c30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80047d8:	bf00      	nop
 80047da:	3718      	adds	r7, #24
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	20001e98 	.word	0x20001e98
 80047e4:	20001e90 	.word	0x20001e90

080047e8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80047ee:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80047f2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80047f4:	4b27      	ldr	r3, [pc, #156]	@ (8004894 <prvHeapInit+0xac>)
 80047f6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f003 0307 	and.w	r3, r3, #7
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00c      	beq.n	800481c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	3307      	adds	r3, #7
 8004806:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f023 0307 	bic.w	r3, r3, #7
 800480e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004810:	68ba      	ldr	r2, [r7, #8]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	4a1f      	ldr	r2, [pc, #124]	@ (8004894 <prvHeapInit+0xac>)
 8004818:	4413      	add	r3, r2
 800481a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004820:	4a1d      	ldr	r2, [pc, #116]	@ (8004898 <prvHeapInit+0xb0>)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004826:	4b1c      	ldr	r3, [pc, #112]	@ (8004898 <prvHeapInit+0xb0>)
 8004828:	2200      	movs	r2, #0
 800482a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68ba      	ldr	r2, [r7, #8]
 8004830:	4413      	add	r3, r2
 8004832:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004834:	2208      	movs	r2, #8
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	1a9b      	subs	r3, r3, r2
 800483a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f023 0307 	bic.w	r3, r3, #7
 8004842:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4a15      	ldr	r2, [pc, #84]	@ (800489c <prvHeapInit+0xb4>)
 8004848:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800484a:	4b14      	ldr	r3, [pc, #80]	@ (800489c <prvHeapInit+0xb4>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2200      	movs	r2, #0
 8004850:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004852:	4b12      	ldr	r3, [pc, #72]	@ (800489c <prvHeapInit+0xb4>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2200      	movs	r2, #0
 8004858:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	1ad2      	subs	r2, r2, r3
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004868:	4b0c      	ldr	r3, [pc, #48]	@ (800489c <prvHeapInit+0xb4>)
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	4a0a      	ldr	r2, [pc, #40]	@ (80048a0 <prvHeapInit+0xb8>)
 8004876:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	4a09      	ldr	r2, [pc, #36]	@ (80048a4 <prvHeapInit+0xbc>)
 800487e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004880:	4b09      	ldr	r3, [pc, #36]	@ (80048a8 <prvHeapInit+0xc0>)
 8004882:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004886:	601a      	str	r2, [r3, #0]
}
 8004888:	bf00      	nop
 800488a:	3714      	adds	r7, #20
 800488c:	46bd      	mov	sp, r7
 800488e:	bc80      	pop	{r7}
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	20000684 	.word	0x20000684
 8004898:	20001e84 	.word	0x20001e84
 800489c:	20001e8c 	.word	0x20001e8c
 80048a0:	20001e94 	.word	0x20001e94
 80048a4:	20001e90 	.word	0x20001e90
 80048a8:	20001e98 	.word	0x20001e98

080048ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80048b4:	4b27      	ldr	r3, [pc, #156]	@ (8004954 <prvInsertBlockIntoFreeList+0xa8>)
 80048b6:	60fb      	str	r3, [r7, #12]
 80048b8:	e002      	b.n	80048c0 <prvInsertBlockIntoFreeList+0x14>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	60fb      	str	r3, [r7, #12]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d8f7      	bhi.n	80048ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	4413      	add	r3, r2
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d108      	bne.n	80048ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	685a      	ldr	r2, [r3, #4]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	441a      	add	r2, r3
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	441a      	add	r2, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d118      	bne.n	8004934 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	4b14      	ldr	r3, [pc, #80]	@ (8004958 <prvInsertBlockIntoFreeList+0xac>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	429a      	cmp	r2, r3
 800490c:	d00d      	beq.n	800492a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	441a      	add	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	601a      	str	r2, [r3, #0]
 8004928:	e008      	b.n	800493c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800492a:	4b0b      	ldr	r3, [pc, #44]	@ (8004958 <prvInsertBlockIntoFreeList+0xac>)
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	601a      	str	r2, [r3, #0]
 8004932:	e003      	b.n	800493c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	429a      	cmp	r2, r3
 8004942:	d002      	beq.n	800494a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800494a:	bf00      	nop
 800494c:	3714      	adds	r7, #20
 800494e:	46bd      	mov	sp, r7
 8004950:	bc80      	pop	{r7}
 8004952:	4770      	bx	lr
 8004954:	20001e84 	.word	0x20001e84
 8004958:	20001e8c 	.word	0x20001e8c

0800495c <atoi>:
 800495c:	220a      	movs	r2, #10
 800495e:	2100      	movs	r1, #0
 8004960:	f000 b886 	b.w	8004a70 <strtol>

08004964 <__malloc_lock>:
 8004964:	4801      	ldr	r0, [pc, #4]	@ (800496c <__malloc_lock+0x8>)
 8004966:	f000 b915 	b.w	8004b94 <__retarget_lock_acquire_recursive>
 800496a:	bf00      	nop
 800496c:	20001fd8 	.word	0x20001fd8

08004970 <__malloc_unlock>:
 8004970:	4801      	ldr	r0, [pc, #4]	@ (8004978 <__malloc_unlock+0x8>)
 8004972:	f000 b910 	b.w	8004b96 <__retarget_lock_release_recursive>
 8004976:	bf00      	nop
 8004978:	20001fd8 	.word	0x20001fd8

0800497c <_strtol_l.constprop.0>:
 800497c:	2b24      	cmp	r3, #36	@ 0x24
 800497e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004982:	4686      	mov	lr, r0
 8004984:	4690      	mov	r8, r2
 8004986:	d801      	bhi.n	800498c <_strtol_l.constprop.0+0x10>
 8004988:	2b01      	cmp	r3, #1
 800498a:	d106      	bne.n	800499a <_strtol_l.constprop.0+0x1e>
 800498c:	f000 f8d8 	bl	8004b40 <__errno>
 8004990:	2316      	movs	r3, #22
 8004992:	6003      	str	r3, [r0, #0]
 8004994:	2000      	movs	r0, #0
 8004996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800499a:	460d      	mov	r5, r1
 800499c:	4833      	ldr	r0, [pc, #204]	@ (8004a6c <_strtol_l.constprop.0+0xf0>)
 800499e:	462a      	mov	r2, r5
 80049a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80049a4:	5d06      	ldrb	r6, [r0, r4]
 80049a6:	f016 0608 	ands.w	r6, r6, #8
 80049aa:	d1f8      	bne.n	800499e <_strtol_l.constprop.0+0x22>
 80049ac:	2c2d      	cmp	r4, #45	@ 0x2d
 80049ae:	d12d      	bne.n	8004a0c <_strtol_l.constprop.0+0x90>
 80049b0:	2601      	movs	r6, #1
 80049b2:	782c      	ldrb	r4, [r5, #0]
 80049b4:	1c95      	adds	r5, r2, #2
 80049b6:	f033 0210 	bics.w	r2, r3, #16
 80049ba:	d109      	bne.n	80049d0 <_strtol_l.constprop.0+0x54>
 80049bc:	2c30      	cmp	r4, #48	@ 0x30
 80049be:	d12a      	bne.n	8004a16 <_strtol_l.constprop.0+0x9a>
 80049c0:	782a      	ldrb	r2, [r5, #0]
 80049c2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80049c6:	2a58      	cmp	r2, #88	@ 0x58
 80049c8:	d125      	bne.n	8004a16 <_strtol_l.constprop.0+0x9a>
 80049ca:	2310      	movs	r3, #16
 80049cc:	786c      	ldrb	r4, [r5, #1]
 80049ce:	3502      	adds	r5, #2
 80049d0:	2200      	movs	r2, #0
 80049d2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80049d6:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80049da:	fbbc f9f3 	udiv	r9, ip, r3
 80049de:	4610      	mov	r0, r2
 80049e0:	fb03 ca19 	mls	sl, r3, r9, ip
 80049e4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80049e8:	2f09      	cmp	r7, #9
 80049ea:	d81b      	bhi.n	8004a24 <_strtol_l.constprop.0+0xa8>
 80049ec:	463c      	mov	r4, r7
 80049ee:	42a3      	cmp	r3, r4
 80049f0:	dd27      	ble.n	8004a42 <_strtol_l.constprop.0+0xc6>
 80049f2:	1c57      	adds	r7, r2, #1
 80049f4:	d007      	beq.n	8004a06 <_strtol_l.constprop.0+0x8a>
 80049f6:	4581      	cmp	r9, r0
 80049f8:	d320      	bcc.n	8004a3c <_strtol_l.constprop.0+0xc0>
 80049fa:	d101      	bne.n	8004a00 <_strtol_l.constprop.0+0x84>
 80049fc:	45a2      	cmp	sl, r4
 80049fe:	db1d      	blt.n	8004a3c <_strtol_l.constprop.0+0xc0>
 8004a00:	2201      	movs	r2, #1
 8004a02:	fb00 4003 	mla	r0, r0, r3, r4
 8004a06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004a0a:	e7eb      	b.n	80049e4 <_strtol_l.constprop.0+0x68>
 8004a0c:	2c2b      	cmp	r4, #43	@ 0x2b
 8004a0e:	bf04      	itt	eq
 8004a10:	782c      	ldrbeq	r4, [r5, #0]
 8004a12:	1c95      	addeq	r5, r2, #2
 8004a14:	e7cf      	b.n	80049b6 <_strtol_l.constprop.0+0x3a>
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1da      	bne.n	80049d0 <_strtol_l.constprop.0+0x54>
 8004a1a:	2c30      	cmp	r4, #48	@ 0x30
 8004a1c:	bf0c      	ite	eq
 8004a1e:	2308      	moveq	r3, #8
 8004a20:	230a      	movne	r3, #10
 8004a22:	e7d5      	b.n	80049d0 <_strtol_l.constprop.0+0x54>
 8004a24:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004a28:	2f19      	cmp	r7, #25
 8004a2a:	d801      	bhi.n	8004a30 <_strtol_l.constprop.0+0xb4>
 8004a2c:	3c37      	subs	r4, #55	@ 0x37
 8004a2e:	e7de      	b.n	80049ee <_strtol_l.constprop.0+0x72>
 8004a30:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004a34:	2f19      	cmp	r7, #25
 8004a36:	d804      	bhi.n	8004a42 <_strtol_l.constprop.0+0xc6>
 8004a38:	3c57      	subs	r4, #87	@ 0x57
 8004a3a:	e7d8      	b.n	80049ee <_strtol_l.constprop.0+0x72>
 8004a3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004a40:	e7e1      	b.n	8004a06 <_strtol_l.constprop.0+0x8a>
 8004a42:	1c53      	adds	r3, r2, #1
 8004a44:	d108      	bne.n	8004a58 <_strtol_l.constprop.0+0xdc>
 8004a46:	2322      	movs	r3, #34	@ 0x22
 8004a48:	4660      	mov	r0, ip
 8004a4a:	f8ce 3000 	str.w	r3, [lr]
 8004a4e:	f1b8 0f00 	cmp.w	r8, #0
 8004a52:	d0a0      	beq.n	8004996 <_strtol_l.constprop.0+0x1a>
 8004a54:	1e69      	subs	r1, r5, #1
 8004a56:	e006      	b.n	8004a66 <_strtol_l.constprop.0+0xea>
 8004a58:	b106      	cbz	r6, 8004a5c <_strtol_l.constprop.0+0xe0>
 8004a5a:	4240      	negs	r0, r0
 8004a5c:	f1b8 0f00 	cmp.w	r8, #0
 8004a60:	d099      	beq.n	8004996 <_strtol_l.constprop.0+0x1a>
 8004a62:	2a00      	cmp	r2, #0
 8004a64:	d1f6      	bne.n	8004a54 <_strtol_l.constprop.0+0xd8>
 8004a66:	f8c8 1000 	str.w	r1, [r8]
 8004a6a:	e794      	b.n	8004996 <_strtol_l.constprop.0+0x1a>
 8004a6c:	08005553 	.word	0x08005553

08004a70 <strtol>:
 8004a70:	4613      	mov	r3, r2
 8004a72:	460a      	mov	r2, r1
 8004a74:	4601      	mov	r1, r0
 8004a76:	4802      	ldr	r0, [pc, #8]	@ (8004a80 <strtol+0x10>)
 8004a78:	6800      	ldr	r0, [r0, #0]
 8004a7a:	f7ff bf7f 	b.w	800497c <_strtol_l.constprop.0>
 8004a7e:	bf00      	nop
 8004a80:	20000018 	.word	0x20000018

08004a84 <memset>:
 8004a84:	4603      	mov	r3, r0
 8004a86:	4402      	add	r2, r0
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d100      	bne.n	8004a8e <memset+0xa>
 8004a8c:	4770      	bx	lr
 8004a8e:	f803 1b01 	strb.w	r1, [r3], #1
 8004a92:	e7f9      	b.n	8004a88 <memset+0x4>

08004a94 <_reclaim_reent>:
 8004a94:	4b29      	ldr	r3, [pc, #164]	@ (8004b3c <_reclaim_reent+0xa8>)
 8004a96:	b570      	push	{r4, r5, r6, lr}
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4604      	mov	r4, r0
 8004a9c:	4283      	cmp	r3, r0
 8004a9e:	d04b      	beq.n	8004b38 <_reclaim_reent+0xa4>
 8004aa0:	69c3      	ldr	r3, [r0, #28]
 8004aa2:	b1ab      	cbz	r3, 8004ad0 <_reclaim_reent+0x3c>
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	b16b      	cbz	r3, 8004ac4 <_reclaim_reent+0x30>
 8004aa8:	2500      	movs	r5, #0
 8004aaa:	69e3      	ldr	r3, [r4, #28]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	5959      	ldr	r1, [r3, r5]
 8004ab0:	2900      	cmp	r1, #0
 8004ab2:	d13b      	bne.n	8004b2c <_reclaim_reent+0x98>
 8004ab4:	3504      	adds	r5, #4
 8004ab6:	2d80      	cmp	r5, #128	@ 0x80
 8004ab8:	d1f7      	bne.n	8004aaa <_reclaim_reent+0x16>
 8004aba:	69e3      	ldr	r3, [r4, #28]
 8004abc:	4620      	mov	r0, r4
 8004abe:	68d9      	ldr	r1, [r3, #12]
 8004ac0:	f000 f86a 	bl	8004b98 <_free_r>
 8004ac4:	69e3      	ldr	r3, [r4, #28]
 8004ac6:	6819      	ldr	r1, [r3, #0]
 8004ac8:	b111      	cbz	r1, 8004ad0 <_reclaim_reent+0x3c>
 8004aca:	4620      	mov	r0, r4
 8004acc:	f000 f864 	bl	8004b98 <_free_r>
 8004ad0:	6961      	ldr	r1, [r4, #20]
 8004ad2:	b111      	cbz	r1, 8004ada <_reclaim_reent+0x46>
 8004ad4:	4620      	mov	r0, r4
 8004ad6:	f000 f85f 	bl	8004b98 <_free_r>
 8004ada:	69e1      	ldr	r1, [r4, #28]
 8004adc:	b111      	cbz	r1, 8004ae4 <_reclaim_reent+0x50>
 8004ade:	4620      	mov	r0, r4
 8004ae0:	f000 f85a 	bl	8004b98 <_free_r>
 8004ae4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004ae6:	b111      	cbz	r1, 8004aee <_reclaim_reent+0x5a>
 8004ae8:	4620      	mov	r0, r4
 8004aea:	f000 f855 	bl	8004b98 <_free_r>
 8004aee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004af0:	b111      	cbz	r1, 8004af8 <_reclaim_reent+0x64>
 8004af2:	4620      	mov	r0, r4
 8004af4:	f000 f850 	bl	8004b98 <_free_r>
 8004af8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004afa:	b111      	cbz	r1, 8004b02 <_reclaim_reent+0x6e>
 8004afc:	4620      	mov	r0, r4
 8004afe:	f000 f84b 	bl	8004b98 <_free_r>
 8004b02:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004b04:	b111      	cbz	r1, 8004b0c <_reclaim_reent+0x78>
 8004b06:	4620      	mov	r0, r4
 8004b08:	f000 f846 	bl	8004b98 <_free_r>
 8004b0c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004b0e:	b111      	cbz	r1, 8004b16 <_reclaim_reent+0x82>
 8004b10:	4620      	mov	r0, r4
 8004b12:	f000 f841 	bl	8004b98 <_free_r>
 8004b16:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004b18:	b111      	cbz	r1, 8004b20 <_reclaim_reent+0x8c>
 8004b1a:	4620      	mov	r0, r4
 8004b1c:	f000 f83c 	bl	8004b98 <_free_r>
 8004b20:	6a23      	ldr	r3, [r4, #32]
 8004b22:	b14b      	cbz	r3, 8004b38 <_reclaim_reent+0xa4>
 8004b24:	4620      	mov	r0, r4
 8004b26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004b2a:	4718      	bx	r3
 8004b2c:	680e      	ldr	r6, [r1, #0]
 8004b2e:	4620      	mov	r0, r4
 8004b30:	f000 f832 	bl	8004b98 <_free_r>
 8004b34:	4631      	mov	r1, r6
 8004b36:	e7bb      	b.n	8004ab0 <_reclaim_reent+0x1c>
 8004b38:	bd70      	pop	{r4, r5, r6, pc}
 8004b3a:	bf00      	nop
 8004b3c:	20000018 	.word	0x20000018

08004b40 <__errno>:
 8004b40:	4b01      	ldr	r3, [pc, #4]	@ (8004b48 <__errno+0x8>)
 8004b42:	6818      	ldr	r0, [r3, #0]
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	20000018 	.word	0x20000018

08004b4c <__libc_init_array>:
 8004b4c:	b570      	push	{r4, r5, r6, lr}
 8004b4e:	2600      	movs	r6, #0
 8004b50:	4d0c      	ldr	r5, [pc, #48]	@ (8004b84 <__libc_init_array+0x38>)
 8004b52:	4c0d      	ldr	r4, [pc, #52]	@ (8004b88 <__libc_init_array+0x3c>)
 8004b54:	1b64      	subs	r4, r4, r5
 8004b56:	10a4      	asrs	r4, r4, #2
 8004b58:	42a6      	cmp	r6, r4
 8004b5a:	d109      	bne.n	8004b70 <__libc_init_array+0x24>
 8004b5c:	f000 f864 	bl	8004c28 <_init>
 8004b60:	2600      	movs	r6, #0
 8004b62:	4d0a      	ldr	r5, [pc, #40]	@ (8004b8c <__libc_init_array+0x40>)
 8004b64:	4c0a      	ldr	r4, [pc, #40]	@ (8004b90 <__libc_init_array+0x44>)
 8004b66:	1b64      	subs	r4, r4, r5
 8004b68:	10a4      	asrs	r4, r4, #2
 8004b6a:	42a6      	cmp	r6, r4
 8004b6c:	d105      	bne.n	8004b7a <__libc_init_array+0x2e>
 8004b6e:	bd70      	pop	{r4, r5, r6, pc}
 8004b70:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b74:	4798      	blx	r3
 8004b76:	3601      	adds	r6, #1
 8004b78:	e7ee      	b.n	8004b58 <__libc_init_array+0xc>
 8004b7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b7e:	4798      	blx	r3
 8004b80:	3601      	adds	r6, #1
 8004b82:	e7f2      	b.n	8004b6a <__libc_init_array+0x1e>
 8004b84:	0800565c 	.word	0x0800565c
 8004b88:	0800565c 	.word	0x0800565c
 8004b8c:	0800565c 	.word	0x0800565c
 8004b90:	08005660 	.word	0x08005660

08004b94 <__retarget_lock_acquire_recursive>:
 8004b94:	4770      	bx	lr

08004b96 <__retarget_lock_release_recursive>:
 8004b96:	4770      	bx	lr

08004b98 <_free_r>:
 8004b98:	b538      	push	{r3, r4, r5, lr}
 8004b9a:	4605      	mov	r5, r0
 8004b9c:	2900      	cmp	r1, #0
 8004b9e:	d040      	beq.n	8004c22 <_free_r+0x8a>
 8004ba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ba4:	1f0c      	subs	r4, r1, #4
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	bfb8      	it	lt
 8004baa:	18e4      	addlt	r4, r4, r3
 8004bac:	f7ff feda 	bl	8004964 <__malloc_lock>
 8004bb0:	4a1c      	ldr	r2, [pc, #112]	@ (8004c24 <_free_r+0x8c>)
 8004bb2:	6813      	ldr	r3, [r2, #0]
 8004bb4:	b933      	cbnz	r3, 8004bc4 <_free_r+0x2c>
 8004bb6:	6063      	str	r3, [r4, #4]
 8004bb8:	6014      	str	r4, [r2, #0]
 8004bba:	4628      	mov	r0, r5
 8004bbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004bc0:	f7ff bed6 	b.w	8004970 <__malloc_unlock>
 8004bc4:	42a3      	cmp	r3, r4
 8004bc6:	d908      	bls.n	8004bda <_free_r+0x42>
 8004bc8:	6820      	ldr	r0, [r4, #0]
 8004bca:	1821      	adds	r1, r4, r0
 8004bcc:	428b      	cmp	r3, r1
 8004bce:	bf01      	itttt	eq
 8004bd0:	6819      	ldreq	r1, [r3, #0]
 8004bd2:	685b      	ldreq	r3, [r3, #4]
 8004bd4:	1809      	addeq	r1, r1, r0
 8004bd6:	6021      	streq	r1, [r4, #0]
 8004bd8:	e7ed      	b.n	8004bb6 <_free_r+0x1e>
 8004bda:	461a      	mov	r2, r3
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	b10b      	cbz	r3, 8004be4 <_free_r+0x4c>
 8004be0:	42a3      	cmp	r3, r4
 8004be2:	d9fa      	bls.n	8004bda <_free_r+0x42>
 8004be4:	6811      	ldr	r1, [r2, #0]
 8004be6:	1850      	adds	r0, r2, r1
 8004be8:	42a0      	cmp	r0, r4
 8004bea:	d10b      	bne.n	8004c04 <_free_r+0x6c>
 8004bec:	6820      	ldr	r0, [r4, #0]
 8004bee:	4401      	add	r1, r0
 8004bf0:	1850      	adds	r0, r2, r1
 8004bf2:	4283      	cmp	r3, r0
 8004bf4:	6011      	str	r1, [r2, #0]
 8004bf6:	d1e0      	bne.n	8004bba <_free_r+0x22>
 8004bf8:	6818      	ldr	r0, [r3, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	4408      	add	r0, r1
 8004bfe:	6010      	str	r0, [r2, #0]
 8004c00:	6053      	str	r3, [r2, #4]
 8004c02:	e7da      	b.n	8004bba <_free_r+0x22>
 8004c04:	d902      	bls.n	8004c0c <_free_r+0x74>
 8004c06:	230c      	movs	r3, #12
 8004c08:	602b      	str	r3, [r5, #0]
 8004c0a:	e7d6      	b.n	8004bba <_free_r+0x22>
 8004c0c:	6820      	ldr	r0, [r4, #0]
 8004c0e:	1821      	adds	r1, r4, r0
 8004c10:	428b      	cmp	r3, r1
 8004c12:	bf01      	itttt	eq
 8004c14:	6819      	ldreq	r1, [r3, #0]
 8004c16:	685b      	ldreq	r3, [r3, #4]
 8004c18:	1809      	addeq	r1, r1, r0
 8004c1a:	6021      	streq	r1, [r4, #0]
 8004c1c:	6063      	str	r3, [r4, #4]
 8004c1e:	6054      	str	r4, [r2, #4]
 8004c20:	e7cb      	b.n	8004bba <_free_r+0x22>
 8004c22:	bd38      	pop	{r3, r4, r5, pc}
 8004c24:	20001e9c 	.word	0x20001e9c

08004c28 <_init>:
 8004c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c2a:	bf00      	nop
 8004c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c2e:	bc08      	pop	{r3}
 8004c30:	469e      	mov	lr, r3
 8004c32:	4770      	bx	lr

08004c34 <_fini>:
 8004c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c36:	bf00      	nop
 8004c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c3a:	bc08      	pop	{r3}
 8004c3c:	469e      	mov	lr, r3
 8004c3e:	4770      	bx	lr
