
battlebot-controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004314  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08004424  08004424  00005424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004504  08004504  00006060  2**0
                  CONTENTS
  4 .ARM          00000000  08004504  08004504  00006060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004504  08004504  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004504  08004504  00005504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004508  08004508  00005508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800450c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012d0  20000060  0800456c  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001330  0800456c  00006330  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017574  00000000  00000000  00006089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003309  00000000  00000000  0001d5fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001600  00000000  00000000  00020908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000114c  00000000  00000000  00021f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004254  00000000  00000000  00023054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001970e  00000000  00000000  000272a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099292  00000000  00000000  000409b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d9c48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ffc  00000000  00000000  000d9c8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000dfc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	0800440c 	.word	0x0800440c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	0800440c 	.word	0x0800440c

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	@ (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	@ (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	@ 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000007c 	.word	0x2000007c
 800017c:	2000011c 	.word	0x2000011c

08000180 <setup>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void setup(){
 8000180:	b480      	push	{r7}
 8000182:	af00      	add	r7, sp, #0

}
 8000184:	bf00      	nop
 8000186:	46bd      	mov	sp, r7
 8000188:	bc80      	pop	{r7}
 800018a:	4770      	bx	lr

0800018c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800018c:	b5b0      	push	{r4, r5, r7, lr}
 800018e:	b09c      	sub	sp, #112	@ 0x70
 8000190:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000192:	f000 fcd3 	bl	8000b3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000196:	f000 f86b 	bl	8000270 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800019a:	f000 f991 	bl	80004c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800019e:	f000 f901 	bl	80003a4 <MX_I2C1_Init>
  MX_SPI1_Init();
 80001a2:	f000 f92d 	bl	8000400 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80001a6:	f000 f961 	bl	800046c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80001aa:	f000 f8bd 	bl	8000328 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  setup();
 80001ae:	f7ff ffe7 	bl	8000180 <setup>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ReadDigital */
  osThreadDef(ReadDigital, StartReadDigital, osPriorityNormal, 0, 128);
 80001b2:	4b27      	ldr	r3, [pc, #156]	@ (8000250 <main+0xc4>)
 80001b4:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 80001b8:	461d      	mov	r5, r3
 80001ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadDigitalHandle = osThreadCreate(osThread(ReadDigital), NULL);
 80001c6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80001ca:	2100      	movs	r1, #0
 80001cc:	4618      	mov	r0, r3
 80001ce:	f002 fe49 	bl	8002e64 <osThreadCreate>
 80001d2:	4603      	mov	r3, r0
 80001d4:	4a1f      	ldr	r2, [pc, #124]	@ (8000254 <main+0xc8>)
 80001d6:	6013      	str	r3, [r2, #0]

  /* definition and creation of ReadAnalog */
  osThreadDef(ReadAnalog, StartReadAnalog, osPriorityNormal, 0, 128);
 80001d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000258 <main+0xcc>)
 80001da:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80001de:	461d      	mov	r5, r3
 80001e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadAnalogHandle = osThreadCreate(osThread(ReadAnalog), NULL);
 80001ec:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80001f0:	2100      	movs	r1, #0
 80001f2:	4618      	mov	r0, r3
 80001f4:	f002 fe36 	bl	8002e64 <osThreadCreate>
 80001f8:	4603      	mov	r3, r0
 80001fa:	4a18      	ldr	r2, [pc, #96]	@ (800025c <main+0xd0>)
 80001fc:	6013      	str	r3, [r2, #0]

  /* definition and creation of ReadCOM */
  osThreadDef(ReadCOM, StartReadCOM, osPriorityNormal, 0, 128);
 80001fe:	4b18      	ldr	r3, [pc, #96]	@ (8000260 <main+0xd4>)
 8000200:	f107 041c 	add.w	r4, r7, #28
 8000204:	461d      	mov	r5, r3
 8000206:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000208:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800020a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800020e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadCOMHandle = osThreadCreate(osThread(ReadCOM), NULL);
 8000212:	f107 031c 	add.w	r3, r7, #28
 8000216:	2100      	movs	r1, #0
 8000218:	4618      	mov	r0, r3
 800021a:	f002 fe23 	bl	8002e64 <osThreadCreate>
 800021e:	4603      	mov	r3, r0
 8000220:	4a10      	ldr	r2, [pc, #64]	@ (8000264 <main+0xd8>)
 8000222:	6013      	str	r3, [r2, #0]

  /* definition and creation of SendCOM */
  osThreadDef(SendCOM, StartSendCOM, osPriorityNormal, 0, 128);
 8000224:	4b10      	ldr	r3, [pc, #64]	@ (8000268 <main+0xdc>)
 8000226:	463c      	mov	r4, r7
 8000228:	461d      	mov	r5, r3
 800022a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800022c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800022e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000232:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SendCOMHandle = osThreadCreate(osThread(SendCOM), NULL);
 8000236:	463b      	mov	r3, r7
 8000238:	2100      	movs	r1, #0
 800023a:	4618      	mov	r0, r3
 800023c:	f002 fe12 	bl	8002e64 <osThreadCreate>
 8000240:	4603      	mov	r3, r0
 8000242:	4a0a      	ldr	r2, [pc, #40]	@ (800026c <main+0xe0>)
 8000244:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000246:	f002 fe06 	bl	8002e56 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800024a:	bf00      	nop
 800024c:	e7fd      	b.n	800024a <main+0xbe>
 800024e:	bf00      	nop
 8000250:	08004430 	.word	0x08004430
 8000254:	20000440 	.word	0x20000440
 8000258:	08004458 	.word	0x08004458
 800025c:	20000444 	.word	0x20000444
 8000260:	0800447c 	.word	0x0800447c
 8000264:	20000448 	.word	0x20000448
 8000268:	080044a0 	.word	0x080044a0
 800026c:	2000044c 	.word	0x2000044c

08000270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b094      	sub	sp, #80	@ 0x50
 8000274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000276:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800027a:	2228      	movs	r2, #40	@ 0x28
 800027c:	2100      	movs	r1, #0
 800027e:	4618      	mov	r0, r3
 8000280:	f003 ffec 	bl	800425c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000284:	f107 0314 	add.w	r3, r7, #20
 8000288:	2200      	movs	r2, #0
 800028a:	601a      	str	r2, [r3, #0]
 800028c:	605a      	str	r2, [r3, #4]
 800028e:	609a      	str	r2, [r3, #8]
 8000290:	60da      	str	r2, [r3, #12]
 8000292:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000294:	1d3b      	adds	r3, r7, #4
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	605a      	str	r2, [r3, #4]
 800029c:	609a      	str	r2, [r3, #8]
 800029e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002a0:	2301      	movs	r3, #1
 80002a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002aa:	2300      	movs	r3, #0
 80002ac:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ae:	2301      	movs	r3, #1
 80002b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b2:	2302      	movs	r3, #2
 80002b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002bc:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80002c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002c6:	4618      	mov	r0, r3
 80002c8:	f001 fc66 	bl	8001b98 <HAL_RCC_OscConfig>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002d2:	f000 fa01 	bl	80006d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d6:	230f      	movs	r3, #15
 80002d8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002da:	2302      	movs	r3, #2
 80002dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002de:	2300      	movs	r3, #0
 80002e0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002e6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e8:	2300      	movs	r3, #0
 80002ea:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ec:	f107 0314 	add.w	r3, r7, #20
 80002f0:	2102      	movs	r1, #2
 80002f2:	4618      	mov	r0, r3
 80002f4:	f001 fed2 	bl	800209c <HAL_RCC_ClockConfig>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002fe:	f000 f9eb 	bl	80006d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000302:	2302      	movs	r3, #2
 8000304:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000306:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800030a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800030c:	1d3b      	adds	r3, r7, #4
 800030e:	4618      	mov	r0, r3
 8000310:	f002 f882 	bl	8002418 <HAL_RCCEx_PeriphCLKConfig>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800031a:	f000 f9dd 	bl	80006d8 <Error_Handler>
  }
}
 800031e:	bf00      	nop
 8000320:	3750      	adds	r7, #80	@ 0x50
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
	...

08000328 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b084      	sub	sp, #16
 800032c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	2200      	movs	r2, #0
 8000332:	601a      	str	r2, [r3, #0]
 8000334:	605a      	str	r2, [r3, #4]
 8000336:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000338:	4b18      	ldr	r3, [pc, #96]	@ (800039c <MX_ADC1_Init+0x74>)
 800033a:	4a19      	ldr	r2, [pc, #100]	@ (80003a0 <MX_ADC1_Init+0x78>)
 800033c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800033e:	4b17      	ldr	r3, [pc, #92]	@ (800039c <MX_ADC1_Init+0x74>)
 8000340:	2200      	movs	r2, #0
 8000342:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000344:	4b15      	ldr	r3, [pc, #84]	@ (800039c <MX_ADC1_Init+0x74>)
 8000346:	2200      	movs	r2, #0
 8000348:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800034a:	4b14      	ldr	r3, [pc, #80]	@ (800039c <MX_ADC1_Init+0x74>)
 800034c:	2200      	movs	r2, #0
 800034e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000350:	4b12      	ldr	r3, [pc, #72]	@ (800039c <MX_ADC1_Init+0x74>)
 8000352:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000356:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000358:	4b10      	ldr	r3, [pc, #64]	@ (800039c <MX_ADC1_Init+0x74>)
 800035a:	2200      	movs	r2, #0
 800035c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800035e:	4b0f      	ldr	r3, [pc, #60]	@ (800039c <MX_ADC1_Init+0x74>)
 8000360:	2201      	movs	r2, #1
 8000362:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000364:	480d      	ldr	r0, [pc, #52]	@ (800039c <MX_ADC1_Init+0x74>)
 8000366:	f000 fc1b 	bl	8000ba0 <HAL_ADC_Init>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000370:	f000 f9b2 	bl	80006d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000374:	2301      	movs	r3, #1
 8000376:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000378:	2301      	movs	r3, #1
 800037a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800037c:	2300      	movs	r3, #0
 800037e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000380:	1d3b      	adds	r3, r7, #4
 8000382:	4619      	mov	r1, r3
 8000384:	4805      	ldr	r0, [pc, #20]	@ (800039c <MX_ADC1_Init+0x74>)
 8000386:	f000 fea3 	bl	80010d0 <HAL_ADC_ConfigChannel>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000390:	f000 f9a2 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000394:	bf00      	nop
 8000396:	3710      	adds	r7, #16
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	2000031c 	.word	0x2000031c
 80003a0:	40012400 	.word	0x40012400

080003a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003a8:	4b12      	ldr	r3, [pc, #72]	@ (80003f4 <MX_I2C1_Init+0x50>)
 80003aa:	4a13      	ldr	r2, [pc, #76]	@ (80003f8 <MX_I2C1_Init+0x54>)
 80003ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80003ae:	4b11      	ldr	r3, [pc, #68]	@ (80003f4 <MX_I2C1_Init+0x50>)
 80003b0:	4a12      	ldr	r2, [pc, #72]	@ (80003fc <MX_I2C1_Init+0x58>)
 80003b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003b4:	4b0f      	ldr	r3, [pc, #60]	@ (80003f4 <MX_I2C1_Init+0x50>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003ba:	4b0e      	ldr	r3, [pc, #56]	@ (80003f4 <MX_I2C1_Init+0x50>)
 80003bc:	2200      	movs	r2, #0
 80003be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003c0:	4b0c      	ldr	r3, [pc, #48]	@ (80003f4 <MX_I2C1_Init+0x50>)
 80003c2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80003c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003c8:	4b0a      	ldr	r3, [pc, #40]	@ (80003f4 <MX_I2C1_Init+0x50>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003ce:	4b09      	ldr	r3, [pc, #36]	@ (80003f4 <MX_I2C1_Init+0x50>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003d4:	4b07      	ldr	r3, [pc, #28]	@ (80003f4 <MX_I2C1_Init+0x50>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003da:	4b06      	ldr	r3, [pc, #24]	@ (80003f4 <MX_I2C1_Init+0x50>)
 80003dc:	2200      	movs	r2, #0
 80003de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003e0:	4804      	ldr	r0, [pc, #16]	@ (80003f4 <MX_I2C1_Init+0x50>)
 80003e2:	f001 fa95 	bl	8001910 <HAL_I2C_Init>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80003ec:	f000 f974 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003f0:	bf00      	nop
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	2000034c 	.word	0x2000034c
 80003f8:	40005400 	.word	0x40005400
 80003fc:	000186a0 	.word	0x000186a0

08000400 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000404:	4b17      	ldr	r3, [pc, #92]	@ (8000464 <MX_SPI1_Init+0x64>)
 8000406:	4a18      	ldr	r2, [pc, #96]	@ (8000468 <MX_SPI1_Init+0x68>)
 8000408:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800040a:	4b16      	ldr	r3, [pc, #88]	@ (8000464 <MX_SPI1_Init+0x64>)
 800040c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000410:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000412:	4b14      	ldr	r3, [pc, #80]	@ (8000464 <MX_SPI1_Init+0x64>)
 8000414:	2200      	movs	r2, #0
 8000416:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000418:	4b12      	ldr	r3, [pc, #72]	@ (8000464 <MX_SPI1_Init+0x64>)
 800041a:	2200      	movs	r2, #0
 800041c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800041e:	4b11      	ldr	r3, [pc, #68]	@ (8000464 <MX_SPI1_Init+0x64>)
 8000420:	2200      	movs	r2, #0
 8000422:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000424:	4b0f      	ldr	r3, [pc, #60]	@ (8000464 <MX_SPI1_Init+0x64>)
 8000426:	2200      	movs	r2, #0
 8000428:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800042a:	4b0e      	ldr	r3, [pc, #56]	@ (8000464 <MX_SPI1_Init+0x64>)
 800042c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000430:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000432:	4b0c      	ldr	r3, [pc, #48]	@ (8000464 <MX_SPI1_Init+0x64>)
 8000434:	2218      	movs	r2, #24
 8000436:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000438:	4b0a      	ldr	r3, [pc, #40]	@ (8000464 <MX_SPI1_Init+0x64>)
 800043a:	2200      	movs	r2, #0
 800043c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800043e:	4b09      	ldr	r3, [pc, #36]	@ (8000464 <MX_SPI1_Init+0x64>)
 8000440:	2200      	movs	r2, #0
 8000442:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000444:	4b07      	ldr	r3, [pc, #28]	@ (8000464 <MX_SPI1_Init+0x64>)
 8000446:	2200      	movs	r2, #0
 8000448:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800044a:	4b06      	ldr	r3, [pc, #24]	@ (8000464 <MX_SPI1_Init+0x64>)
 800044c:	220a      	movs	r2, #10
 800044e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000450:	4804      	ldr	r0, [pc, #16]	@ (8000464 <MX_SPI1_Init+0x64>)
 8000452:	f002 f94d 	bl	80026f0 <HAL_SPI_Init>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800045c:	f000 f93c 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000460:	bf00      	nop
 8000462:	bd80      	pop	{r7, pc}
 8000464:	200003a0 	.word	0x200003a0
 8000468:	40013000 	.word	0x40013000

0800046c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000470:	4b11      	ldr	r3, [pc, #68]	@ (80004b8 <MX_USART1_UART_Init+0x4c>)
 8000472:	4a12      	ldr	r2, [pc, #72]	@ (80004bc <MX_USART1_UART_Init+0x50>)
 8000474:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000476:	4b10      	ldr	r3, [pc, #64]	@ (80004b8 <MX_USART1_UART_Init+0x4c>)
 8000478:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800047c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800047e:	4b0e      	ldr	r3, [pc, #56]	@ (80004b8 <MX_USART1_UART_Init+0x4c>)
 8000480:	2200      	movs	r2, #0
 8000482:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000484:	4b0c      	ldr	r3, [pc, #48]	@ (80004b8 <MX_USART1_UART_Init+0x4c>)
 8000486:	2200      	movs	r2, #0
 8000488:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800048a:	4b0b      	ldr	r3, [pc, #44]	@ (80004b8 <MX_USART1_UART_Init+0x4c>)
 800048c:	2200      	movs	r2, #0
 800048e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000490:	4b09      	ldr	r3, [pc, #36]	@ (80004b8 <MX_USART1_UART_Init+0x4c>)
 8000492:	220c      	movs	r2, #12
 8000494:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000496:	4b08      	ldr	r3, [pc, #32]	@ (80004b8 <MX_USART1_UART_Init+0x4c>)
 8000498:	2200      	movs	r2, #0
 800049a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800049c:	4b06      	ldr	r3, [pc, #24]	@ (80004b8 <MX_USART1_UART_Init+0x4c>)
 800049e:	2200      	movs	r2, #0
 80004a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004a2:	4805      	ldr	r0, [pc, #20]	@ (80004b8 <MX_USART1_UART_Init+0x4c>)
 80004a4:	f002 fbe2 	bl	8002c6c <HAL_UART_Init>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80004ae:	f000 f913 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	200003f8 	.word	0x200003f8
 80004bc:	40013800 	.word	0x40013800

080004c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b088      	sub	sp, #32
 80004c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c6:	f107 0310 	add.w	r3, r7, #16
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004d4:	4b3a      	ldr	r3, [pc, #232]	@ (80005c0 <MX_GPIO_Init+0x100>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	4a39      	ldr	r2, [pc, #228]	@ (80005c0 <MX_GPIO_Init+0x100>)
 80004da:	f043 0310 	orr.w	r3, r3, #16
 80004de:	6193      	str	r3, [r2, #24]
 80004e0:	4b37      	ldr	r3, [pc, #220]	@ (80005c0 <MX_GPIO_Init+0x100>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	f003 0310 	and.w	r3, r3, #16
 80004e8:	60fb      	str	r3, [r7, #12]
 80004ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004ec:	4b34      	ldr	r3, [pc, #208]	@ (80005c0 <MX_GPIO_Init+0x100>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	4a33      	ldr	r2, [pc, #204]	@ (80005c0 <MX_GPIO_Init+0x100>)
 80004f2:	f043 0320 	orr.w	r3, r3, #32
 80004f6:	6193      	str	r3, [r2, #24]
 80004f8:	4b31      	ldr	r3, [pc, #196]	@ (80005c0 <MX_GPIO_Init+0x100>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	f003 0320 	and.w	r3, r3, #32
 8000500:	60bb      	str	r3, [r7, #8]
 8000502:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000504:	4b2e      	ldr	r3, [pc, #184]	@ (80005c0 <MX_GPIO_Init+0x100>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	4a2d      	ldr	r2, [pc, #180]	@ (80005c0 <MX_GPIO_Init+0x100>)
 800050a:	f043 0304 	orr.w	r3, r3, #4
 800050e:	6193      	str	r3, [r2, #24]
 8000510:	4b2b      	ldr	r3, [pc, #172]	@ (80005c0 <MX_GPIO_Init+0x100>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	f003 0304 	and.w	r3, r3, #4
 8000518:	607b      	str	r3, [r7, #4]
 800051a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800051c:	4b28      	ldr	r3, [pc, #160]	@ (80005c0 <MX_GPIO_Init+0x100>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	4a27      	ldr	r2, [pc, #156]	@ (80005c0 <MX_GPIO_Init+0x100>)
 8000522:	f043 0308 	orr.w	r3, r3, #8
 8000526:	6193      	str	r3, [r2, #24]
 8000528:	4b25      	ldr	r3, [pc, #148]	@ (80005c0 <MX_GPIO_Init+0x100>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	f003 0308 	and.w	r3, r3, #8
 8000530:	603b      	str	r3, [r7, #0]
 8000532:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000534:	2201      	movs	r2, #1
 8000536:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800053a:	4822      	ldr	r0, [pc, #136]	@ (80005c4 <MX_GPIO_Init+0x104>)
 800053c:	f001 f9cf 	bl	80018de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RF24_CSN_Pin|RF24_CE_Pin, GPIO_PIN_RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	2103      	movs	r1, #3
 8000544:	4820      	ldr	r0, [pc, #128]	@ (80005c8 <MX_GPIO_Init+0x108>)
 8000546:	f001 f9ca 	bl	80018de <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800054a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800054e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000550:	2301      	movs	r3, #1
 8000552:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000554:	2302      	movs	r3, #2
 8000556:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000558:	2302      	movs	r3, #2
 800055a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800055c:	f107 0310 	add.w	r3, r7, #16
 8000560:	4619      	mov	r1, r3
 8000562:	4818      	ldr	r0, [pc, #96]	@ (80005c4 <MX_GPIO_Init+0x104>)
 8000564:	f001 f828 	bl	80015b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_BTN_Pin */
  GPIO_InitStruct.Pin = JOY_BTN_Pin;
 8000568:	2304      	movs	r3, #4
 800056a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800056c:	2300      	movs	r3, #0
 800056e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000570:	2302      	movs	r3, #2
 8000572:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(JOY_BTN_GPIO_Port, &GPIO_InitStruct);
 8000574:	f107 0310 	add.w	r3, r7, #16
 8000578:	4619      	mov	r1, r3
 800057a:	4814      	ldr	r0, [pc, #80]	@ (80005cc <MX_GPIO_Init+0x10c>)
 800057c:	f001 f81c 	bl	80015b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RF24_CSN_Pin RF24_CE_Pin */
  GPIO_InitStruct.Pin = RF24_CSN_Pin|RF24_CE_Pin;
 8000580:	2303      	movs	r3, #3
 8000582:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000584:	2301      	movs	r3, #1
 8000586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000588:	2300      	movs	r3, #0
 800058a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058c:	2302      	movs	r3, #2
 800058e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000590:	f107 0310 	add.w	r3, r7, #16
 8000594:	4619      	mov	r1, r3
 8000596:	480c      	ldr	r0, [pc, #48]	@ (80005c8 <MX_GPIO_Init+0x108>)
 8000598:	f001 f80e 	bl	80015b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_DWN_Pin BTN_L_Pin BTN_R_Pin BTN_UP_Pin */
  GPIO_InitStruct.Pin = BTN_DWN_Pin|BTN_L_Pin|BTN_R_Pin|BTN_UP_Pin;
 800059c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80005a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005a2:	2300      	movs	r3, #0
 80005a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005a6:	2301      	movs	r3, #1
 80005a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005aa:	f107 0310 	add.w	r3, r7, #16
 80005ae:	4619      	mov	r1, r3
 80005b0:	4805      	ldr	r0, [pc, #20]	@ (80005c8 <MX_GPIO_Init+0x108>)
 80005b2:	f001 f801 	bl	80015b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005b6:	bf00      	nop
 80005b8:	3720      	adds	r7, #32
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40021000 	.word	0x40021000
 80005c4:	40011000 	.word	0x40011000
 80005c8:	40010c00 	.word	0x40010c00
 80005cc:	40010800 	.word	0x40010800

080005d0 <StartReadDigital>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartReadDigital */
void StartReadDigital(void const * argument)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	btnUPState = HAL_GPIO_ReadPin(BTN_UP_GPIO_Port, BTN_UP_Pin);
 80005d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005dc:	4813      	ldr	r0, [pc, #76]	@ (800062c <StartReadDigital+0x5c>)
 80005de:	f001 f967 	bl	80018b0 <HAL_GPIO_ReadPin>
 80005e2:	4603      	mov	r3, r0
 80005e4:	461a      	mov	r2, r3
 80005e6:	4b12      	ldr	r3, [pc, #72]	@ (8000630 <StartReadDigital+0x60>)
 80005e8:	701a      	strb	r2, [r3, #0]
	btnDWNState = HAL_GPIO_ReadPin(BTN_DWN_GPIO_Port, BTN_DWN_Pin);
 80005ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005ee:	480f      	ldr	r0, [pc, #60]	@ (800062c <StartReadDigital+0x5c>)
 80005f0:	f001 f95e 	bl	80018b0 <HAL_GPIO_ReadPin>
 80005f4:	4603      	mov	r3, r0
 80005f6:	461a      	mov	r2, r3
 80005f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000634 <StartReadDigital+0x64>)
 80005fa:	701a      	strb	r2, [r3, #0]
	btnLState = HAL_GPIO_ReadPin(BTN_L_GPIO_Port, BTN_L_Pin);
 80005fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000600:	480a      	ldr	r0, [pc, #40]	@ (800062c <StartReadDigital+0x5c>)
 8000602:	f001 f955 	bl	80018b0 <HAL_GPIO_ReadPin>
 8000606:	4603      	mov	r3, r0
 8000608:	461a      	mov	r2, r3
 800060a:	4b0b      	ldr	r3, [pc, #44]	@ (8000638 <StartReadDigital+0x68>)
 800060c:	701a      	strb	r2, [r3, #0]
	btnRState = HAL_GPIO_ReadPin(BTN_R_GPIO_Port, BTN_R_Pin);
 800060e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000612:	4806      	ldr	r0, [pc, #24]	@ (800062c <StartReadDigital+0x5c>)
 8000614:	f001 f94c 	bl	80018b0 <HAL_GPIO_ReadPin>
 8000618:	4603      	mov	r3, r0
 800061a:	461a      	mov	r2, r3
 800061c:	4b07      	ldr	r3, [pc, #28]	@ (800063c <StartReadDigital+0x6c>)
 800061e:	701a      	strb	r2, [r3, #0]
    osDelay(1);
 8000620:	2001      	movs	r0, #1
 8000622:	f002 fc6b 	bl	8002efc <osDelay>
	btnUPState = HAL_GPIO_ReadPin(BTN_UP_GPIO_Port, BTN_UP_Pin);
 8000626:	bf00      	nop
 8000628:	e7d6      	b.n	80005d8 <StartReadDigital+0x8>
 800062a:	bf00      	nop
 800062c:	40010c00 	.word	0x40010c00
 8000630:	20000450 	.word	0x20000450
 8000634:	20000451 	.word	0x20000451
 8000638:	20000452 	.word	0x20000452
 800063c:	20000453 	.word	0x20000453

08000640 <StartReadAnalog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadAnalog */
void StartReadAnalog(void const * argument)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadAnalog */
  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_Start(&hadc1);
 8000648:	480f      	ldr	r0, [pc, #60]	@ (8000688 <StartReadAnalog+0x48>)
 800064a:	f000 fb81 	bl	8000d50 <HAL_ADC_Start>

	         // Poll for conversion and read the first channel value
	         HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800064e:	f04f 31ff 	mov.w	r1, #4294967295
 8000652:	480d      	ldr	r0, [pc, #52]	@ (8000688 <StartReadAnalog+0x48>)
 8000654:	f000 fc2a 	bl	8000eac <HAL_ADC_PollForConversion>
	         JOYval_X = HAL_ADC_GetValue(&hadc1);
 8000658:	480b      	ldr	r0, [pc, #44]	@ (8000688 <StartReadAnalog+0x48>)
 800065a:	f000 fd2d 	bl	80010b8 <HAL_ADC_GetValue>
 800065e:	4603      	mov	r3, r0
 8000660:	b29a      	uxth	r2, r3
 8000662:	4b0a      	ldr	r3, [pc, #40]	@ (800068c <StartReadAnalog+0x4c>)
 8000664:	801a      	strh	r2, [r3, #0]

	         // Poll for conversion and read the second channel value
	         HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000666:	f04f 31ff 	mov.w	r1, #4294967295
 800066a:	4807      	ldr	r0, [pc, #28]	@ (8000688 <StartReadAnalog+0x48>)
 800066c:	f000 fc1e 	bl	8000eac <HAL_ADC_PollForConversion>
	         JOYval_Y = HAL_ADC_GetValue(&hadc1);
 8000670:	4805      	ldr	r0, [pc, #20]	@ (8000688 <StartReadAnalog+0x48>)
 8000672:	f000 fd21 	bl	80010b8 <HAL_ADC_GetValue>
 8000676:	4603      	mov	r3, r0
 8000678:	b29a      	uxth	r2, r3
 800067a:	4b05      	ldr	r3, [pc, #20]	@ (8000690 <StartReadAnalog+0x50>)
 800067c:	801a      	strh	r2, [r3, #0]
    osDelay(5);
 800067e:	2005      	movs	r0, #5
 8000680:	f002 fc3c 	bl	8002efc <osDelay>
	  HAL_ADC_Start(&hadc1);
 8000684:	bf00      	nop
 8000686:	e7df      	b.n	8000648 <StartReadAnalog+0x8>
 8000688:	2000031c 	.word	0x2000031c
 800068c:	20000454 	.word	0x20000454
 8000690:	20000456 	.word	0x20000456

08000694 <StartReadCOM>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadCOM */
void StartReadCOM(void const * argument)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadCOM */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800069c:	2001      	movs	r0, #1
 800069e:	f002 fc2d 	bl	8002efc <osDelay>
 80006a2:	e7fb      	b.n	800069c <StartReadCOM+0x8>

080006a4 <StartSendCOM>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendCOM */
void StartSendCOM(void const * argument)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendCOM */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006ac:	2001      	movs	r0, #1
 80006ae:	f002 fc25 	bl	8002efc <osDelay>
 80006b2:	e7fb      	b.n	80006ac <StartSendCOM+0x8>

080006b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a04      	ldr	r2, [pc, #16]	@ (80006d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d101      	bne.n	80006ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006c6:	f000 fa4f 	bl	8000b68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40012c00 	.word	0x40012c00

080006d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006dc:	b672      	cpsid	i
}
 80006de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e0:	bf00      	nop
 80006e2:	e7fd      	b.n	80006e0 <Error_Handler+0x8>

080006e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006ea:	4b18      	ldr	r3, [pc, #96]	@ (800074c <HAL_MspInit+0x68>)
 80006ec:	699b      	ldr	r3, [r3, #24]
 80006ee:	4a17      	ldr	r2, [pc, #92]	@ (800074c <HAL_MspInit+0x68>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	6193      	str	r3, [r2, #24]
 80006f6:	4b15      	ldr	r3, [pc, #84]	@ (800074c <HAL_MspInit+0x68>)
 80006f8:	699b      	ldr	r3, [r3, #24]
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000702:	4b12      	ldr	r3, [pc, #72]	@ (800074c <HAL_MspInit+0x68>)
 8000704:	69db      	ldr	r3, [r3, #28]
 8000706:	4a11      	ldr	r2, [pc, #68]	@ (800074c <HAL_MspInit+0x68>)
 8000708:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800070c:	61d3      	str	r3, [r2, #28]
 800070e:	4b0f      	ldr	r3, [pc, #60]	@ (800074c <HAL_MspInit+0x68>)
 8000710:	69db      	ldr	r3, [r3, #28]
 8000712:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800071a:	2200      	movs	r2, #0
 800071c:	210f      	movs	r1, #15
 800071e:	f06f 0001 	mvn.w	r0, #1
 8000722:	f000 ff1e 	bl	8001562 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000726:	4b0a      	ldr	r3, [pc, #40]	@ (8000750 <HAL_MspInit+0x6c>)
 8000728:	685b      	ldr	r3, [r3, #4]
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	4a04      	ldr	r2, [pc, #16]	@ (8000750 <HAL_MspInit+0x6c>)
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000742:	bf00      	nop
 8000744:	3710      	adds	r7, #16
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40021000 	.word	0x40021000
 8000750:	40010000 	.word	0x40010000

08000754 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b088      	sub	sp, #32
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	f107 0310 	add.w	r3, r7, #16
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a14      	ldr	r2, [pc, #80]	@ (80007c0 <HAL_ADC_MspInit+0x6c>)
 8000770:	4293      	cmp	r3, r2
 8000772:	d121      	bne.n	80007b8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000774:	4b13      	ldr	r3, [pc, #76]	@ (80007c4 <HAL_ADC_MspInit+0x70>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	4a12      	ldr	r2, [pc, #72]	@ (80007c4 <HAL_ADC_MspInit+0x70>)
 800077a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800077e:	6193      	str	r3, [r2, #24]
 8000780:	4b10      	ldr	r3, [pc, #64]	@ (80007c4 <HAL_ADC_MspInit+0x70>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800078c:	4b0d      	ldr	r3, [pc, #52]	@ (80007c4 <HAL_ADC_MspInit+0x70>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	4a0c      	ldr	r2, [pc, #48]	@ (80007c4 <HAL_ADC_MspInit+0x70>)
 8000792:	f043 0304 	orr.w	r3, r3, #4
 8000796:	6193      	str	r3, [r2, #24]
 8000798:	4b0a      	ldr	r3, [pc, #40]	@ (80007c4 <HAL_ADC_MspInit+0x70>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	f003 0304 	and.w	r3, r3, #4
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = JOY_X_Pin|JOY_Y_Pin;
 80007a4:	2303      	movs	r3, #3
 80007a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007a8:	2303      	movs	r3, #3
 80007aa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ac:	f107 0310 	add.w	r3, r7, #16
 80007b0:	4619      	mov	r1, r3
 80007b2:	4805      	ldr	r0, [pc, #20]	@ (80007c8 <HAL_ADC_MspInit+0x74>)
 80007b4:	f000 ff00 	bl	80015b8 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80007b8:	bf00      	nop
 80007ba:	3720      	adds	r7, #32
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40012400 	.word	0x40012400
 80007c4:	40021000 	.word	0x40021000
 80007c8:	40010800 	.word	0x40010800

080007cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	@ 0x28
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a1e      	ldr	r2, [pc, #120]	@ (8000860 <HAL_I2C_MspInit+0x94>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d134      	bne.n	8000856 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000864 <HAL_I2C_MspInit+0x98>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	4a1c      	ldr	r2, [pc, #112]	@ (8000864 <HAL_I2C_MspInit+0x98>)
 80007f2:	f043 0308 	orr.w	r3, r3, #8
 80007f6:	6193      	str	r3, [r2, #24]
 80007f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000864 <HAL_I2C_MspInit+0x98>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f003 0308 	and.w	r3, r3, #8
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000804:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800080a:	2312      	movs	r3, #18
 800080c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000812:	2303      	movs	r3, #3
 8000814:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	4619      	mov	r1, r3
 800081c:	4812      	ldr	r0, [pc, #72]	@ (8000868 <HAL_I2C_MspInit+0x9c>)
 800081e:	f000 fecb 	bl	80015b8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000822:	4b12      	ldr	r3, [pc, #72]	@ (800086c <HAL_I2C_MspInit+0xa0>)
 8000824:	685b      	ldr	r3, [r3, #4]
 8000826:	627b      	str	r3, [r7, #36]	@ 0x24
 8000828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800082a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800082e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000832:	f043 0302 	orr.w	r3, r3, #2
 8000836:	627b      	str	r3, [r7, #36]	@ 0x24
 8000838:	4a0c      	ldr	r2, [pc, #48]	@ (800086c <HAL_I2C_MspInit+0xa0>)
 800083a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800083c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800083e:	4b09      	ldr	r3, [pc, #36]	@ (8000864 <HAL_I2C_MspInit+0x98>)
 8000840:	69db      	ldr	r3, [r3, #28]
 8000842:	4a08      	ldr	r2, [pc, #32]	@ (8000864 <HAL_I2C_MspInit+0x98>)
 8000844:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000848:	61d3      	str	r3, [r2, #28]
 800084a:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <HAL_I2C_MspInit+0x98>)
 800084c:	69db      	ldr	r3, [r3, #28]
 800084e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000856:	bf00      	nop
 8000858:	3728      	adds	r7, #40	@ 0x28
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40005400 	.word	0x40005400
 8000864:	40021000 	.word	0x40021000
 8000868:	40010c00 	.word	0x40010c00
 800086c:	40010000 	.word	0x40010000

08000870 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b088      	sub	sp, #32
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000878:	f107 0310 	add.w	r3, r7, #16
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a1b      	ldr	r2, [pc, #108]	@ (80008f8 <HAL_SPI_MspInit+0x88>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d12f      	bne.n	80008f0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000890:	4b1a      	ldr	r3, [pc, #104]	@ (80008fc <HAL_SPI_MspInit+0x8c>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	4a19      	ldr	r2, [pc, #100]	@ (80008fc <HAL_SPI_MspInit+0x8c>)
 8000896:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800089a:	6193      	str	r3, [r2, #24]
 800089c:	4b17      	ldr	r3, [pc, #92]	@ (80008fc <HAL_SPI_MspInit+0x8c>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a8:	4b14      	ldr	r3, [pc, #80]	@ (80008fc <HAL_SPI_MspInit+0x8c>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	4a13      	ldr	r2, [pc, #76]	@ (80008fc <HAL_SPI_MspInit+0x8c>)
 80008ae:	f043 0304 	orr.w	r3, r3, #4
 80008b2:	6193      	str	r3, [r2, #24]
 80008b4:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <HAL_SPI_MspInit+0x8c>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	f003 0304 	and.w	r3, r3, #4
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80008c0:	23a0      	movs	r3, #160	@ 0xa0
 80008c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008c8:	2303      	movs	r3, #3
 80008ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008cc:	f107 0310 	add.w	r3, r7, #16
 80008d0:	4619      	mov	r1, r3
 80008d2:	480b      	ldr	r0, [pc, #44]	@ (8000900 <HAL_SPI_MspInit+0x90>)
 80008d4:	f000 fe70 	bl	80015b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008d8:	2340      	movs	r3, #64	@ 0x40
 80008da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e4:	f107 0310 	add.w	r3, r7, #16
 80008e8:	4619      	mov	r1, r3
 80008ea:	4805      	ldr	r0, [pc, #20]	@ (8000900 <HAL_SPI_MspInit+0x90>)
 80008ec:	f000 fe64 	bl	80015b8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80008f0:	bf00      	nop
 80008f2:	3720      	adds	r7, #32
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40013000 	.word	0x40013000
 80008fc:	40021000 	.word	0x40021000
 8000900:	40010800 	.word	0x40010800

08000904 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08a      	sub	sp, #40	@ 0x28
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a22      	ldr	r2, [pc, #136]	@ (80009a8 <HAL_UART_MspInit+0xa4>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d13d      	bne.n	80009a0 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000924:	4b21      	ldr	r3, [pc, #132]	@ (80009ac <HAL_UART_MspInit+0xa8>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	4a20      	ldr	r2, [pc, #128]	@ (80009ac <HAL_UART_MspInit+0xa8>)
 800092a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800092e:	6193      	str	r3, [r2, #24]
 8000930:	4b1e      	ldr	r3, [pc, #120]	@ (80009ac <HAL_UART_MspInit+0xa8>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800093c:	4b1b      	ldr	r3, [pc, #108]	@ (80009ac <HAL_UART_MspInit+0xa8>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	4a1a      	ldr	r2, [pc, #104]	@ (80009ac <HAL_UART_MspInit+0xa8>)
 8000942:	f043 0308 	orr.w	r3, r3, #8
 8000946:	6193      	str	r3, [r2, #24]
 8000948:	4b18      	ldr	r3, [pc, #96]	@ (80009ac <HAL_UART_MspInit+0xa8>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	f003 0308 	and.w	r3, r3, #8
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000954:	2340      	movs	r3, #64	@ 0x40
 8000956:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000958:	2302      	movs	r3, #2
 800095a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800095c:	2303      	movs	r3, #3
 800095e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	4619      	mov	r1, r3
 8000966:	4812      	ldr	r0, [pc, #72]	@ (80009b0 <HAL_UART_MspInit+0xac>)
 8000968:	f000 fe26 	bl	80015b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800096c:	2380      	movs	r3, #128	@ 0x80
 800096e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000970:	2300      	movs	r3, #0
 8000972:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	4619      	mov	r1, r3
 800097e:	480c      	ldr	r0, [pc, #48]	@ (80009b0 <HAL_UART_MspInit+0xac>)
 8000980:	f000 fe1a 	bl	80015b8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000984:	4b0b      	ldr	r3, [pc, #44]	@ (80009b4 <HAL_UART_MspInit+0xb0>)
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	627b      	str	r3, [r7, #36]	@ 0x24
 800098a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800098c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000990:	627b      	str	r3, [r7, #36]	@ 0x24
 8000992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000994:	f043 0304 	orr.w	r3, r3, #4
 8000998:	627b      	str	r3, [r7, #36]	@ 0x24
 800099a:	4a06      	ldr	r2, [pc, #24]	@ (80009b4 <HAL_UART_MspInit+0xb0>)
 800099c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800099e:	6053      	str	r3, [r2, #4]

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80009a0:	bf00      	nop
 80009a2:	3728      	adds	r7, #40	@ 0x28
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40013800 	.word	0x40013800
 80009ac:	40021000 	.word	0x40021000
 80009b0:	40010c00 	.word	0x40010c00
 80009b4:	40010000 	.word	0x40010000

080009b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08c      	sub	sp, #48	@ 0x30
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80009c8:	2300      	movs	r3, #0
 80009ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009ce:	4b2e      	ldr	r3, [pc, #184]	@ (8000a88 <HAL_InitTick+0xd0>)
 80009d0:	699b      	ldr	r3, [r3, #24]
 80009d2:	4a2d      	ldr	r2, [pc, #180]	@ (8000a88 <HAL_InitTick+0xd0>)
 80009d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80009d8:	6193      	str	r3, [r2, #24]
 80009da:	4b2b      	ldr	r3, [pc, #172]	@ (8000a88 <HAL_InitTick+0xd0>)
 80009dc:	699b      	ldr	r3, [r3, #24]
 80009de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009e6:	f107 020c 	add.w	r2, r7, #12
 80009ea:	f107 0310 	add.w	r3, r7, #16
 80009ee:	4611      	mov	r1, r2
 80009f0:	4618      	mov	r0, r3
 80009f2:	f001 fcc3 	bl	800237c <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80009f6:	f001 fcad 	bl	8002354 <HAL_RCC_GetPCLK2Freq>
 80009fa:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009fe:	4a23      	ldr	r2, [pc, #140]	@ (8000a8c <HAL_InitTick+0xd4>)
 8000a00:	fba2 2303 	umull	r2, r3, r2, r3
 8000a04:	0c9b      	lsrs	r3, r3, #18
 8000a06:	3b01      	subs	r3, #1
 8000a08:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a0a:	4b21      	ldr	r3, [pc, #132]	@ (8000a90 <HAL_InitTick+0xd8>)
 8000a0c:	4a21      	ldr	r2, [pc, #132]	@ (8000a94 <HAL_InitTick+0xdc>)
 8000a0e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a10:	4b1f      	ldr	r3, [pc, #124]	@ (8000a90 <HAL_InitTick+0xd8>)
 8000a12:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a16:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a18:	4a1d      	ldr	r2, [pc, #116]	@ (8000a90 <HAL_InitTick+0xd8>)
 8000a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a1c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a90 <HAL_InitTick+0xd8>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a24:	4b1a      	ldr	r3, [pc, #104]	@ (8000a90 <HAL_InitTick+0xd8>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a2a:	4b19      	ldr	r3, [pc, #100]	@ (8000a90 <HAL_InitTick+0xd8>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a30:	4817      	ldr	r0, [pc, #92]	@ (8000a90 <HAL_InitTick+0xd8>)
 8000a32:	f001 fee1 	bl	80027f8 <HAL_TIM_Base_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000a3c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d11b      	bne.n	8000a7c <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a44:	4812      	ldr	r0, [pc, #72]	@ (8000a90 <HAL_InitTick+0xd8>)
 8000a46:	f001 ff2f 	bl	80028a8 <HAL_TIM_Base_Start_IT>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000a50:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d111      	bne.n	8000a7c <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000a58:	2019      	movs	r0, #25
 8000a5a:	f000 fd9e 	bl	800159a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2b0f      	cmp	r3, #15
 8000a62:	d808      	bhi.n	8000a76 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000a64:	2200      	movs	r2, #0
 8000a66:	6879      	ldr	r1, [r7, #4]
 8000a68:	2019      	movs	r0, #25
 8000a6a:	f000 fd7a 	bl	8001562 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a98 <HAL_InitTick+0xe0>)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6013      	str	r3, [r2, #0]
 8000a74:	e002      	b.n	8000a7c <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
 8000a78:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a7c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3730      	adds	r7, #48	@ 0x30
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	431bde83 	.word	0x431bde83
 8000a90:	20000458 	.word	0x20000458
 8000a94:	40012c00 	.word	0x40012c00
 8000a98:	20000004 	.word	0x20000004

08000a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <NMI_Handler+0x4>

08000aa4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <HardFault_Handler+0x4>

08000aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <MemManage_Handler+0x4>

08000ab4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <BusFault_Handler+0x4>

08000abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <UsageFault_Handler+0x4>

08000ac4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr

08000ad0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ad4:	4802      	ldr	r0, [pc, #8]	@ (8000ae0 <TIM1_UP_IRQHandler+0x10>)
 8000ad6:	f001 ff33 	bl	8002940 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000458 	.word	0x20000458

08000ae4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr

08000af0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000af0:	f7ff fff8 	bl	8000ae4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000af4:	480b      	ldr	r0, [pc, #44]	@ (8000b24 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000af6:	490c      	ldr	r1, [pc, #48]	@ (8000b28 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000af8:	4a0c      	ldr	r2, [pc, #48]	@ (8000b2c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000afa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000afc:	e002      	b.n	8000b04 <LoopCopyDataInit>

08000afe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000afe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b02:	3304      	adds	r3, #4

08000b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b08:	d3f9      	bcc.n	8000afe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b0a:	4a09      	ldr	r2, [pc, #36]	@ (8000b30 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b0c:	4c09      	ldr	r4, [pc, #36]	@ (8000b34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b10:	e001      	b.n	8000b16 <LoopFillZerobss>

08000b12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b14:	3204      	adds	r2, #4

08000b16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b18:	d3fb      	bcc.n	8000b12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b1a:	f003 fbfd 	bl	8004318 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b1e:	f7ff fb35 	bl	800018c <main>
  bx lr
 8000b22:	4770      	bx	lr
  ldr r0, =_sdata
 8000b24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b28:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000b2c:	0800450c 	.word	0x0800450c
  ldr r2, =_sbss
 8000b30:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000b34:	20001330 	.word	0x20001330

08000b38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b38:	e7fe      	b.n	8000b38 <ADC1_2_IRQHandler>
	...

08000b3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b40:	4b08      	ldr	r3, [pc, #32]	@ (8000b64 <HAL_Init+0x28>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a07      	ldr	r2, [pc, #28]	@ (8000b64 <HAL_Init+0x28>)
 8000b46:	f043 0310 	orr.w	r3, r3, #16
 8000b4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b4c:	2003      	movs	r0, #3
 8000b4e:	f000 fcfd 	bl	800154c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b52:	200f      	movs	r0, #15
 8000b54:	f7ff ff30 	bl	80009b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b58:	f7ff fdc4 	bl	80006e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40022000 	.word	0x40022000

08000b68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b6c:	4b05      	ldr	r3, [pc, #20]	@ (8000b84 <HAL_IncTick+0x1c>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	461a      	mov	r2, r3
 8000b72:	4b05      	ldr	r3, [pc, #20]	@ (8000b88 <HAL_IncTick+0x20>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4413      	add	r3, r2
 8000b78:	4a03      	ldr	r2, [pc, #12]	@ (8000b88 <HAL_IncTick+0x20>)
 8000b7a:	6013      	str	r3, [r2, #0]
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr
 8000b84:	20000008 	.word	0x20000008
 8000b88:	200004a0 	.word	0x200004a0

08000b8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b90:	4b02      	ldr	r3, [pc, #8]	@ (8000b9c <HAL_GetTick+0x10>)
 8000b92:	681b      	ldr	r3, [r3, #0]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr
 8000b9c:	200004a0 	.word	0x200004a0

08000ba0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000bac:	2300      	movs	r3, #0
 8000bae:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d101      	bne.n	8000bc2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e0be      	b.n	8000d40 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d109      	bne.n	8000be4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f7ff fdb8 	bl	8000754 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f000 fbc5 	bl	8001374 <ADC_ConversionStop_Disable>
 8000bea:	4603      	mov	r3, r0
 8000bec:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bf2:	f003 0310 	and.w	r3, r3, #16
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	f040 8099 	bne.w	8000d2e <HAL_ADC_Init+0x18e>
 8000bfc:	7dfb      	ldrb	r3, [r7, #23]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	f040 8095 	bne.w	8000d2e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c08:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000c0c:	f023 0302 	bic.w	r3, r3, #2
 8000c10:	f043 0202 	orr.w	r2, r3, #2
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c20:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	7b1b      	ldrb	r3, [r3, #12]
 8000c26:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c28:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c2a:	68ba      	ldr	r2, [r7, #8]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c38:	d003      	beq.n	8000c42 <HAL_ADC_Init+0xa2>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d102      	bne.n	8000c48 <HAL_ADC_Init+0xa8>
 8000c42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c46:	e000      	b.n	8000c4a <HAL_ADC_Init+0xaa>
 8000c48:	2300      	movs	r3, #0
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	7d1b      	ldrb	r3, [r3, #20]
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d119      	bne.n	8000c8c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	7b1b      	ldrb	r3, [r3, #12]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d109      	bne.n	8000c74 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	3b01      	subs	r3, #1
 8000c66:	035a      	lsls	r2, r3, #13
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c70:	613b      	str	r3, [r7, #16]
 8000c72:	e00b      	b.n	8000c8c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c78:	f043 0220 	orr.w	r2, r3, #32
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c84:	f043 0201 	orr.w	r2, r3, #1
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	689a      	ldr	r2, [r3, #8]
 8000ca6:	4b28      	ldr	r3, [pc, #160]	@ (8000d48 <HAL_ADC_Init+0x1a8>)
 8000ca8:	4013      	ands	r3, r2
 8000caa:	687a      	ldr	r2, [r7, #4]
 8000cac:	6812      	ldr	r2, [r2, #0]
 8000cae:	68b9      	ldr	r1, [r7, #8]
 8000cb0:	430b      	orrs	r3, r1
 8000cb2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000cbc:	d003      	beq.n	8000cc6 <HAL_ADC_Init+0x126>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d104      	bne.n	8000cd0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	691b      	ldr	r3, [r3, #16]
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	051b      	lsls	r3, r3, #20
 8000cce:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cd6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	430a      	orrs	r2, r1
 8000ce2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	689a      	ldr	r2, [r3, #8]
 8000cea:	4b18      	ldr	r3, [pc, #96]	@ (8000d4c <HAL_ADC_Init+0x1ac>)
 8000cec:	4013      	ands	r3, r2
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d10b      	bne.n	8000d0c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cfe:	f023 0303 	bic.w	r3, r3, #3
 8000d02:	f043 0201 	orr.w	r2, r3, #1
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d0a:	e018      	b.n	8000d3e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d10:	f023 0312 	bic.w	r3, r3, #18
 8000d14:	f043 0210 	orr.w	r2, r3, #16
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d20:	f043 0201 	orr.w	r2, r3, #1
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d2c:	e007      	b.n	8000d3e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d32:	f043 0210 	orr.w	r2, r3, #16
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3718      	adds	r7, #24
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	ffe1f7fd 	.word	0xffe1f7fd
 8000d4c:	ff1f0efe 	.word	0xff1f0efe

08000d50 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d101      	bne.n	8000d6a <HAL_ADC_Start+0x1a>
 8000d66:	2302      	movs	r3, #2
 8000d68:	e098      	b.n	8000e9c <HAL_ADC_Start+0x14c>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f000 faa4 	bl	80012c0 <ADC_Enable>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f040 8087 	bne.w	8000e92 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000d8c:	f023 0301 	bic.w	r3, r3, #1
 8000d90:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a41      	ldr	r2, [pc, #260]	@ (8000ea4 <HAL_ADC_Start+0x154>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d105      	bne.n	8000dae <HAL_ADC_Start+0x5e>
 8000da2:	4b41      	ldr	r3, [pc, #260]	@ (8000ea8 <HAL_ADC_Start+0x158>)
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d115      	bne.n	8000dda <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000db2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d026      	beq.n	8000e16 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dcc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000dd0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000dd8:	e01d      	b.n	8000e16 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dde:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a2f      	ldr	r2, [pc, #188]	@ (8000ea8 <HAL_ADC_Start+0x158>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d004      	beq.n	8000dfa <HAL_ADC_Start+0xaa>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a2b      	ldr	r2, [pc, #172]	@ (8000ea4 <HAL_ADC_Start+0x154>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d10d      	bne.n	8000e16 <HAL_ADC_Start+0xc6>
 8000dfa:	4b2b      	ldr	r3, [pc, #172]	@ (8000ea8 <HAL_ADC_Start+0x158>)
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d007      	beq.n	8000e16 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e0a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000e0e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d006      	beq.n	8000e30 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e26:	f023 0206 	bic.w	r2, r3, #6
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000e2e:	e002      	b.n	8000e36 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2200      	movs	r2, #0
 8000e34:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f06f 0202 	mvn.w	r2, #2
 8000e46:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000e52:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000e56:	d113      	bne.n	8000e80 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e5c:	4a11      	ldr	r2, [pc, #68]	@ (8000ea4 <HAL_ADC_Start+0x154>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d105      	bne.n	8000e6e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e62:	4b11      	ldr	r3, [pc, #68]	@ (8000ea8 <HAL_ADC_Start+0x158>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d108      	bne.n	8000e80 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	689a      	ldr	r2, [r3, #8]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	e00c      	b.n	8000e9a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	689a      	ldr	r2, [r3, #8]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	e003      	b.n	8000e9a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2200      	movs	r2, #0
 8000e96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40012800 	.word	0x40012800
 8000ea8:	40012400 	.word	0x40012400

08000eac <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000eac:	b590      	push	{r4, r7, lr}
 8000eae:	b087      	sub	sp, #28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000ec2:	f7ff fe63 	bl	8000b8c <HAL_GetTick>
 8000ec6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d00b      	beq.n	8000eee <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000eda:	f043 0220 	orr.w	r2, r3, #32
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e0d3      	b.n	8001096 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d131      	bne.n	8000f60 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f02:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d12a      	bne.n	8000f60 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000f0a:	e021      	b.n	8000f50 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f12:	d01d      	beq.n	8000f50 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d007      	beq.n	8000f2a <HAL_ADC_PollForConversion+0x7e>
 8000f1a:	f7ff fe37 	bl	8000b8c <HAL_GetTick>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	683a      	ldr	r2, [r7, #0]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d212      	bcs.n	8000f50 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f003 0302 	and.w	r3, r3, #2
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d10b      	bne.n	8000f50 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f3c:	f043 0204 	orr.w	r2, r3, #4
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2200      	movs	r2, #0
 8000f48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e0a2      	b.n	8001096 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f003 0302 	and.w	r3, r3, #2
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d0d6      	beq.n	8000f0c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000f5e:	e070      	b.n	8001042 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000f60:	4b4f      	ldr	r3, [pc, #316]	@ (80010a0 <HAL_ADC_PollForConversion+0x1f4>)
 8000f62:	681c      	ldr	r4, [r3, #0]
 8000f64:	2002      	movs	r0, #2
 8000f66:	f001 fb0d 	bl	8002584 <HAL_RCCEx_GetPeriphCLKFreq>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	6919      	ldr	r1, [r3, #16]
 8000f76:	4b4b      	ldr	r3, [pc, #300]	@ (80010a4 <HAL_ADC_PollForConversion+0x1f8>)
 8000f78:	400b      	ands	r3, r1
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d118      	bne.n	8000fb0 <HAL_ADC_PollForConversion+0x104>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	68d9      	ldr	r1, [r3, #12]
 8000f84:	4b48      	ldr	r3, [pc, #288]	@ (80010a8 <HAL_ADC_PollForConversion+0x1fc>)
 8000f86:	400b      	ands	r3, r1
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d111      	bne.n	8000fb0 <HAL_ADC_PollForConversion+0x104>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	6919      	ldr	r1, [r3, #16]
 8000f92:	4b46      	ldr	r3, [pc, #280]	@ (80010ac <HAL_ADC_PollForConversion+0x200>)
 8000f94:	400b      	ands	r3, r1
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d108      	bne.n	8000fac <HAL_ADC_PollForConversion+0x100>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	68d9      	ldr	r1, [r3, #12]
 8000fa0:	4b43      	ldr	r3, [pc, #268]	@ (80010b0 <HAL_ADC_PollForConversion+0x204>)
 8000fa2:	400b      	ands	r3, r1
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d101      	bne.n	8000fac <HAL_ADC_PollForConversion+0x100>
 8000fa8:	2314      	movs	r3, #20
 8000faa:	e020      	b.n	8000fee <HAL_ADC_PollForConversion+0x142>
 8000fac:	2329      	movs	r3, #41	@ 0x29
 8000fae:	e01e      	b.n	8000fee <HAL_ADC_PollForConversion+0x142>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	6919      	ldr	r1, [r3, #16]
 8000fb6:	4b3d      	ldr	r3, [pc, #244]	@ (80010ac <HAL_ADC_PollForConversion+0x200>)
 8000fb8:	400b      	ands	r3, r1
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d106      	bne.n	8000fcc <HAL_ADC_PollForConversion+0x120>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	68d9      	ldr	r1, [r3, #12]
 8000fc4:	4b3a      	ldr	r3, [pc, #232]	@ (80010b0 <HAL_ADC_PollForConversion+0x204>)
 8000fc6:	400b      	ands	r3, r1
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d00d      	beq.n	8000fe8 <HAL_ADC_PollForConversion+0x13c>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	6919      	ldr	r1, [r3, #16]
 8000fd2:	4b38      	ldr	r3, [pc, #224]	@ (80010b4 <HAL_ADC_PollForConversion+0x208>)
 8000fd4:	400b      	ands	r3, r1
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d108      	bne.n	8000fec <HAL_ADC_PollForConversion+0x140>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	68d9      	ldr	r1, [r3, #12]
 8000fe0:	4b34      	ldr	r3, [pc, #208]	@ (80010b4 <HAL_ADC_PollForConversion+0x208>)
 8000fe2:	400b      	ands	r3, r1
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d101      	bne.n	8000fec <HAL_ADC_PollForConversion+0x140>
 8000fe8:	2354      	movs	r3, #84	@ 0x54
 8000fea:	e000      	b.n	8000fee <HAL_ADC_PollForConversion+0x142>
 8000fec:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000fee:	fb02 f303 	mul.w	r3, r2, r3
 8000ff2:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000ff4:	e021      	b.n	800103a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ffc:	d01a      	beq.n	8001034 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d007      	beq.n	8001014 <HAL_ADC_PollForConversion+0x168>
 8001004:	f7ff fdc2 	bl	8000b8c <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	683a      	ldr	r2, [r7, #0]
 8001010:	429a      	cmp	r2, r3
 8001012:	d20f      	bcs.n	8001034 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	429a      	cmp	r2, r3
 800101a:	d90b      	bls.n	8001034 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001020:	f043 0204 	orr.w	r2, r3, #4
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001030:	2303      	movs	r3, #3
 8001032:	e030      	b.n	8001096 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	3301      	adds	r3, #1
 8001038:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	429a      	cmp	r2, r3
 8001040:	d8d9      	bhi.n	8000ff6 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f06f 0212 	mvn.w	r2, #18
 800104a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001050:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001062:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001066:	d115      	bne.n	8001094 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800106c:	2b00      	cmp	r3, #0
 800106e:	d111      	bne.n	8001094 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001074:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001080:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d105      	bne.n	8001094 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800108c:	f043 0201 	orr.w	r2, r3, #1
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	371c      	adds	r7, #28
 800109a:	46bd      	mov	sp, r7
 800109c:	bd90      	pop	{r4, r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000000 	.word	0x20000000
 80010a4:	24924924 	.word	0x24924924
 80010a8:	00924924 	.word	0x00924924
 80010ac:	12492492 	.word	0x12492492
 80010b0:	00492492 	.word	0x00492492
 80010b4:	00249249 	.word	0x00249249

080010b8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr

080010d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80010de:	2300      	movs	r3, #0
 80010e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d101      	bne.n	80010f0 <HAL_ADC_ConfigChannel+0x20>
 80010ec:	2302      	movs	r3, #2
 80010ee:	e0dc      	b.n	80012aa <HAL_ADC_ConfigChannel+0x1da>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2201      	movs	r2, #1
 80010f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2b06      	cmp	r3, #6
 80010fe:	d81c      	bhi.n	800113a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685a      	ldr	r2, [r3, #4]
 800110a:	4613      	mov	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4413      	add	r3, r2
 8001110:	3b05      	subs	r3, #5
 8001112:	221f      	movs	r2, #31
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	4019      	ands	r1, r3
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	6818      	ldr	r0, [r3, #0]
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685a      	ldr	r2, [r3, #4]
 8001124:	4613      	mov	r3, r2
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	4413      	add	r3, r2
 800112a:	3b05      	subs	r3, #5
 800112c:	fa00 f203 	lsl.w	r2, r0, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	430a      	orrs	r2, r1
 8001136:	635a      	str	r2, [r3, #52]	@ 0x34
 8001138:	e03c      	b.n	80011b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	2b0c      	cmp	r3, #12
 8001140:	d81c      	bhi.n	800117c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	4613      	mov	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	4413      	add	r3, r2
 8001152:	3b23      	subs	r3, #35	@ 0x23
 8001154:	221f      	movs	r2, #31
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	4019      	ands	r1, r3
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	6818      	ldr	r0, [r3, #0]
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685a      	ldr	r2, [r3, #4]
 8001166:	4613      	mov	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4413      	add	r3, r2
 800116c:	3b23      	subs	r3, #35	@ 0x23
 800116e:	fa00 f203 	lsl.w	r2, r0, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	430a      	orrs	r2, r1
 8001178:	631a      	str	r2, [r3, #48]	@ 0x30
 800117a:	e01b      	b.n	80011b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685a      	ldr	r2, [r3, #4]
 8001186:	4613      	mov	r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4413      	add	r3, r2
 800118c:	3b41      	subs	r3, #65	@ 0x41
 800118e:	221f      	movs	r2, #31
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	4019      	ands	r1, r3
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	6818      	ldr	r0, [r3, #0]
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685a      	ldr	r2, [r3, #4]
 80011a0:	4613      	mov	r3, r2
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	4413      	add	r3, r2
 80011a6:	3b41      	subs	r3, #65	@ 0x41
 80011a8:	fa00 f203 	lsl.w	r2, r0, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	430a      	orrs	r2, r1
 80011b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b09      	cmp	r3, #9
 80011ba:	d91c      	bls.n	80011f6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	68d9      	ldr	r1, [r3, #12]
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	4613      	mov	r3, r2
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	4413      	add	r3, r2
 80011cc:	3b1e      	subs	r3, #30
 80011ce:	2207      	movs	r2, #7
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	4019      	ands	r1, r3
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	6898      	ldr	r0, [r3, #8]
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4613      	mov	r3, r2
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	4413      	add	r3, r2
 80011e6:	3b1e      	subs	r3, #30
 80011e8:	fa00 f203 	lsl.w	r2, r0, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	430a      	orrs	r2, r1
 80011f2:	60da      	str	r2, [r3, #12]
 80011f4:	e019      	b.n	800122a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	6919      	ldr	r1, [r3, #16]
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4613      	mov	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	4413      	add	r3, r2
 8001206:	2207      	movs	r2, #7
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	4019      	ands	r1, r3
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	6898      	ldr	r0, [r3, #8]
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4613      	mov	r3, r2
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	4413      	add	r3, r2
 800121e:	fa00 f203 	lsl.w	r2, r0, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	430a      	orrs	r2, r1
 8001228:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2b10      	cmp	r3, #16
 8001230:	d003      	beq.n	800123a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001236:	2b11      	cmp	r3, #17
 8001238:	d132      	bne.n	80012a0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a1d      	ldr	r2, [pc, #116]	@ (80012b4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d125      	bne.n	8001290 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d126      	bne.n	80012a0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001260:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2b10      	cmp	r3, #16
 8001268:	d11a      	bne.n	80012a0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800126a:	4b13      	ldr	r3, [pc, #76]	@ (80012b8 <HAL_ADC_ConfigChannel+0x1e8>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a13      	ldr	r2, [pc, #76]	@ (80012bc <HAL_ADC_ConfigChannel+0x1ec>)
 8001270:	fba2 2303 	umull	r2, r3, r2, r3
 8001274:	0c9a      	lsrs	r2, r3, #18
 8001276:	4613      	mov	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	4413      	add	r3, r2
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001280:	e002      	b.n	8001288 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	3b01      	subs	r3, #1
 8001286:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1f9      	bne.n	8001282 <HAL_ADC_ConfigChannel+0x1b2>
 800128e:	e007      	b.n	80012a0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001294:	f043 0220 	orr.w	r2, r3, #32
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3714      	adds	r7, #20
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr
 80012b4:	40012400 	.word	0x40012400
 80012b8:	20000000 	.word	0x20000000
 80012bc:	431bde83 	.word	0x431bde83

080012c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80012cc:	2300      	movs	r3, #0
 80012ce:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d040      	beq.n	8001360 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f042 0201 	orr.w	r2, r2, #1
 80012ec:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012ee:	4b1f      	ldr	r3, [pc, #124]	@ (800136c <ADC_Enable+0xac>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a1f      	ldr	r2, [pc, #124]	@ (8001370 <ADC_Enable+0xb0>)
 80012f4:	fba2 2303 	umull	r2, r3, r2, r3
 80012f8:	0c9b      	lsrs	r3, r3, #18
 80012fa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80012fc:	e002      	b.n	8001304 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	3b01      	subs	r3, #1
 8001302:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1f9      	bne.n	80012fe <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800130a:	f7ff fc3f 	bl	8000b8c <HAL_GetTick>
 800130e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001310:	e01f      	b.n	8001352 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001312:	f7ff fc3b 	bl	8000b8c <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d918      	bls.n	8001352 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	2b01      	cmp	r3, #1
 800132c:	d011      	beq.n	8001352 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001332:	f043 0210 	orr.w	r2, r3, #16
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800133e:	f043 0201 	orr.w	r2, r3, #1
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e007      	b.n	8001362 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	2b01      	cmp	r3, #1
 800135e:	d1d8      	bne.n	8001312 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000000 	.word	0x20000000
 8001370:	431bde83 	.word	0x431bde83

08001374 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800137c:	2300      	movs	r3, #0
 800137e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	2b01      	cmp	r3, #1
 800138c:	d12e      	bne.n	80013ec <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f022 0201 	bic.w	r2, r2, #1
 800139c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800139e:	f7ff fbf5 	bl	8000b8c <HAL_GetTick>
 80013a2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80013a4:	e01b      	b.n	80013de <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80013a6:	f7ff fbf1 	bl	8000b8c <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d914      	bls.n	80013de <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d10d      	bne.n	80013de <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013c6:	f043 0210 	orr.w	r2, r3, #16
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013d2:	f043 0201 	orr.w	r2, r3, #1
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e007      	b.n	80013ee <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d0dc      	beq.n	80013a6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001408:	4b0c      	ldr	r3, [pc, #48]	@ (800143c <__NVIC_SetPriorityGrouping+0x44>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001414:	4013      	ands	r3, r2
 8001416:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001420:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001424:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001428:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800142a:	4a04      	ldr	r2, [pc, #16]	@ (800143c <__NVIC_SetPriorityGrouping+0x44>)
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	60d3      	str	r3, [r2, #12]
}
 8001430:	bf00      	nop
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001444:	4b04      	ldr	r3, [pc, #16]	@ (8001458 <__NVIC_GetPriorityGrouping+0x18>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	0a1b      	lsrs	r3, r3, #8
 800144a:	f003 0307 	and.w	r3, r3, #7
}
 800144e:	4618      	mov	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146a:	2b00      	cmp	r3, #0
 800146c:	db0b      	blt.n	8001486 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	f003 021f 	and.w	r2, r3, #31
 8001474:	4906      	ldr	r1, [pc, #24]	@ (8001490 <__NVIC_EnableIRQ+0x34>)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	095b      	lsrs	r3, r3, #5
 800147c:	2001      	movs	r0, #1
 800147e:	fa00 f202 	lsl.w	r2, r0, r2
 8001482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr
 8001490:	e000e100 	.word	0xe000e100

08001494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	6039      	str	r1, [r7, #0]
 800149e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	db0a      	blt.n	80014be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	490c      	ldr	r1, [pc, #48]	@ (80014e0 <__NVIC_SetPriority+0x4c>)
 80014ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b2:	0112      	lsls	r2, r2, #4
 80014b4:	b2d2      	uxtb	r2, r2
 80014b6:	440b      	add	r3, r1
 80014b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014bc:	e00a      	b.n	80014d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	4908      	ldr	r1, [pc, #32]	@ (80014e4 <__NVIC_SetPriority+0x50>)
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	f003 030f 	and.w	r3, r3, #15
 80014ca:	3b04      	subs	r3, #4
 80014cc:	0112      	lsls	r2, r2, #4
 80014ce:	b2d2      	uxtb	r2, r2
 80014d0:	440b      	add	r3, r1
 80014d2:	761a      	strb	r2, [r3, #24]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000e100 	.word	0xe000e100
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b089      	sub	sp, #36	@ 0x24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	f1c3 0307 	rsb	r3, r3, #7
 8001502:	2b04      	cmp	r3, #4
 8001504:	bf28      	it	cs
 8001506:	2304      	movcs	r3, #4
 8001508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3304      	adds	r3, #4
 800150e:	2b06      	cmp	r3, #6
 8001510:	d902      	bls.n	8001518 <NVIC_EncodePriority+0x30>
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3b03      	subs	r3, #3
 8001516:	e000      	b.n	800151a <NVIC_EncodePriority+0x32>
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800151c:	f04f 32ff 	mov.w	r2, #4294967295
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43da      	mvns	r2, r3
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	401a      	ands	r2, r3
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001530:	f04f 31ff 	mov.w	r1, #4294967295
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	fa01 f303 	lsl.w	r3, r1, r3
 800153a:	43d9      	mvns	r1, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001540:	4313      	orrs	r3, r2
         );
}
 8001542:	4618      	mov	r0, r3
 8001544:	3724      	adds	r7, #36	@ 0x24
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr

0800154c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f7ff ff4f 	bl	80013f8 <__NVIC_SetPriorityGrouping>
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001562:	b580      	push	{r7, lr}
 8001564:	b086      	sub	sp, #24
 8001566:	af00      	add	r7, sp, #0
 8001568:	4603      	mov	r3, r0
 800156a:	60b9      	str	r1, [r7, #8]
 800156c:	607a      	str	r2, [r7, #4]
 800156e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001574:	f7ff ff64 	bl	8001440 <__NVIC_GetPriorityGrouping>
 8001578:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	68b9      	ldr	r1, [r7, #8]
 800157e:	6978      	ldr	r0, [r7, #20]
 8001580:	f7ff ffb2 	bl	80014e8 <NVIC_EncodePriority>
 8001584:	4602      	mov	r2, r0
 8001586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800158a:	4611      	mov	r1, r2
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ff81 	bl	8001494 <__NVIC_SetPriority>
}
 8001592:	bf00      	nop
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	4603      	mov	r3, r0
 80015a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff ff57 	bl	800145c <__NVIC_EnableIRQ>
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
	...

080015b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b08b      	sub	sp, #44	@ 0x2c
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015c2:	2300      	movs	r3, #0
 80015c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015c6:	2300      	movs	r3, #0
 80015c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ca:	e161      	b.n	8001890 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015cc:	2201      	movs	r2, #1
 80015ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	69fa      	ldr	r2, [r7, #28]
 80015dc:	4013      	ands	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	f040 8150 	bne.w	800188a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	4a97      	ldr	r2, [pc, #604]	@ (800184c <HAL_GPIO_Init+0x294>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d05e      	beq.n	80016b2 <HAL_GPIO_Init+0xfa>
 80015f4:	4a95      	ldr	r2, [pc, #596]	@ (800184c <HAL_GPIO_Init+0x294>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d875      	bhi.n	80016e6 <HAL_GPIO_Init+0x12e>
 80015fa:	4a95      	ldr	r2, [pc, #596]	@ (8001850 <HAL_GPIO_Init+0x298>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d058      	beq.n	80016b2 <HAL_GPIO_Init+0xfa>
 8001600:	4a93      	ldr	r2, [pc, #588]	@ (8001850 <HAL_GPIO_Init+0x298>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d86f      	bhi.n	80016e6 <HAL_GPIO_Init+0x12e>
 8001606:	4a93      	ldr	r2, [pc, #588]	@ (8001854 <HAL_GPIO_Init+0x29c>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d052      	beq.n	80016b2 <HAL_GPIO_Init+0xfa>
 800160c:	4a91      	ldr	r2, [pc, #580]	@ (8001854 <HAL_GPIO_Init+0x29c>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d869      	bhi.n	80016e6 <HAL_GPIO_Init+0x12e>
 8001612:	4a91      	ldr	r2, [pc, #580]	@ (8001858 <HAL_GPIO_Init+0x2a0>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d04c      	beq.n	80016b2 <HAL_GPIO_Init+0xfa>
 8001618:	4a8f      	ldr	r2, [pc, #572]	@ (8001858 <HAL_GPIO_Init+0x2a0>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d863      	bhi.n	80016e6 <HAL_GPIO_Init+0x12e>
 800161e:	4a8f      	ldr	r2, [pc, #572]	@ (800185c <HAL_GPIO_Init+0x2a4>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d046      	beq.n	80016b2 <HAL_GPIO_Init+0xfa>
 8001624:	4a8d      	ldr	r2, [pc, #564]	@ (800185c <HAL_GPIO_Init+0x2a4>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d85d      	bhi.n	80016e6 <HAL_GPIO_Init+0x12e>
 800162a:	2b12      	cmp	r3, #18
 800162c:	d82a      	bhi.n	8001684 <HAL_GPIO_Init+0xcc>
 800162e:	2b12      	cmp	r3, #18
 8001630:	d859      	bhi.n	80016e6 <HAL_GPIO_Init+0x12e>
 8001632:	a201      	add	r2, pc, #4	@ (adr r2, 8001638 <HAL_GPIO_Init+0x80>)
 8001634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001638:	080016b3 	.word	0x080016b3
 800163c:	0800168d 	.word	0x0800168d
 8001640:	0800169f 	.word	0x0800169f
 8001644:	080016e1 	.word	0x080016e1
 8001648:	080016e7 	.word	0x080016e7
 800164c:	080016e7 	.word	0x080016e7
 8001650:	080016e7 	.word	0x080016e7
 8001654:	080016e7 	.word	0x080016e7
 8001658:	080016e7 	.word	0x080016e7
 800165c:	080016e7 	.word	0x080016e7
 8001660:	080016e7 	.word	0x080016e7
 8001664:	080016e7 	.word	0x080016e7
 8001668:	080016e7 	.word	0x080016e7
 800166c:	080016e7 	.word	0x080016e7
 8001670:	080016e7 	.word	0x080016e7
 8001674:	080016e7 	.word	0x080016e7
 8001678:	080016e7 	.word	0x080016e7
 800167c:	08001695 	.word	0x08001695
 8001680:	080016a9 	.word	0x080016a9
 8001684:	4a76      	ldr	r2, [pc, #472]	@ (8001860 <HAL_GPIO_Init+0x2a8>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d013      	beq.n	80016b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800168a:	e02c      	b.n	80016e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	623b      	str	r3, [r7, #32]
          break;
 8001692:	e029      	b.n	80016e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	3304      	adds	r3, #4
 800169a:	623b      	str	r3, [r7, #32]
          break;
 800169c:	e024      	b.n	80016e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	3308      	adds	r3, #8
 80016a4:	623b      	str	r3, [r7, #32]
          break;
 80016a6:	e01f      	b.n	80016e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	330c      	adds	r3, #12
 80016ae:	623b      	str	r3, [r7, #32]
          break;
 80016b0:	e01a      	b.n	80016e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d102      	bne.n	80016c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016ba:	2304      	movs	r3, #4
 80016bc:	623b      	str	r3, [r7, #32]
          break;
 80016be:	e013      	b.n	80016e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d105      	bne.n	80016d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016c8:	2308      	movs	r3, #8
 80016ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	69fa      	ldr	r2, [r7, #28]
 80016d0:	611a      	str	r2, [r3, #16]
          break;
 80016d2:	e009      	b.n	80016e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016d4:	2308      	movs	r3, #8
 80016d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	69fa      	ldr	r2, [r7, #28]
 80016dc:	615a      	str	r2, [r3, #20]
          break;
 80016de:	e003      	b.n	80016e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016e0:	2300      	movs	r3, #0
 80016e2:	623b      	str	r3, [r7, #32]
          break;
 80016e4:	e000      	b.n	80016e8 <HAL_GPIO_Init+0x130>
          break;
 80016e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	2bff      	cmp	r3, #255	@ 0xff
 80016ec:	d801      	bhi.n	80016f2 <HAL_GPIO_Init+0x13a>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	e001      	b.n	80016f6 <HAL_GPIO_Init+0x13e>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	3304      	adds	r3, #4
 80016f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	2bff      	cmp	r3, #255	@ 0xff
 80016fc:	d802      	bhi.n	8001704 <HAL_GPIO_Init+0x14c>
 80016fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	e002      	b.n	800170a <HAL_GPIO_Init+0x152>
 8001704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001706:	3b08      	subs	r3, #8
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	210f      	movs	r1, #15
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	fa01 f303 	lsl.w	r3, r1, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	401a      	ands	r2, r3
 800171c:	6a39      	ldr	r1, [r7, #32]
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	fa01 f303 	lsl.w	r3, r1, r3
 8001724:	431a      	orrs	r2, r3
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001732:	2b00      	cmp	r3, #0
 8001734:	f000 80a9 	beq.w	800188a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001738:	4b4a      	ldr	r3, [pc, #296]	@ (8001864 <HAL_GPIO_Init+0x2ac>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	4a49      	ldr	r2, [pc, #292]	@ (8001864 <HAL_GPIO_Init+0x2ac>)
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	6193      	str	r3, [r2, #24]
 8001744:	4b47      	ldr	r3, [pc, #284]	@ (8001864 <HAL_GPIO_Init+0x2ac>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	60bb      	str	r3, [r7, #8]
 800174e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001750:	4a45      	ldr	r2, [pc, #276]	@ (8001868 <HAL_GPIO_Init+0x2b0>)
 8001752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001754:	089b      	lsrs	r3, r3, #2
 8001756:	3302      	adds	r3, #2
 8001758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800175c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800175e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001760:	f003 0303 	and.w	r3, r3, #3
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	220f      	movs	r2, #15
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	4013      	ands	r3, r2
 8001772:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4a3d      	ldr	r2, [pc, #244]	@ (800186c <HAL_GPIO_Init+0x2b4>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d00d      	beq.n	8001798 <HAL_GPIO_Init+0x1e0>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4a3c      	ldr	r2, [pc, #240]	@ (8001870 <HAL_GPIO_Init+0x2b8>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d007      	beq.n	8001794 <HAL_GPIO_Init+0x1dc>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4a3b      	ldr	r2, [pc, #236]	@ (8001874 <HAL_GPIO_Init+0x2bc>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d101      	bne.n	8001790 <HAL_GPIO_Init+0x1d8>
 800178c:	2302      	movs	r3, #2
 800178e:	e004      	b.n	800179a <HAL_GPIO_Init+0x1e2>
 8001790:	2303      	movs	r3, #3
 8001792:	e002      	b.n	800179a <HAL_GPIO_Init+0x1e2>
 8001794:	2301      	movs	r3, #1
 8001796:	e000      	b.n	800179a <HAL_GPIO_Init+0x1e2>
 8001798:	2300      	movs	r3, #0
 800179a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800179c:	f002 0203 	and.w	r2, r2, #3
 80017a0:	0092      	lsls	r2, r2, #2
 80017a2:	4093      	lsls	r3, r2
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017aa:	492f      	ldr	r1, [pc, #188]	@ (8001868 <HAL_GPIO_Init+0x2b0>)
 80017ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ae:	089b      	lsrs	r3, r3, #2
 80017b0:	3302      	adds	r3, #2
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d006      	beq.n	80017d2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017c4:	4b2c      	ldr	r3, [pc, #176]	@ (8001878 <HAL_GPIO_Init+0x2c0>)
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	492b      	ldr	r1, [pc, #172]	@ (8001878 <HAL_GPIO_Init+0x2c0>)
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	608b      	str	r3, [r1, #8]
 80017d0:	e006      	b.n	80017e0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017d2:	4b29      	ldr	r3, [pc, #164]	@ (8001878 <HAL_GPIO_Init+0x2c0>)
 80017d4:	689a      	ldr	r2, [r3, #8]
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	43db      	mvns	r3, r3
 80017da:	4927      	ldr	r1, [pc, #156]	@ (8001878 <HAL_GPIO_Init+0x2c0>)
 80017dc:	4013      	ands	r3, r2
 80017de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d006      	beq.n	80017fa <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017ec:	4b22      	ldr	r3, [pc, #136]	@ (8001878 <HAL_GPIO_Init+0x2c0>)
 80017ee:	68da      	ldr	r2, [r3, #12]
 80017f0:	4921      	ldr	r1, [pc, #132]	@ (8001878 <HAL_GPIO_Init+0x2c0>)
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	60cb      	str	r3, [r1, #12]
 80017f8:	e006      	b.n	8001808 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001878 <HAL_GPIO_Init+0x2c0>)
 80017fc:	68da      	ldr	r2, [r3, #12]
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	43db      	mvns	r3, r3
 8001802:	491d      	ldr	r1, [pc, #116]	@ (8001878 <HAL_GPIO_Init+0x2c0>)
 8001804:	4013      	ands	r3, r2
 8001806:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d006      	beq.n	8001822 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001814:	4b18      	ldr	r3, [pc, #96]	@ (8001878 <HAL_GPIO_Init+0x2c0>)
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	4917      	ldr	r1, [pc, #92]	@ (8001878 <HAL_GPIO_Init+0x2c0>)
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	4313      	orrs	r3, r2
 800181e:	604b      	str	r3, [r1, #4]
 8001820:	e006      	b.n	8001830 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001822:	4b15      	ldr	r3, [pc, #84]	@ (8001878 <HAL_GPIO_Init+0x2c0>)
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	43db      	mvns	r3, r3
 800182a:	4913      	ldr	r1, [pc, #76]	@ (8001878 <HAL_GPIO_Init+0x2c0>)
 800182c:	4013      	ands	r3, r2
 800182e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d01f      	beq.n	800187c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800183c:	4b0e      	ldr	r3, [pc, #56]	@ (8001878 <HAL_GPIO_Init+0x2c0>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	490d      	ldr	r1, [pc, #52]	@ (8001878 <HAL_GPIO_Init+0x2c0>)
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	4313      	orrs	r3, r2
 8001846:	600b      	str	r3, [r1, #0]
 8001848:	e01f      	b.n	800188a <HAL_GPIO_Init+0x2d2>
 800184a:	bf00      	nop
 800184c:	10320000 	.word	0x10320000
 8001850:	10310000 	.word	0x10310000
 8001854:	10220000 	.word	0x10220000
 8001858:	10210000 	.word	0x10210000
 800185c:	10120000 	.word	0x10120000
 8001860:	10110000 	.word	0x10110000
 8001864:	40021000 	.word	0x40021000
 8001868:	40010000 	.word	0x40010000
 800186c:	40010800 	.word	0x40010800
 8001870:	40010c00 	.word	0x40010c00
 8001874:	40011000 	.word	0x40011000
 8001878:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800187c:	4b0b      	ldr	r3, [pc, #44]	@ (80018ac <HAL_GPIO_Init+0x2f4>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	43db      	mvns	r3, r3
 8001884:	4909      	ldr	r1, [pc, #36]	@ (80018ac <HAL_GPIO_Init+0x2f4>)
 8001886:	4013      	ands	r3, r2
 8001888:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800188a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800188c:	3301      	adds	r3, #1
 800188e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001896:	fa22 f303 	lsr.w	r3, r2, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	f47f ae96 	bne.w	80015cc <HAL_GPIO_Init+0x14>
  }
}
 80018a0:	bf00      	nop
 80018a2:	bf00      	nop
 80018a4:	372c      	adds	r7, #44	@ 0x2c
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr
 80018ac:	40010400 	.word	0x40010400

080018b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	460b      	mov	r3, r1
 80018ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	887b      	ldrh	r3, [r7, #2]
 80018c2:	4013      	ands	r3, r2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d002      	beq.n	80018ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018c8:	2301      	movs	r3, #1
 80018ca:	73fb      	strb	r3, [r7, #15]
 80018cc:	e001      	b.n	80018d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018ce:	2300      	movs	r3, #0
 80018d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr

080018de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
 80018e6:	460b      	mov	r3, r1
 80018e8:	807b      	strh	r3, [r7, #2]
 80018ea:	4613      	mov	r3, r2
 80018ec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018ee:	787b      	ldrb	r3, [r7, #1]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d003      	beq.n	80018fc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018f4:	887a      	ldrh	r2, [r7, #2]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018fa:	e003      	b.n	8001904 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018fc:	887b      	ldrh	r3, [r7, #2]
 80018fe:	041a      	lsls	r2, r3, #16
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	611a      	str	r2, [r3, #16]
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr
	...

08001910 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d101      	bne.n	8001922 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e12b      	b.n	8001b7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b00      	cmp	r3, #0
 800192c:	d106      	bne.n	800193c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7fe ff48 	bl	80007cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2224      	movs	r2, #36	@ 0x24
 8001940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 0201 	bic.w	r2, r2, #1
 8001952:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001962:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001972:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001974:	f000 fcda 	bl	800232c <HAL_RCC_GetPCLK1Freq>
 8001978:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	4a81      	ldr	r2, [pc, #516]	@ (8001b84 <HAL_I2C_Init+0x274>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d807      	bhi.n	8001994 <HAL_I2C_Init+0x84>
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4a80      	ldr	r2, [pc, #512]	@ (8001b88 <HAL_I2C_Init+0x278>)
 8001988:	4293      	cmp	r3, r2
 800198a:	bf94      	ite	ls
 800198c:	2301      	movls	r3, #1
 800198e:	2300      	movhi	r3, #0
 8001990:	b2db      	uxtb	r3, r3
 8001992:	e006      	b.n	80019a2 <HAL_I2C_Init+0x92>
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	4a7d      	ldr	r2, [pc, #500]	@ (8001b8c <HAL_I2C_Init+0x27c>)
 8001998:	4293      	cmp	r3, r2
 800199a:	bf94      	ite	ls
 800199c:	2301      	movls	r3, #1
 800199e:	2300      	movhi	r3, #0
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e0e7      	b.n	8001b7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	4a78      	ldr	r2, [pc, #480]	@ (8001b90 <HAL_I2C_Init+0x280>)
 80019ae:	fba2 2303 	umull	r2, r3, r2, r3
 80019b2:	0c9b      	lsrs	r3, r3, #18
 80019b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	68ba      	ldr	r2, [r7, #8]
 80019c6:	430a      	orrs	r2, r1
 80019c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	4a6a      	ldr	r2, [pc, #424]	@ (8001b84 <HAL_I2C_Init+0x274>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d802      	bhi.n	80019e4 <HAL_I2C_Init+0xd4>
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	3301      	adds	r3, #1
 80019e2:	e009      	b.n	80019f8 <HAL_I2C_Init+0xe8>
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80019ea:	fb02 f303 	mul.w	r3, r2, r3
 80019ee:	4a69      	ldr	r2, [pc, #420]	@ (8001b94 <HAL_I2C_Init+0x284>)
 80019f0:	fba2 2303 	umull	r2, r3, r2, r3
 80019f4:	099b      	lsrs	r3, r3, #6
 80019f6:	3301      	adds	r3, #1
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	6812      	ldr	r2, [r2, #0]
 80019fc:	430b      	orrs	r3, r1
 80019fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001a0a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	495c      	ldr	r1, [pc, #368]	@ (8001b84 <HAL_I2C_Init+0x274>)
 8001a14:	428b      	cmp	r3, r1
 8001a16:	d819      	bhi.n	8001a4c <HAL_I2C_Init+0x13c>
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	1e59      	subs	r1, r3, #1
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a26:	1c59      	adds	r1, r3, #1
 8001a28:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001a2c:	400b      	ands	r3, r1
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d00a      	beq.n	8001a48 <HAL_I2C_Init+0x138>
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	1e59      	subs	r1, r3, #1
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a40:	3301      	adds	r3, #1
 8001a42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a46:	e051      	b.n	8001aec <HAL_I2C_Init+0x1dc>
 8001a48:	2304      	movs	r3, #4
 8001a4a:	e04f      	b.n	8001aec <HAL_I2C_Init+0x1dc>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d111      	bne.n	8001a78 <HAL_I2C_Init+0x168>
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	1e58      	subs	r0, r3, #1
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6859      	ldr	r1, [r3, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	440b      	add	r3, r1
 8001a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a66:	3301      	adds	r3, #1
 8001a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	bf0c      	ite	eq
 8001a70:	2301      	moveq	r3, #1
 8001a72:	2300      	movne	r3, #0
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	e012      	b.n	8001a9e <HAL_I2C_Init+0x18e>
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	1e58      	subs	r0, r3, #1
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6859      	ldr	r1, [r3, #4]
 8001a80:	460b      	mov	r3, r1
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	440b      	add	r3, r1
 8001a86:	0099      	lsls	r1, r3, #2
 8001a88:	440b      	add	r3, r1
 8001a8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a8e:	3301      	adds	r3, #1
 8001a90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	bf0c      	ite	eq
 8001a98:	2301      	moveq	r3, #1
 8001a9a:	2300      	movne	r3, #0
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <HAL_I2C_Init+0x196>
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e022      	b.n	8001aec <HAL_I2C_Init+0x1dc>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d10e      	bne.n	8001acc <HAL_I2C_Init+0x1bc>
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	1e58      	subs	r0, r3, #1
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6859      	ldr	r1, [r3, #4]
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	440b      	add	r3, r1
 8001abc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ac6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001aca:	e00f      	b.n	8001aec <HAL_I2C_Init+0x1dc>
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	1e58      	subs	r0, r3, #1
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6859      	ldr	r1, [r3, #4]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	440b      	add	r3, r1
 8001ada:	0099      	lsls	r1, r3, #2
 8001adc:	440b      	add	r3, r1
 8001ade:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ae8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001aec:	6879      	ldr	r1, [r7, #4]
 8001aee:	6809      	ldr	r1, [r1, #0]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	69da      	ldr	r2, [r3, #28]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	431a      	orrs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001b1a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	6911      	ldr	r1, [r2, #16]
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	68d2      	ldr	r2, [r2, #12]
 8001b26:	4311      	orrs	r1, r2
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	6812      	ldr	r2, [r2, #0]
 8001b2c:	430b      	orrs	r3, r1
 8001b2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	695a      	ldr	r2, [r3, #20]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	431a      	orrs	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f042 0201 	orr.w	r2, r2, #1
 8001b5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2220      	movs	r2, #32
 8001b66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	000186a0 	.word	0x000186a0
 8001b88:	001e847f 	.word	0x001e847f
 8001b8c:	003d08ff 	.word	0x003d08ff
 8001b90:	431bde83 	.word	0x431bde83
 8001b94:	10624dd3 	.word	0x10624dd3

08001b98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e272      	b.n	8002090 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f000 8087 	beq.w	8001cc6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bb8:	4b92      	ldr	r3, [pc, #584]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 030c 	and.w	r3, r3, #12
 8001bc0:	2b04      	cmp	r3, #4
 8001bc2:	d00c      	beq.n	8001bde <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bc4:	4b8f      	ldr	r3, [pc, #572]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 030c 	and.w	r3, r3, #12
 8001bcc:	2b08      	cmp	r3, #8
 8001bce:	d112      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x5e>
 8001bd0:	4b8c      	ldr	r3, [pc, #560]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bdc:	d10b      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bde:	4b89      	ldr	r3, [pc, #548]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d06c      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x12c>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d168      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e24c      	b.n	8002090 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bfe:	d106      	bne.n	8001c0e <HAL_RCC_OscConfig+0x76>
 8001c00:	4b80      	ldr	r3, [pc, #512]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a7f      	ldr	r2, [pc, #508]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c0a:	6013      	str	r3, [r2, #0]
 8001c0c:	e02e      	b.n	8001c6c <HAL_RCC_OscConfig+0xd4>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10c      	bne.n	8001c30 <HAL_RCC_OscConfig+0x98>
 8001c16:	4b7b      	ldr	r3, [pc, #492]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a7a      	ldr	r2, [pc, #488]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c20:	6013      	str	r3, [r2, #0]
 8001c22:	4b78      	ldr	r3, [pc, #480]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a77      	ldr	r2, [pc, #476]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c2c:	6013      	str	r3, [r2, #0]
 8001c2e:	e01d      	b.n	8001c6c <HAL_RCC_OscConfig+0xd4>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c38:	d10c      	bne.n	8001c54 <HAL_RCC_OscConfig+0xbc>
 8001c3a:	4b72      	ldr	r3, [pc, #456]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a71      	ldr	r2, [pc, #452]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c44:	6013      	str	r3, [r2, #0]
 8001c46:	4b6f      	ldr	r3, [pc, #444]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a6e      	ldr	r2, [pc, #440]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	e00b      	b.n	8001c6c <HAL_RCC_OscConfig+0xd4>
 8001c54:	4b6b      	ldr	r3, [pc, #428]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a6a      	ldr	r2, [pc, #424]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c5e:	6013      	str	r3, [r2, #0]
 8001c60:	4b68      	ldr	r3, [pc, #416]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a67      	ldr	r2, [pc, #412]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d013      	beq.n	8001c9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c74:	f7fe ff8a 	bl	8000b8c <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c7c:	f7fe ff86 	bl	8000b8c <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b64      	cmp	r3, #100	@ 0x64
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e200      	b.n	8002090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8e:	4b5d      	ldr	r3, [pc, #372]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0f0      	beq.n	8001c7c <HAL_RCC_OscConfig+0xe4>
 8001c9a:	e014      	b.n	8001cc6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9c:	f7fe ff76 	bl	8000b8c <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca4:	f7fe ff72 	bl	8000b8c <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b64      	cmp	r3, #100	@ 0x64
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e1ec      	b.n	8002090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cb6:	4b53      	ldr	r3, [pc, #332]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1f0      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x10c>
 8001cc2:	e000      	b.n	8001cc6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d063      	beq.n	8001d9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cd2:	4b4c      	ldr	r3, [pc, #304]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f003 030c 	and.w	r3, r3, #12
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00b      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cde:	4b49      	ldr	r3, [pc, #292]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f003 030c 	and.w	r3, r3, #12
 8001ce6:	2b08      	cmp	r3, #8
 8001ce8:	d11c      	bne.n	8001d24 <HAL_RCC_OscConfig+0x18c>
 8001cea:	4b46      	ldr	r3, [pc, #280]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d116      	bne.n	8001d24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cf6:	4b43      	ldr	r3, [pc, #268]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d005      	beq.n	8001d0e <HAL_RCC_OscConfig+0x176>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d001      	beq.n	8001d0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e1c0      	b.n	8002090 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d0e:	4b3d      	ldr	r3, [pc, #244]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	4939      	ldr	r1, [pc, #228]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d22:	e03a      	b.n	8001d9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d020      	beq.n	8001d6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d2c:	4b36      	ldr	r3, [pc, #216]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d32:	f7fe ff2b 	bl	8000b8c <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d38:	e008      	b.n	8001d4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d3a:	f7fe ff27 	bl	8000b8c <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e1a1      	b.n	8002090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d4c:	4b2d      	ldr	r3, [pc, #180]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0f0      	beq.n	8001d3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d58:	4b2a      	ldr	r3, [pc, #168]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	695b      	ldr	r3, [r3, #20]
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	4927      	ldr	r1, [pc, #156]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	600b      	str	r3, [r1, #0]
 8001d6c:	e015      	b.n	8001d9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d6e:	4b26      	ldr	r3, [pc, #152]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d74:	f7fe ff0a 	bl	8000b8c <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d7c:	f7fe ff06 	bl	8000b8c <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e180      	b.n	8002090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d8e:	4b1d      	ldr	r3, [pc, #116]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1f0      	bne.n	8001d7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0308 	and.w	r3, r3, #8
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d03a      	beq.n	8001e1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d019      	beq.n	8001de2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dae:	4b17      	ldr	r3, [pc, #92]	@ (8001e0c <HAL_RCC_OscConfig+0x274>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db4:	f7fe feea 	bl	8000b8c <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dbc:	f7fe fee6 	bl	8000b8c <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e160      	b.n	8002090 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dce:	4b0d      	ldr	r3, [pc, #52]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d0f0      	beq.n	8001dbc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001dda:	2001      	movs	r0, #1
 8001ddc:	f000 fafe 	bl	80023dc <RCC_Delay>
 8001de0:	e01c      	b.n	8001e1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001de2:	4b0a      	ldr	r3, [pc, #40]	@ (8001e0c <HAL_RCC_OscConfig+0x274>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de8:	f7fe fed0 	bl	8000b8c <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dee:	e00f      	b.n	8001e10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df0:	f7fe fecc 	bl	8000b8c <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d908      	bls.n	8001e10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e146      	b.n	8002090 <HAL_RCC_OscConfig+0x4f8>
 8001e02:	bf00      	nop
 8001e04:	40021000 	.word	0x40021000
 8001e08:	42420000 	.word	0x42420000
 8001e0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e10:	4b92      	ldr	r3, [pc, #584]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1e9      	bne.n	8001df0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f000 80a6 	beq.w	8001f76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e2e:	4b8b      	ldr	r3, [pc, #556]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10d      	bne.n	8001e56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e3a:	4b88      	ldr	r3, [pc, #544]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	4a87      	ldr	r2, [pc, #540]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001e40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e44:	61d3      	str	r3, [r2, #28]
 8001e46:	4b85      	ldr	r3, [pc, #532]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e4e:	60bb      	str	r3, [r7, #8]
 8001e50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e52:	2301      	movs	r3, #1
 8001e54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e56:	4b82      	ldr	r3, [pc, #520]	@ (8002060 <HAL_RCC_OscConfig+0x4c8>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d118      	bne.n	8001e94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e62:	4b7f      	ldr	r3, [pc, #508]	@ (8002060 <HAL_RCC_OscConfig+0x4c8>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a7e      	ldr	r2, [pc, #504]	@ (8002060 <HAL_RCC_OscConfig+0x4c8>)
 8001e68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e6e:	f7fe fe8d 	bl	8000b8c <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e76:	f7fe fe89 	bl	8000b8c <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b64      	cmp	r3, #100	@ 0x64
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e103      	b.n	8002090 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e88:	4b75      	ldr	r3, [pc, #468]	@ (8002060 <HAL_RCC_OscConfig+0x4c8>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0f0      	beq.n	8001e76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d106      	bne.n	8001eaa <HAL_RCC_OscConfig+0x312>
 8001e9c:	4b6f      	ldr	r3, [pc, #444]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	4a6e      	ldr	r2, [pc, #440]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	6213      	str	r3, [r2, #32]
 8001ea8:	e02d      	b.n	8001f06 <HAL_RCC_OscConfig+0x36e>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10c      	bne.n	8001ecc <HAL_RCC_OscConfig+0x334>
 8001eb2:	4b6a      	ldr	r3, [pc, #424]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001eb4:	6a1b      	ldr	r3, [r3, #32]
 8001eb6:	4a69      	ldr	r2, [pc, #420]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001eb8:	f023 0301 	bic.w	r3, r3, #1
 8001ebc:	6213      	str	r3, [r2, #32]
 8001ebe:	4b67      	ldr	r3, [pc, #412]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	4a66      	ldr	r2, [pc, #408]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001ec4:	f023 0304 	bic.w	r3, r3, #4
 8001ec8:	6213      	str	r3, [r2, #32]
 8001eca:	e01c      	b.n	8001f06 <HAL_RCC_OscConfig+0x36e>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	2b05      	cmp	r3, #5
 8001ed2:	d10c      	bne.n	8001eee <HAL_RCC_OscConfig+0x356>
 8001ed4:	4b61      	ldr	r3, [pc, #388]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	4a60      	ldr	r2, [pc, #384]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001eda:	f043 0304 	orr.w	r3, r3, #4
 8001ede:	6213      	str	r3, [r2, #32]
 8001ee0:	4b5e      	ldr	r3, [pc, #376]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	4a5d      	ldr	r2, [pc, #372]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001ee6:	f043 0301 	orr.w	r3, r3, #1
 8001eea:	6213      	str	r3, [r2, #32]
 8001eec:	e00b      	b.n	8001f06 <HAL_RCC_OscConfig+0x36e>
 8001eee:	4b5b      	ldr	r3, [pc, #364]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001ef0:	6a1b      	ldr	r3, [r3, #32]
 8001ef2:	4a5a      	ldr	r2, [pc, #360]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001ef4:	f023 0301 	bic.w	r3, r3, #1
 8001ef8:	6213      	str	r3, [r2, #32]
 8001efa:	4b58      	ldr	r3, [pc, #352]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	4a57      	ldr	r2, [pc, #348]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001f00:	f023 0304 	bic.w	r3, r3, #4
 8001f04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d015      	beq.n	8001f3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f0e:	f7fe fe3d 	bl	8000b8c <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f14:	e00a      	b.n	8001f2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f16:	f7fe fe39 	bl	8000b8c <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e0b1      	b.n	8002090 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f2c:	4b4b      	ldr	r3, [pc, #300]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0ee      	beq.n	8001f16 <HAL_RCC_OscConfig+0x37e>
 8001f38:	e014      	b.n	8001f64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f3a:	f7fe fe27 	bl	8000b8c <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f40:	e00a      	b.n	8001f58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f42:	f7fe fe23 	bl	8000b8c <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e09b      	b.n	8002090 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f58:	4b40      	ldr	r3, [pc, #256]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1ee      	bne.n	8001f42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f64:	7dfb      	ldrb	r3, [r7, #23]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d105      	bne.n	8001f76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f6a:	4b3c      	ldr	r3, [pc, #240]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	4a3b      	ldr	r2, [pc, #236]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001f70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 8087 	beq.w	800208e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f80:	4b36      	ldr	r3, [pc, #216]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 030c 	and.w	r3, r3, #12
 8001f88:	2b08      	cmp	r3, #8
 8001f8a:	d061      	beq.n	8002050 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	69db      	ldr	r3, [r3, #28]
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d146      	bne.n	8002022 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f94:	4b33      	ldr	r3, [pc, #204]	@ (8002064 <HAL_RCC_OscConfig+0x4cc>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9a:	f7fe fdf7 	bl	8000b8c <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fa0:	e008      	b.n	8001fb4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa2:	f7fe fdf3 	bl	8000b8c <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e06d      	b.n	8002090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb4:	4b29      	ldr	r3, [pc, #164]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1f0      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fc8:	d108      	bne.n	8001fdc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fca:	4b24      	ldr	r3, [pc, #144]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	4921      	ldr	r1, [pc, #132]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fdc:	4b1f      	ldr	r3, [pc, #124]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a19      	ldr	r1, [r3, #32]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fec:	430b      	orrs	r3, r1
 8001fee:	491b      	ldr	r1, [pc, #108]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ff4:	4b1b      	ldr	r3, [pc, #108]	@ (8002064 <HAL_RCC_OscConfig+0x4cc>)
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffa:	f7fe fdc7 	bl	8000b8c <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002000:	e008      	b.n	8002014 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002002:	f7fe fdc3 	bl	8000b8c <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e03d      	b.n	8002090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002014:	4b11      	ldr	r3, [pc, #68]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0f0      	beq.n	8002002 <HAL_RCC_OscConfig+0x46a>
 8002020:	e035      	b.n	800208e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002022:	4b10      	ldr	r3, [pc, #64]	@ (8002064 <HAL_RCC_OscConfig+0x4cc>)
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002028:	f7fe fdb0 	bl	8000b8c <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002030:	f7fe fdac 	bl	8000b8c <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e026      	b.n	8002090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002042:	4b06      	ldr	r3, [pc, #24]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1f0      	bne.n	8002030 <HAL_RCC_OscConfig+0x498>
 800204e:	e01e      	b.n	800208e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	69db      	ldr	r3, [r3, #28]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d107      	bne.n	8002068 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e019      	b.n	8002090 <HAL_RCC_OscConfig+0x4f8>
 800205c:	40021000 	.word	0x40021000
 8002060:	40007000 	.word	0x40007000
 8002064:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002068:	4b0b      	ldr	r3, [pc, #44]	@ (8002098 <HAL_RCC_OscConfig+0x500>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	429a      	cmp	r2, r3
 800207a:	d106      	bne.n	800208a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002086:	429a      	cmp	r2, r3
 8002088:	d001      	beq.n	800208e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e000      	b.n	8002090 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40021000 	.word	0x40021000

0800209c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e0d0      	b.n	8002252 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020b0:	4b6a      	ldr	r3, [pc, #424]	@ (800225c <HAL_RCC_ClockConfig+0x1c0>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0307 	and.w	r3, r3, #7
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d910      	bls.n	80020e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020be:	4b67      	ldr	r3, [pc, #412]	@ (800225c <HAL_RCC_ClockConfig+0x1c0>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f023 0207 	bic.w	r2, r3, #7
 80020c6:	4965      	ldr	r1, [pc, #404]	@ (800225c <HAL_RCC_ClockConfig+0x1c0>)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ce:	4b63      	ldr	r3, [pc, #396]	@ (800225c <HAL_RCC_ClockConfig+0x1c0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d001      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e0b8      	b.n	8002252 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d020      	beq.n	800212e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d005      	beq.n	8002104 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020f8:	4b59      	ldr	r3, [pc, #356]	@ (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	4a58      	ldr	r2, [pc, #352]	@ (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 80020fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002102:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0308 	and.w	r3, r3, #8
 800210c:	2b00      	cmp	r3, #0
 800210e:	d005      	beq.n	800211c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002110:	4b53      	ldr	r3, [pc, #332]	@ (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	4a52      	ldr	r2, [pc, #328]	@ (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 8002116:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800211a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800211c:	4b50      	ldr	r3, [pc, #320]	@ (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	494d      	ldr	r1, [pc, #308]	@ (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 800212a:	4313      	orrs	r3, r2
 800212c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	d040      	beq.n	80021bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d107      	bne.n	8002152 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002142:	4b47      	ldr	r3, [pc, #284]	@ (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d115      	bne.n	800217a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e07f      	b.n	8002252 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b02      	cmp	r3, #2
 8002158:	d107      	bne.n	800216a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800215a:	4b41      	ldr	r3, [pc, #260]	@ (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d109      	bne.n	800217a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e073      	b.n	8002252 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800216a:	4b3d      	ldr	r3, [pc, #244]	@ (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e06b      	b.n	8002252 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800217a:	4b39      	ldr	r3, [pc, #228]	@ (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f023 0203 	bic.w	r2, r3, #3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	4936      	ldr	r1, [pc, #216]	@ (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 8002188:	4313      	orrs	r3, r2
 800218a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800218c:	f7fe fcfe 	bl	8000b8c <HAL_GetTick>
 8002190:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002192:	e00a      	b.n	80021aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002194:	f7fe fcfa 	bl	8000b8c <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e053      	b.n	8002252 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021aa:	4b2d      	ldr	r3, [pc, #180]	@ (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f003 020c 	and.w	r2, r3, #12
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d1eb      	bne.n	8002194 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021bc:	4b27      	ldr	r3, [pc, #156]	@ (800225c <HAL_RCC_ClockConfig+0x1c0>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0307 	and.w	r3, r3, #7
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d210      	bcs.n	80021ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ca:	4b24      	ldr	r3, [pc, #144]	@ (800225c <HAL_RCC_ClockConfig+0x1c0>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f023 0207 	bic.w	r2, r3, #7
 80021d2:	4922      	ldr	r1, [pc, #136]	@ (800225c <HAL_RCC_ClockConfig+0x1c0>)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021da:	4b20      	ldr	r3, [pc, #128]	@ (800225c <HAL_RCC_ClockConfig+0x1c0>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d001      	beq.n	80021ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e032      	b.n	8002252 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0304 	and.w	r3, r3, #4
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d008      	beq.n	800220a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021f8:	4b19      	ldr	r3, [pc, #100]	@ (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	4916      	ldr	r1, [pc, #88]	@ (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 8002206:	4313      	orrs	r3, r2
 8002208:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0308 	and.w	r3, r3, #8
 8002212:	2b00      	cmp	r3, #0
 8002214:	d009      	beq.n	800222a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002216:	4b12      	ldr	r3, [pc, #72]	@ (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	490e      	ldr	r1, [pc, #56]	@ (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 8002226:	4313      	orrs	r3, r2
 8002228:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800222a:	f000 f821 	bl	8002270 <HAL_RCC_GetSysClockFreq>
 800222e:	4602      	mov	r2, r0
 8002230:	4b0b      	ldr	r3, [pc, #44]	@ (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	091b      	lsrs	r3, r3, #4
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	490a      	ldr	r1, [pc, #40]	@ (8002264 <HAL_RCC_ClockConfig+0x1c8>)
 800223c:	5ccb      	ldrb	r3, [r1, r3]
 800223e:	fa22 f303 	lsr.w	r3, r2, r3
 8002242:	4a09      	ldr	r2, [pc, #36]	@ (8002268 <HAL_RCC_ClockConfig+0x1cc>)
 8002244:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002246:	4b09      	ldr	r3, [pc, #36]	@ (800226c <HAL_RCC_ClockConfig+0x1d0>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f7fe fbb4 	bl	80009b8 <HAL_InitTick>

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40022000 	.word	0x40022000
 8002260:	40021000 	.word	0x40021000
 8002264:	080044c4 	.word	0x080044c4
 8002268:	20000000 	.word	0x20000000
 800226c:	20000004 	.word	0x20000004

08002270 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002270:	b480      	push	{r7}
 8002272:	b087      	sub	sp, #28
 8002274:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002276:	2300      	movs	r3, #0
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	2300      	movs	r3, #0
 800227c:	60bb      	str	r3, [r7, #8]
 800227e:	2300      	movs	r3, #0
 8002280:	617b      	str	r3, [r7, #20]
 8002282:	2300      	movs	r3, #0
 8002284:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002286:	2300      	movs	r3, #0
 8002288:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800228a:	4b1e      	ldr	r3, [pc, #120]	@ (8002304 <HAL_RCC_GetSysClockFreq+0x94>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f003 030c 	and.w	r3, r3, #12
 8002296:	2b04      	cmp	r3, #4
 8002298:	d002      	beq.n	80022a0 <HAL_RCC_GetSysClockFreq+0x30>
 800229a:	2b08      	cmp	r3, #8
 800229c:	d003      	beq.n	80022a6 <HAL_RCC_GetSysClockFreq+0x36>
 800229e:	e027      	b.n	80022f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022a0:	4b19      	ldr	r3, [pc, #100]	@ (8002308 <HAL_RCC_GetSysClockFreq+0x98>)
 80022a2:	613b      	str	r3, [r7, #16]
      break;
 80022a4:	e027      	b.n	80022f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	0c9b      	lsrs	r3, r3, #18
 80022aa:	f003 030f 	and.w	r3, r3, #15
 80022ae:	4a17      	ldr	r2, [pc, #92]	@ (800230c <HAL_RCC_GetSysClockFreq+0x9c>)
 80022b0:	5cd3      	ldrb	r3, [r2, r3]
 80022b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d010      	beq.n	80022e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022be:	4b11      	ldr	r3, [pc, #68]	@ (8002304 <HAL_RCC_GetSysClockFreq+0x94>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	0c5b      	lsrs	r3, r3, #17
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	4a11      	ldr	r2, [pc, #68]	@ (8002310 <HAL_RCC_GetSysClockFreq+0xa0>)
 80022ca:	5cd3      	ldrb	r3, [r2, r3]
 80022cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002308 <HAL_RCC_GetSysClockFreq+0x98>)
 80022d2:	fb03 f202 	mul.w	r2, r3, r2
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022dc:	617b      	str	r3, [r7, #20]
 80022de:	e004      	b.n	80022ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a0c      	ldr	r2, [pc, #48]	@ (8002314 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022e4:	fb02 f303 	mul.w	r3, r2, r3
 80022e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	613b      	str	r3, [r7, #16]
      break;
 80022ee:	e002      	b.n	80022f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022f0:	4b05      	ldr	r3, [pc, #20]	@ (8002308 <HAL_RCC_GetSysClockFreq+0x98>)
 80022f2:	613b      	str	r3, [r7, #16]
      break;
 80022f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022f6:	693b      	ldr	r3, [r7, #16]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	371c      	adds	r7, #28
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bc80      	pop	{r7}
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	40021000 	.word	0x40021000
 8002308:	007a1200 	.word	0x007a1200
 800230c:	080044dc 	.word	0x080044dc
 8002310:	080044ec 	.word	0x080044ec
 8002314:	003d0900 	.word	0x003d0900

08002318 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800231c:	4b02      	ldr	r3, [pc, #8]	@ (8002328 <HAL_RCC_GetHCLKFreq+0x10>)
 800231e:	681b      	ldr	r3, [r3, #0]
}
 8002320:	4618      	mov	r0, r3
 8002322:	46bd      	mov	sp, r7
 8002324:	bc80      	pop	{r7}
 8002326:	4770      	bx	lr
 8002328:	20000000 	.word	0x20000000

0800232c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002330:	f7ff fff2 	bl	8002318 <HAL_RCC_GetHCLKFreq>
 8002334:	4602      	mov	r2, r0
 8002336:	4b05      	ldr	r3, [pc, #20]	@ (800234c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	0a1b      	lsrs	r3, r3, #8
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	4903      	ldr	r1, [pc, #12]	@ (8002350 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002342:	5ccb      	ldrb	r3, [r1, r3]
 8002344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002348:	4618      	mov	r0, r3
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40021000 	.word	0x40021000
 8002350:	080044d4 	.word	0x080044d4

08002354 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002358:	f7ff ffde 	bl	8002318 <HAL_RCC_GetHCLKFreq>
 800235c:	4602      	mov	r2, r0
 800235e:	4b05      	ldr	r3, [pc, #20]	@ (8002374 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	0adb      	lsrs	r3, r3, #11
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	4903      	ldr	r1, [pc, #12]	@ (8002378 <HAL_RCC_GetPCLK2Freq+0x24>)
 800236a:	5ccb      	ldrb	r3, [r1, r3]
 800236c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002370:	4618      	mov	r0, r3
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40021000 	.word	0x40021000
 8002378:	080044d4 	.word	0x080044d4

0800237c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	220f      	movs	r2, #15
 800238a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800238c:	4b11      	ldr	r3, [pc, #68]	@ (80023d4 <HAL_RCC_GetClockConfig+0x58>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 0203 	and.w	r2, r3, #3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002398:	4b0e      	ldr	r3, [pc, #56]	@ (80023d4 <HAL_RCC_GetClockConfig+0x58>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80023a4:	4b0b      	ldr	r3, [pc, #44]	@ (80023d4 <HAL_RCC_GetClockConfig+0x58>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80023b0:	4b08      	ldr	r3, [pc, #32]	@ (80023d4 <HAL_RCC_GetClockConfig+0x58>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	08db      	lsrs	r3, r3, #3
 80023b6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80023be:	4b06      	ldr	r3, [pc, #24]	@ (80023d8 <HAL_RCC_GetClockConfig+0x5c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0207 	and.w	r2, r3, #7
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr
 80023d4:	40021000 	.word	0x40021000
 80023d8:	40022000 	.word	0x40022000

080023dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002410 <RCC_Delay+0x34>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a0a      	ldr	r2, [pc, #40]	@ (8002414 <RCC_Delay+0x38>)
 80023ea:	fba2 2303 	umull	r2, r3, r2, r3
 80023ee:	0a5b      	lsrs	r3, r3, #9
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	fb02 f303 	mul.w	r3, r2, r3
 80023f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023f8:	bf00      	nop
  }
  while (Delay --);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	1e5a      	subs	r2, r3, #1
 80023fe:	60fa      	str	r2, [r7, #12]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1f9      	bne.n	80023f8 <RCC_Delay+0x1c>
}
 8002404:	bf00      	nop
 8002406:	bf00      	nop
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr
 8002410:	20000000 	.word	0x20000000
 8002414:	10624dd3 	.word	0x10624dd3

08002418 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002420:	2300      	movs	r3, #0
 8002422:	613b      	str	r3, [r7, #16]
 8002424:	2300      	movs	r3, #0
 8002426:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	2b00      	cmp	r3, #0
 8002432:	d07d      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002434:	2300      	movs	r3, #0
 8002436:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002438:	4b4f      	ldr	r3, [pc, #316]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800243a:	69db      	ldr	r3, [r3, #28]
 800243c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10d      	bne.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002444:	4b4c      	ldr	r3, [pc, #304]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002446:	69db      	ldr	r3, [r3, #28]
 8002448:	4a4b      	ldr	r2, [pc, #300]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800244a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800244e:	61d3      	str	r3, [r2, #28]
 8002450:	4b49      	ldr	r3, [pc, #292]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002458:	60bb      	str	r3, [r7, #8]
 800245a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800245c:	2301      	movs	r3, #1
 800245e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002460:	4b46      	ldr	r3, [pc, #280]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002468:	2b00      	cmp	r3, #0
 800246a:	d118      	bne.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800246c:	4b43      	ldr	r3, [pc, #268]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a42      	ldr	r2, [pc, #264]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002472:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002476:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002478:	f7fe fb88 	bl	8000b8c <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800247e:	e008      	b.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002480:	f7fe fb84 	bl	8000b8c <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b64      	cmp	r3, #100	@ 0x64
 800248c:	d901      	bls.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e06d      	b.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002492:	4b3a      	ldr	r3, [pc, #232]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0f0      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800249e:	4b36      	ldr	r3, [pc, #216]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024a6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d02e      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d027      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024bc:	4b2e      	ldr	r3, [pc, #184]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024c4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024c6:	4b2e      	ldr	r3, [pc, #184]	@ (8002580 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024c8:	2201      	movs	r2, #1
 80024ca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024cc:	4b2c      	ldr	r3, [pc, #176]	@ (8002580 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80024d2:	4a29      	ldr	r2, [pc, #164]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d014      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e2:	f7fe fb53 	bl	8000b8c <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024e8:	e00a      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ea:	f7fe fb4f 	bl	8000b8c <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d901      	bls.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e036      	b.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002500:	4b1d      	ldr	r3, [pc, #116]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d0ee      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800250c:	4b1a      	ldr	r3, [pc, #104]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	4917      	ldr	r1, [pc, #92]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800251a:	4313      	orrs	r3, r2
 800251c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800251e:	7dfb      	ldrb	r3, [r7, #23]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d105      	bne.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002524:	4b14      	ldr	r3, [pc, #80]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	4a13      	ldr	r2, [pc, #76]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800252a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800252e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d008      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800253c:	4b0e      	ldr	r3, [pc, #56]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	490b      	ldr	r1, [pc, #44]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800254a:	4313      	orrs	r3, r2
 800254c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0310 	and.w	r3, r3, #16
 8002556:	2b00      	cmp	r3, #0
 8002558:	d008      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800255a:	4b07      	ldr	r3, [pc, #28]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	4904      	ldr	r1, [pc, #16]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002568:	4313      	orrs	r3, r2
 800256a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3718      	adds	r7, #24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40021000 	.word	0x40021000
 800257c:	40007000 	.word	0x40007000
 8002580:	42420440 	.word	0x42420440

08002584 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b088      	sub	sp, #32
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800258c:	2300      	movs	r3, #0
 800258e:	617b      	str	r3, [r7, #20]
 8002590:	2300      	movs	r3, #0
 8002592:	61fb      	str	r3, [r7, #28]
 8002594:	2300      	movs	r3, #0
 8002596:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002598:	2300      	movs	r3, #0
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	2300      	movs	r3, #0
 800259e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b10      	cmp	r3, #16
 80025a4:	d00a      	beq.n	80025bc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b10      	cmp	r3, #16
 80025aa:	f200 808a 	bhi.w	80026c2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d045      	beq.n	8002640 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d075      	beq.n	80026a6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80025ba:	e082      	b.n	80026c2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80025bc:	4b46      	ldr	r3, [pc, #280]	@ (80026d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80025c2:	4b45      	ldr	r3, [pc, #276]	@ (80026d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d07b      	beq.n	80026c6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	0c9b      	lsrs	r3, r3, #18
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	4a41      	ldr	r2, [pc, #260]	@ (80026dc <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80025d8:	5cd3      	ldrb	r3, [r2, r3]
 80025da:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d015      	beq.n	8002612 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025e6:	4b3c      	ldr	r3, [pc, #240]	@ (80026d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	0c5b      	lsrs	r3, r3, #17
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	4a3b      	ldr	r2, [pc, #236]	@ (80026e0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80025f2:	5cd3      	ldrb	r3, [r2, r3]
 80025f4:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00d      	beq.n	800261c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002600:	4a38      	ldr	r2, [pc, #224]	@ (80026e4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	fbb2 f2f3 	udiv	r2, r2, r3
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	fb02 f303 	mul.w	r3, r2, r3
 800260e:	61fb      	str	r3, [r7, #28]
 8002610:	e004      	b.n	800261c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	4a34      	ldr	r2, [pc, #208]	@ (80026e8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002616:	fb02 f303 	mul.w	r3, r2, r3
 800261a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800261c:	4b2e      	ldr	r3, [pc, #184]	@ (80026d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002624:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002628:	d102      	bne.n	8002630 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	61bb      	str	r3, [r7, #24]
      break;
 800262e:	e04a      	b.n	80026c6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	4a2d      	ldr	r2, [pc, #180]	@ (80026ec <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002636:	fba2 2303 	umull	r2, r3, r2, r3
 800263a:	085b      	lsrs	r3, r3, #1
 800263c:	61bb      	str	r3, [r7, #24]
      break;
 800263e:	e042      	b.n	80026c6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002640:	4b25      	ldr	r3, [pc, #148]	@ (80026d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800264c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002650:	d108      	bne.n	8002664 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d003      	beq.n	8002664 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800265c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002660:	61bb      	str	r3, [r7, #24]
 8002662:	e01f      	b.n	80026a4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800266a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800266e:	d109      	bne.n	8002684 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002670:	4b19      	ldr	r3, [pc, #100]	@ (80026d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d003      	beq.n	8002684 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800267c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002680:	61bb      	str	r3, [r7, #24]
 8002682:	e00f      	b.n	80026a4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800268a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800268e:	d11c      	bne.n	80026ca <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002690:	4b11      	ldr	r3, [pc, #68]	@ (80026d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d016      	beq.n	80026ca <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800269c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80026a0:	61bb      	str	r3, [r7, #24]
      break;
 80026a2:	e012      	b.n	80026ca <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80026a4:	e011      	b.n	80026ca <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80026a6:	f7ff fe55 	bl	8002354 <HAL_RCC_GetPCLK2Freq>
 80026aa:	4602      	mov	r2, r0
 80026ac:	4b0a      	ldr	r3, [pc, #40]	@ (80026d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	0b9b      	lsrs	r3, r3, #14
 80026b2:	f003 0303 	and.w	r3, r3, #3
 80026b6:	3301      	adds	r3, #1
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80026be:	61bb      	str	r3, [r7, #24]
      break;
 80026c0:	e004      	b.n	80026cc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80026c2:	bf00      	nop
 80026c4:	e002      	b.n	80026cc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80026c6:	bf00      	nop
 80026c8:	e000      	b.n	80026cc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80026ca:	bf00      	nop
    }
  }
  return (frequency);
 80026cc:	69bb      	ldr	r3, [r7, #24]
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3720      	adds	r7, #32
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40021000 	.word	0x40021000
 80026dc:	080044f0 	.word	0x080044f0
 80026e0:	08004500 	.word	0x08004500
 80026e4:	007a1200 	.word	0x007a1200
 80026e8:	003d0900 	.word	0x003d0900
 80026ec:	aaaaaaab 	.word	0xaaaaaaab

080026f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e076      	b.n	80027f0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002706:	2b00      	cmp	r3, #0
 8002708:	d108      	bne.n	800271c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002712:	d009      	beq.n	8002728 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	61da      	str	r2, [r3, #28]
 800271a:	e005      	b.n	8002728 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d106      	bne.n	8002748 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7fe f894 	bl	8000870 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2202      	movs	r2, #2
 800274c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800275e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002770:	431a      	orrs	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800277a:	431a      	orrs	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	431a      	orrs	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	431a      	orrs	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002798:	431a      	orrs	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027ac:	ea42 0103 	orr.w	r1, r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	0c1a      	lsrs	r2, r3, #16
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f002 0204 	and.w	r2, r2, #4
 80027ce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	69da      	ldr	r2, [r3, #28]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027de:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e041      	b.n	800288e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d106      	bne.n	8002824 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f839 	bl	8002896 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2202      	movs	r2, #2
 8002828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3304      	adds	r3, #4
 8002834:	4619      	mov	r1, r3
 8002836:	4610      	mov	r0, r2
 8002838:	f000 f9ae 	bl	8002b98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800289e:	bf00      	nop
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr

080028a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d001      	beq.n	80028c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e035      	b.n	800292c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2202      	movs	r2, #2
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68da      	ldr	r2, [r3, #12]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f042 0201 	orr.w	r2, r2, #1
 80028d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a16      	ldr	r2, [pc, #88]	@ (8002938 <HAL_TIM_Base_Start_IT+0x90>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d009      	beq.n	80028f6 <HAL_TIM_Base_Start_IT+0x4e>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028ea:	d004      	beq.n	80028f6 <HAL_TIM_Base_Start_IT+0x4e>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a12      	ldr	r2, [pc, #72]	@ (800293c <HAL_TIM_Base_Start_IT+0x94>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d111      	bne.n	800291a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2b06      	cmp	r3, #6
 8002906:	d010      	beq.n	800292a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f042 0201 	orr.w	r2, r2, #1
 8002916:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002918:	e007      	b.n	800292a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f042 0201 	orr.w	r2, r2, #1
 8002928:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	40012c00 	.word	0x40012c00
 800293c:	40000400 	.word	0x40000400

08002940 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b02      	cmp	r3, #2
 8002954:	d122      	bne.n	800299c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b02      	cmp	r3, #2
 8002962:	d11b      	bne.n	800299c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f06f 0202 	mvn.w	r2, #2
 800296c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f8ed 	bl	8002b62 <HAL_TIM_IC_CaptureCallback>
 8002988:	e005      	b.n	8002996 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f8e0 	bl	8002b50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 f8ef 	bl	8002b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	f003 0304 	and.w	r3, r3, #4
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d122      	bne.n	80029f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b04      	cmp	r3, #4
 80029b6:	d11b      	bne.n	80029f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f06f 0204 	mvn.w	r2, #4
 80029c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2202      	movs	r2, #2
 80029c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f8c3 	bl	8002b62 <HAL_TIM_IC_CaptureCallback>
 80029dc:	e005      	b.n	80029ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f8b6 	bl	8002b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 f8c5 	bl	8002b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	2b08      	cmp	r3, #8
 80029fc:	d122      	bne.n	8002a44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	f003 0308 	and.w	r3, r3, #8
 8002a08:	2b08      	cmp	r3, #8
 8002a0a:	d11b      	bne.n	8002a44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f06f 0208 	mvn.w	r2, #8
 8002a14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2204      	movs	r2, #4
 8002a1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f899 	bl	8002b62 <HAL_TIM_IC_CaptureCallback>
 8002a30:	e005      	b.n	8002a3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f88c 	bl	8002b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 f89b 	bl	8002b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	f003 0310 	and.w	r3, r3, #16
 8002a4e:	2b10      	cmp	r3, #16
 8002a50:	d122      	bne.n	8002a98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f003 0310 	and.w	r3, r3, #16
 8002a5c:	2b10      	cmp	r3, #16
 8002a5e:	d11b      	bne.n	8002a98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f06f 0210 	mvn.w	r2, #16
 8002a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2208      	movs	r2, #8
 8002a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f86f 	bl	8002b62 <HAL_TIM_IC_CaptureCallback>
 8002a84:	e005      	b.n	8002a92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f862 	bl	8002b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 f871 	bl	8002b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d10e      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d107      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f06f 0201 	mvn.w	r2, #1
 8002abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7fd fdf8 	bl	80006b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ace:	2b80      	cmp	r3, #128	@ 0x80
 8002ad0:	d10e      	bne.n	8002af0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002adc:	2b80      	cmp	r3, #128	@ 0x80
 8002ade:	d107      	bne.n	8002af0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 f8b5 	bl	8002c5a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002afa:	2b40      	cmp	r3, #64	@ 0x40
 8002afc:	d10e      	bne.n	8002b1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b08:	2b40      	cmp	r3, #64	@ 0x40
 8002b0a:	d107      	bne.n	8002b1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f835 	bl	8002b86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	f003 0320 	and.w	r3, r3, #32
 8002b26:	2b20      	cmp	r3, #32
 8002b28:	d10e      	bne.n	8002b48 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	f003 0320 	and.w	r3, r3, #32
 8002b34:	2b20      	cmp	r3, #32
 8002b36:	d107      	bne.n	8002b48 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f06f 0220 	mvn.w	r2, #32
 8002b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f880 	bl	8002c48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b48:	bf00      	nop
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bc80      	pop	{r7}
 8002b60:	4770      	bx	lr

08002b62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr

08002b74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bc80      	pop	{r7}
 8002b84:	4770      	bx	lr

08002b86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr

08002b98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a25      	ldr	r2, [pc, #148]	@ (8002c40 <TIM_Base_SetConfig+0xa8>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d007      	beq.n	8002bc0 <TIM_Base_SetConfig+0x28>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bb6:	d003      	beq.n	8002bc0 <TIM_Base_SetConfig+0x28>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a22      	ldr	r2, [pc, #136]	@ (8002c44 <TIM_Base_SetConfig+0xac>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d108      	bne.n	8002bd2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a1a      	ldr	r2, [pc, #104]	@ (8002c40 <TIM_Base_SetConfig+0xa8>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d007      	beq.n	8002bea <TIM_Base_SetConfig+0x52>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002be0:	d003      	beq.n	8002bea <TIM_Base_SetConfig+0x52>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a17      	ldr	r2, [pc, #92]	@ (8002c44 <TIM_Base_SetConfig+0xac>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d108      	bne.n	8002bfc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a07      	ldr	r2, [pc, #28]	@ (8002c40 <TIM_Base_SetConfig+0xa8>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d103      	bne.n	8002c30 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	691a      	ldr	r2, [r3, #16]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	615a      	str	r2, [r3, #20]
}
 8002c36:	bf00      	nop
 8002c38:	3714      	adds	r7, #20
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bc80      	pop	{r7}
 8002c3e:	4770      	bx	lr
 8002c40:	40012c00 	.word	0x40012c00
 8002c44:	40000400 	.word	0x40000400

08002c48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bc80      	pop	{r7}
 8002c58:	4770      	bx	lr

08002c5a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr

08002c6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e042      	b.n	8002d04 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d106      	bne.n	8002c98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7fd fe36 	bl	8000904 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2224      	movs	r2, #36	@ 0x24
 8002c9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68da      	ldr	r2, [r3, #12]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002cae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 f82b 	bl	8002d0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	691a      	ldr	r2, [r3, #16]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002cc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	695a      	ldr	r2, [r3, #20]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002cd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68da      	ldr	r2, [r3, #12]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ce4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68da      	ldr	r2, [r3, #12]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689a      	ldr	r2, [r3, #8]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002d46:	f023 030c 	bic.w	r3, r3, #12
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	6812      	ldr	r2, [r2, #0]
 8002d4e:	68b9      	ldr	r1, [r7, #8]
 8002d50:	430b      	orrs	r3, r1
 8002d52:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	699a      	ldr	r2, [r3, #24]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a2c      	ldr	r2, [pc, #176]	@ (8002e20 <UART_SetConfig+0x114>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d103      	bne.n	8002d7c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002d74:	f7ff faee 	bl	8002354 <HAL_RCC_GetPCLK2Freq>
 8002d78:	60f8      	str	r0, [r7, #12]
 8002d7a:	e002      	b.n	8002d82 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002d7c:	f7ff fad6 	bl	800232c <HAL_RCC_GetPCLK1Freq>
 8002d80:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	4613      	mov	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	009a      	lsls	r2, r3, #2
 8002d8c:	441a      	add	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d98:	4a22      	ldr	r2, [pc, #136]	@ (8002e24 <UART_SetConfig+0x118>)
 8002d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9e:	095b      	lsrs	r3, r3, #5
 8002da0:	0119      	lsls	r1, r3, #4
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	4613      	mov	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	009a      	lsls	r2, r3, #2
 8002dac:	441a      	add	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002db8:	4b1a      	ldr	r3, [pc, #104]	@ (8002e24 <UART_SetConfig+0x118>)
 8002dba:	fba3 0302 	umull	r0, r3, r3, r2
 8002dbe:	095b      	lsrs	r3, r3, #5
 8002dc0:	2064      	movs	r0, #100	@ 0x64
 8002dc2:	fb00 f303 	mul.w	r3, r0, r3
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	011b      	lsls	r3, r3, #4
 8002dca:	3332      	adds	r3, #50	@ 0x32
 8002dcc:	4a15      	ldr	r2, [pc, #84]	@ (8002e24 <UART_SetConfig+0x118>)
 8002dce:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd2:	095b      	lsrs	r3, r3, #5
 8002dd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002dd8:	4419      	add	r1, r3
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4413      	add	r3, r2
 8002de2:	009a      	lsls	r2, r3, #2
 8002de4:	441a      	add	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	fbb2 f2f3 	udiv	r2, r2, r3
 8002df0:	4b0c      	ldr	r3, [pc, #48]	@ (8002e24 <UART_SetConfig+0x118>)
 8002df2:	fba3 0302 	umull	r0, r3, r3, r2
 8002df6:	095b      	lsrs	r3, r3, #5
 8002df8:	2064      	movs	r0, #100	@ 0x64
 8002dfa:	fb00 f303 	mul.w	r3, r0, r3
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	011b      	lsls	r3, r3, #4
 8002e02:	3332      	adds	r3, #50	@ 0x32
 8002e04:	4a07      	ldr	r2, [pc, #28]	@ (8002e24 <UART_SetConfig+0x118>)
 8002e06:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0a:	095b      	lsrs	r3, r3, #5
 8002e0c:	f003 020f 	and.w	r2, r3, #15
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	440a      	add	r2, r1
 8002e16:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002e18:	bf00      	nop
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40013800 	.word	0x40013800
 8002e24:	51eb851f 	.word	0x51eb851f

08002e28 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002e32:	2300      	movs	r3, #0
 8002e34:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002e36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e3a:	2b84      	cmp	r3, #132	@ 0x84
 8002e3c:	d005      	beq.n	8002e4a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002e3e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	4413      	add	r3, r2
 8002e46:	3303      	adds	r3, #3
 8002e48:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3714      	adds	r7, #20
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bc80      	pop	{r7}
 8002e54:	4770      	bx	lr

08002e56 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002e5a:	f000 faef 	bl	800343c <vTaskStartScheduler>
  
  return osOK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e66:	b089      	sub	sp, #36	@ 0x24
 8002e68:	af04      	add	r7, sp, #16
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d020      	beq.n	8002eb8 <osThreadCreate+0x54>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d01c      	beq.n	8002eb8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685c      	ldr	r4, [r3, #4]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	691e      	ldr	r6, [r3, #16]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff ffc9 	bl	8002e28 <makeFreeRtosPriority>
 8002e96:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002ea0:	9202      	str	r2, [sp, #8]
 8002ea2:	9301      	str	r3, [sp, #4]
 8002ea4:	9100      	str	r1, [sp, #0]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	4632      	mov	r2, r6
 8002eaa:	4629      	mov	r1, r5
 8002eac:	4620      	mov	r0, r4
 8002eae:	f000 f8e8 	bl	8003082 <xTaskCreateStatic>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	60fb      	str	r3, [r7, #12]
 8002eb6:	e01c      	b.n	8002ef2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685c      	ldr	r4, [r3, #4]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002ec4:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff ffab 	bl	8002e28 <makeFreeRtosPriority>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	f107 030c 	add.w	r3, r7, #12
 8002ed8:	9301      	str	r3, [sp, #4]
 8002eda:	9200      	str	r2, [sp, #0]
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	4632      	mov	r2, r6
 8002ee0:	4629      	mov	r1, r5
 8002ee2:	4620      	mov	r0, r4
 8002ee4:	f000 f92c 	bl	8003140 <xTaskCreate>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d001      	beq.n	8002ef2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	e000      	b.n	8002ef4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3714      	adds	r7, #20
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002efc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <osDelay+0x16>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	e000      	b.n	8002f14 <osDelay+0x18>
 8002f12:	2301      	movs	r3, #1
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 fa5b 	bl	80033d0 <vTaskDelay>
  
  return osOK;
 8002f1a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f103 0208 	add.w	r2, r3, #8
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f04f 32ff 	mov.w	r2, #4294967295
 8002f3c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f103 0208 	add.w	r2, r3, #8
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f103 0208 	add.w	r2, r3, #8
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bc80      	pop	{r7}
 8002f60:	4770      	bx	lr

08002f62 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002f62:	b480      	push	{r7}
 8002f64:	b083      	sub	sp, #12
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bc80      	pop	{r7}
 8002f78:	4770      	bx	lr

08002f7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b085      	sub	sp, #20
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
 8002f82:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	1c5a      	adds	r2, r3, #1
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	601a      	str	r2, [r3, #0]
}
 8002fb6:	bf00      	nop
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bc80      	pop	{r7}
 8002fbe:	4770      	bx	lr

08002fc0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd6:	d103      	bne.n	8002fe0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	60fb      	str	r3, [r7, #12]
 8002fde:	e00c      	b.n	8002ffa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3308      	adds	r3, #8
 8002fe4:	60fb      	str	r3, [r7, #12]
 8002fe6:	e002      	b.n	8002fee <vListInsert+0x2e>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68ba      	ldr	r2, [r7, #8]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d2f6      	bcs.n	8002fe8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	1c5a      	adds	r2, r3, #1
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	601a      	str	r2, [r3, #0]
}
 8003026:	bf00      	nop
 8003028:	3714      	adds	r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	bc80      	pop	{r7}
 800302e:	4770      	bx	lr

08003030 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	6892      	ldr	r2, [r2, #8]
 8003046:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6852      	ldr	r2, [r2, #4]
 8003050:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	429a      	cmp	r2, r3
 800305a:	d103      	bne.n	8003064 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	1e5a      	subs	r2, r3, #1
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
}
 8003078:	4618      	mov	r0, r3
 800307a:	3714      	adds	r7, #20
 800307c:	46bd      	mov	sp, r7
 800307e:	bc80      	pop	{r7}
 8003080:	4770      	bx	lr

08003082 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003082:	b580      	push	{r7, lr}
 8003084:	b08e      	sub	sp, #56	@ 0x38
 8003086:	af04      	add	r7, sp, #16
 8003088:	60f8      	str	r0, [r7, #12]
 800308a:	60b9      	str	r1, [r7, #8]
 800308c:	607a      	str	r2, [r7, #4]
 800308e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10b      	bne.n	80030ae <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800309a:	f383 8811 	msr	BASEPRI, r3
 800309e:	f3bf 8f6f 	isb	sy
 80030a2:	f3bf 8f4f 	dsb	sy
 80030a6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80030a8:	bf00      	nop
 80030aa:	bf00      	nop
 80030ac:	e7fd      	b.n	80030aa <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80030ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10b      	bne.n	80030cc <xTaskCreateStatic+0x4a>
	__asm volatile
 80030b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030b8:	f383 8811 	msr	BASEPRI, r3
 80030bc:	f3bf 8f6f 	isb	sy
 80030c0:	f3bf 8f4f 	dsb	sy
 80030c4:	61fb      	str	r3, [r7, #28]
}
 80030c6:	bf00      	nop
 80030c8:	bf00      	nop
 80030ca:	e7fd      	b.n	80030c8 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80030cc:	23a0      	movs	r3, #160	@ 0xa0
 80030ce:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	2ba0      	cmp	r3, #160	@ 0xa0
 80030d4:	d00b      	beq.n	80030ee <xTaskCreateStatic+0x6c>
	__asm volatile
 80030d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030da:	f383 8811 	msr	BASEPRI, r3
 80030de:	f3bf 8f6f 	isb	sy
 80030e2:	f3bf 8f4f 	dsb	sy
 80030e6:	61bb      	str	r3, [r7, #24]
}
 80030e8:	bf00      	nop
 80030ea:	bf00      	nop
 80030ec:	e7fd      	b.n	80030ea <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80030ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d01e      	beq.n	8003132 <xTaskCreateStatic+0xb0>
 80030f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d01b      	beq.n	8003132 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80030fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030fc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80030fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003100:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003102:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003106:	2202      	movs	r2, #2
 8003108:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800310c:	2300      	movs	r3, #0
 800310e:	9303      	str	r3, [sp, #12]
 8003110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003112:	9302      	str	r3, [sp, #8]
 8003114:	f107 0314 	add.w	r3, r7, #20
 8003118:	9301      	str	r3, [sp, #4]
 800311a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	68b9      	ldr	r1, [r7, #8]
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f000 f851 	bl	80031cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800312a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800312c:	f000 f8e6 	bl	80032fc <prvAddNewTaskToReadyList>
 8003130:	e001      	b.n	8003136 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8003132:	2300      	movs	r3, #0
 8003134:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003136:	697b      	ldr	r3, [r7, #20]
	}
 8003138:	4618      	mov	r0, r3
 800313a:	3728      	adds	r7, #40	@ 0x28
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003140:	b580      	push	{r7, lr}
 8003142:	b08c      	sub	sp, #48	@ 0x30
 8003144:	af04      	add	r7, sp, #16
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	603b      	str	r3, [r7, #0]
 800314c:	4613      	mov	r3, r2
 800314e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003150:	88fb      	ldrh	r3, [r7, #6]
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4618      	mov	r0, r3
 8003156:	f000 fea3 	bl	8003ea0 <pvPortMalloc>
 800315a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00e      	beq.n	8003180 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003162:	20a0      	movs	r0, #160	@ 0xa0
 8003164:	f000 fe9c 	bl	8003ea0 <pvPortMalloc>
 8003168:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	631a      	str	r2, [r3, #48]	@ 0x30
 8003176:	e005      	b.n	8003184 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003178:	6978      	ldr	r0, [r7, #20]
 800317a:	f000 ff59 	bl	8004030 <vPortFree>
 800317e:	e001      	b.n	8003184 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003180:	2300      	movs	r3, #0
 8003182:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d017      	beq.n	80031ba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003192:	88fa      	ldrh	r2, [r7, #6]
 8003194:	2300      	movs	r3, #0
 8003196:	9303      	str	r3, [sp, #12]
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	9302      	str	r3, [sp, #8]
 800319c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800319e:	9301      	str	r3, [sp, #4]
 80031a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	68b9      	ldr	r1, [r7, #8]
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f000 f80f 	bl	80031cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80031ae:	69f8      	ldr	r0, [r7, #28]
 80031b0:	f000 f8a4 	bl	80032fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80031b4:	2301      	movs	r3, #1
 80031b6:	61bb      	str	r3, [r7, #24]
 80031b8:	e002      	b.n	80031c0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80031ba:	f04f 33ff 	mov.w	r3, #4294967295
 80031be:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80031c0:	69bb      	ldr	r3, [r7, #24]
	}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3720      	adds	r7, #32
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
	...

080031cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b088      	sub	sp, #32
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
 80031d8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80031da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80031e4:	3b01      	subs	r3, #1
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	f023 0307 	bic.w	r3, r3, #7
 80031f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	f003 0307 	and.w	r3, r3, #7
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00b      	beq.n	8003216 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80031fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003202:	f383 8811 	msr	BASEPRI, r3
 8003206:	f3bf 8f6f 	isb	sy
 800320a:	f3bf 8f4f 	dsb	sy
 800320e:	617b      	str	r3, [r7, #20]
}
 8003210:	bf00      	nop
 8003212:	bf00      	nop
 8003214:	e7fd      	b.n	8003212 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003216:	2300      	movs	r3, #0
 8003218:	61fb      	str	r3, [r7, #28]
 800321a:	e012      	b.n	8003242 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	4413      	add	r3, r2
 8003222:	7819      	ldrb	r1, [r3, #0]
 8003224:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	4413      	add	r3, r2
 800322a:	3334      	adds	r3, #52	@ 0x34
 800322c:	460a      	mov	r2, r1
 800322e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003230:	68ba      	ldr	r2, [r7, #8]
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	4413      	add	r3, r2
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d006      	beq.n	800324a <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	3301      	adds	r3, #1
 8003240:	61fb      	str	r3, [r7, #28]
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	2b0f      	cmp	r3, #15
 8003246:	d9e9      	bls.n	800321c <prvInitialiseNewTask+0x50>
 8003248:	e000      	b.n	800324c <prvInitialiseNewTask+0x80>
		{
			break;
 800324a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800324c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800324e:	2200      	movs	r2, #0
 8003250:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003256:	2b06      	cmp	r3, #6
 8003258:	d901      	bls.n	800325e <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800325a:	2306      	movs	r3, #6
 800325c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800325e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003260:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003262:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003266:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003268:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800326a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800326c:	2200      	movs	r2, #0
 800326e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003272:	3304      	adds	r3, #4
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff fe74 	bl	8002f62 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800327a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800327c:	3318      	adds	r3, #24
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff fe6f 	bl	8002f62 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003286:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003288:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800328a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800328c:	f1c3 0207 	rsb	r2, r3, #7
 8003290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003292:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003296:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003298:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800329a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800329c:	2200      	movs	r2, #0
 800329e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80032a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80032aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ac:	334c      	adds	r3, #76	@ 0x4c
 80032ae:	224c      	movs	r2, #76	@ 0x4c
 80032b0:	2100      	movs	r1, #0
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 ffd2 	bl	800425c <memset>
 80032b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ba:	4a0d      	ldr	r2, [pc, #52]	@ (80032f0 <prvInitialiseNewTask+0x124>)
 80032bc:	651a      	str	r2, [r3, #80]	@ 0x50
 80032be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032c0:	4a0c      	ldr	r2, [pc, #48]	@ (80032f4 <prvInitialiseNewTask+0x128>)
 80032c2:	655a      	str	r2, [r3, #84]	@ 0x54
 80032c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032c6:	4a0c      	ldr	r2, [pc, #48]	@ (80032f8 <prvInitialiseNewTask+0x12c>)
 80032c8:	659a      	str	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	68f9      	ldr	r1, [r7, #12]
 80032ce:	69b8      	ldr	r0, [r7, #24]
 80032d0:	f000 fc30 	bl	8003b34 <pxPortInitialiseStack>
 80032d4:	4602      	mov	r2, r0
 80032d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032d8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80032da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d002      	beq.n	80032e6 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80032e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80032e6:	bf00      	nop
 80032e8:	3720      	adds	r7, #32
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	200011f0 	.word	0x200011f0
 80032f4:	20001258 	.word	0x20001258
 80032f8:	200012c0 	.word	0x200012c0

080032fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003304:	f000 fd0a 	bl	8003d1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003308:	4b2a      	ldr	r3, [pc, #168]	@ (80033b4 <prvAddNewTaskToReadyList+0xb8>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	3301      	adds	r3, #1
 800330e:	4a29      	ldr	r2, [pc, #164]	@ (80033b4 <prvAddNewTaskToReadyList+0xb8>)
 8003310:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003312:	4b29      	ldr	r3, [pc, #164]	@ (80033b8 <prvAddNewTaskToReadyList+0xbc>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d109      	bne.n	800332e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800331a:	4a27      	ldr	r2, [pc, #156]	@ (80033b8 <prvAddNewTaskToReadyList+0xbc>)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003320:	4b24      	ldr	r3, [pc, #144]	@ (80033b4 <prvAddNewTaskToReadyList+0xb8>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d110      	bne.n	800334a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003328:	f000 fad6 	bl	80038d8 <prvInitialiseTaskLists>
 800332c:	e00d      	b.n	800334a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800332e:	4b23      	ldr	r3, [pc, #140]	@ (80033bc <prvAddNewTaskToReadyList+0xc0>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d109      	bne.n	800334a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003336:	4b20      	ldr	r3, [pc, #128]	@ (80033b8 <prvAddNewTaskToReadyList+0xbc>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003340:	429a      	cmp	r2, r3
 8003342:	d802      	bhi.n	800334a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003344:	4a1c      	ldr	r2, [pc, #112]	@ (80033b8 <prvAddNewTaskToReadyList+0xbc>)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800334a:	4b1d      	ldr	r3, [pc, #116]	@ (80033c0 <prvAddNewTaskToReadyList+0xc4>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	3301      	adds	r3, #1
 8003350:	4a1b      	ldr	r2, [pc, #108]	@ (80033c0 <prvAddNewTaskToReadyList+0xc4>)
 8003352:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003358:	2201      	movs	r2, #1
 800335a:	409a      	lsls	r2, r3
 800335c:	4b19      	ldr	r3, [pc, #100]	@ (80033c4 <prvAddNewTaskToReadyList+0xc8>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4313      	orrs	r3, r2
 8003362:	4a18      	ldr	r2, [pc, #96]	@ (80033c4 <prvAddNewTaskToReadyList+0xc8>)
 8003364:	6013      	str	r3, [r2, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800336a:	4613      	mov	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4413      	add	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4a15      	ldr	r2, [pc, #84]	@ (80033c8 <prvAddNewTaskToReadyList+0xcc>)
 8003374:	441a      	add	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	3304      	adds	r3, #4
 800337a:	4619      	mov	r1, r3
 800337c:	4610      	mov	r0, r2
 800337e:	f7ff fdfc 	bl	8002f7a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003382:	f000 fcfb 	bl	8003d7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003386:	4b0d      	ldr	r3, [pc, #52]	@ (80033bc <prvAddNewTaskToReadyList+0xc0>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00e      	beq.n	80033ac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800338e:	4b0a      	ldr	r3, [pc, #40]	@ (80033b8 <prvAddNewTaskToReadyList+0xbc>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003398:	429a      	cmp	r2, r3
 800339a:	d207      	bcs.n	80033ac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800339c:	4b0b      	ldr	r3, [pc, #44]	@ (80033cc <prvAddNewTaskToReadyList+0xd0>)
 800339e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	f3bf 8f4f 	dsb	sy
 80033a8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80033ac:	bf00      	nop
 80033ae:	3708      	adds	r7, #8
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	200005a4 	.word	0x200005a4
 80033b8:	200004a4 	.word	0x200004a4
 80033bc:	200005b0 	.word	0x200005b0
 80033c0:	200005c0 	.word	0x200005c0
 80033c4:	200005ac 	.word	0x200005ac
 80033c8:	200004a8 	.word	0x200004a8
 80033cc:	e000ed04 	.word	0xe000ed04

080033d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80033d8:	2300      	movs	r3, #0
 80033da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d018      	beq.n	8003414 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80033e2:	4b14      	ldr	r3, [pc, #80]	@ (8003434 <vTaskDelay+0x64>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00b      	beq.n	8003402 <vTaskDelay+0x32>
	__asm volatile
 80033ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ee:	f383 8811 	msr	BASEPRI, r3
 80033f2:	f3bf 8f6f 	isb	sy
 80033f6:	f3bf 8f4f 	dsb	sy
 80033fa:	60bb      	str	r3, [r7, #8]
}
 80033fc:	bf00      	nop
 80033fe:	bf00      	nop
 8003400:	e7fd      	b.n	80033fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003402:	f000 f885 	bl	8003510 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003406:	2100      	movs	r1, #0
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 fb2d 	bl	8003a68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800340e:	f000 f88d 	bl	800352c <xTaskResumeAll>
 8003412:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d107      	bne.n	800342a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800341a:	4b07      	ldr	r3, [pc, #28]	@ (8003438 <vTaskDelay+0x68>)
 800341c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003420:	601a      	str	r2, [r3, #0]
 8003422:	f3bf 8f4f 	dsb	sy
 8003426:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800342a:	bf00      	nop
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	200005cc 	.word	0x200005cc
 8003438:	e000ed04 	.word	0xe000ed04

0800343c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b08a      	sub	sp, #40	@ 0x28
 8003440:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003442:	2300      	movs	r3, #0
 8003444:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003446:	2300      	movs	r3, #0
 8003448:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800344a:	463a      	mov	r2, r7
 800344c:	1d39      	adds	r1, r7, #4
 800344e:	f107 0308 	add.w	r3, r7, #8
 8003452:	4618      	mov	r0, r3
 8003454:	f7fc fe7c 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003458:	6839      	ldr	r1, [r7, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68ba      	ldr	r2, [r7, #8]
 800345e:	9202      	str	r2, [sp, #8]
 8003460:	9301      	str	r3, [sp, #4]
 8003462:	2300      	movs	r3, #0
 8003464:	9300      	str	r3, [sp, #0]
 8003466:	2300      	movs	r3, #0
 8003468:	460a      	mov	r2, r1
 800346a:	4921      	ldr	r1, [pc, #132]	@ (80034f0 <vTaskStartScheduler+0xb4>)
 800346c:	4821      	ldr	r0, [pc, #132]	@ (80034f4 <vTaskStartScheduler+0xb8>)
 800346e:	f7ff fe08 	bl	8003082 <xTaskCreateStatic>
 8003472:	4603      	mov	r3, r0
 8003474:	4a20      	ldr	r2, [pc, #128]	@ (80034f8 <vTaskStartScheduler+0xbc>)
 8003476:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003478:	4b1f      	ldr	r3, [pc, #124]	@ (80034f8 <vTaskStartScheduler+0xbc>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d002      	beq.n	8003486 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003480:	2301      	movs	r3, #1
 8003482:	617b      	str	r3, [r7, #20]
 8003484:	e001      	b.n	800348a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003486:	2300      	movs	r3, #0
 8003488:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d11b      	bne.n	80034c8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003494:	f383 8811 	msr	BASEPRI, r3
 8003498:	f3bf 8f6f 	isb	sy
 800349c:	f3bf 8f4f 	dsb	sy
 80034a0:	613b      	str	r3, [r7, #16]
}
 80034a2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80034a4:	4b15      	ldr	r3, [pc, #84]	@ (80034fc <vTaskStartScheduler+0xc0>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	334c      	adds	r3, #76	@ 0x4c
 80034aa:	4a15      	ldr	r2, [pc, #84]	@ (8003500 <vTaskStartScheduler+0xc4>)
 80034ac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80034ae:	4b15      	ldr	r3, [pc, #84]	@ (8003504 <vTaskStartScheduler+0xc8>)
 80034b0:	f04f 32ff 	mov.w	r2, #4294967295
 80034b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80034b6:	4b14      	ldr	r3, [pc, #80]	@ (8003508 <vTaskStartScheduler+0xcc>)
 80034b8:	2201      	movs	r2, #1
 80034ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80034bc:	4b13      	ldr	r3, [pc, #76]	@ (800350c <vTaskStartScheduler+0xd0>)
 80034be:	2200      	movs	r2, #0
 80034c0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80034c2:	f000 fbb9 	bl	8003c38 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80034c6:	e00f      	b.n	80034e8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ce:	d10b      	bne.n	80034e8 <vTaskStartScheduler+0xac>
	__asm volatile
 80034d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034d4:	f383 8811 	msr	BASEPRI, r3
 80034d8:	f3bf 8f6f 	isb	sy
 80034dc:	f3bf 8f4f 	dsb	sy
 80034e0:	60fb      	str	r3, [r7, #12]
}
 80034e2:	bf00      	nop
 80034e4:	bf00      	nop
 80034e6:	e7fd      	b.n	80034e4 <vTaskStartScheduler+0xa8>
}
 80034e8:	bf00      	nop
 80034ea:	3718      	adds	r7, #24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	080044bc 	.word	0x080044bc
 80034f4:	080038a9 	.word	0x080038a9
 80034f8:	200005c8 	.word	0x200005c8
 80034fc:	200004a4 	.word	0x200004a4
 8003500:	20000010 	.word	0x20000010
 8003504:	200005c4 	.word	0x200005c4
 8003508:	200005b0 	.word	0x200005b0
 800350c:	200005a8 	.word	0x200005a8

08003510 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003514:	4b04      	ldr	r3, [pc, #16]	@ (8003528 <vTaskSuspendAll+0x18>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	3301      	adds	r3, #1
 800351a:	4a03      	ldr	r2, [pc, #12]	@ (8003528 <vTaskSuspendAll+0x18>)
 800351c:	6013      	str	r3, [r2, #0]
}
 800351e:	bf00      	nop
 8003520:	46bd      	mov	sp, r7
 8003522:	bc80      	pop	{r7}
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	200005cc 	.word	0x200005cc

0800352c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003532:	2300      	movs	r3, #0
 8003534:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003536:	2300      	movs	r3, #0
 8003538:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800353a:	4b42      	ldr	r3, [pc, #264]	@ (8003644 <xTaskResumeAll+0x118>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10b      	bne.n	800355a <xTaskResumeAll+0x2e>
	__asm volatile
 8003542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003546:	f383 8811 	msr	BASEPRI, r3
 800354a:	f3bf 8f6f 	isb	sy
 800354e:	f3bf 8f4f 	dsb	sy
 8003552:	603b      	str	r3, [r7, #0]
}
 8003554:	bf00      	nop
 8003556:	bf00      	nop
 8003558:	e7fd      	b.n	8003556 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800355a:	f000 fbdf 	bl	8003d1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800355e:	4b39      	ldr	r3, [pc, #228]	@ (8003644 <xTaskResumeAll+0x118>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	3b01      	subs	r3, #1
 8003564:	4a37      	ldr	r2, [pc, #220]	@ (8003644 <xTaskResumeAll+0x118>)
 8003566:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003568:	4b36      	ldr	r3, [pc, #216]	@ (8003644 <xTaskResumeAll+0x118>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d161      	bne.n	8003634 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003570:	4b35      	ldr	r3, [pc, #212]	@ (8003648 <xTaskResumeAll+0x11c>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d05d      	beq.n	8003634 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003578:	e02e      	b.n	80035d8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800357a:	4b34      	ldr	r3, [pc, #208]	@ (800364c <xTaskResumeAll+0x120>)
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	3318      	adds	r3, #24
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff fd52 	bl	8003030 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	3304      	adds	r3, #4
 8003590:	4618      	mov	r0, r3
 8003592:	f7ff fd4d 	bl	8003030 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800359a:	2201      	movs	r2, #1
 800359c:	409a      	lsls	r2, r3
 800359e:	4b2c      	ldr	r3, [pc, #176]	@ (8003650 <xTaskResumeAll+0x124>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	4a2a      	ldr	r2, [pc, #168]	@ (8003650 <xTaskResumeAll+0x124>)
 80035a6:	6013      	str	r3, [r2, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035ac:	4613      	mov	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4a27      	ldr	r2, [pc, #156]	@ (8003654 <xTaskResumeAll+0x128>)
 80035b6:	441a      	add	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	3304      	adds	r3, #4
 80035bc:	4619      	mov	r1, r3
 80035be:	4610      	mov	r0, r2
 80035c0:	f7ff fcdb 	bl	8002f7a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035c8:	4b23      	ldr	r3, [pc, #140]	@ (8003658 <xTaskResumeAll+0x12c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d302      	bcc.n	80035d8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80035d2:	4b22      	ldr	r3, [pc, #136]	@ (800365c <xTaskResumeAll+0x130>)
 80035d4:	2201      	movs	r2, #1
 80035d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035d8:	4b1c      	ldr	r3, [pc, #112]	@ (800364c <xTaskResumeAll+0x120>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1cc      	bne.n	800357a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80035e6:	f000 fa1b 	bl	8003a20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80035ea:	4b1d      	ldr	r3, [pc, #116]	@ (8003660 <xTaskResumeAll+0x134>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d010      	beq.n	8003618 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80035f6:	f000 f837 	bl	8003668 <xTaskIncrementTick>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d002      	beq.n	8003606 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003600:	4b16      	ldr	r3, [pc, #88]	@ (800365c <xTaskResumeAll+0x130>)
 8003602:	2201      	movs	r2, #1
 8003604:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	3b01      	subs	r3, #1
 800360a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1f1      	bne.n	80035f6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003612:	4b13      	ldr	r3, [pc, #76]	@ (8003660 <xTaskResumeAll+0x134>)
 8003614:	2200      	movs	r2, #0
 8003616:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003618:	4b10      	ldr	r3, [pc, #64]	@ (800365c <xTaskResumeAll+0x130>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d009      	beq.n	8003634 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003620:	2301      	movs	r3, #1
 8003622:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003624:	4b0f      	ldr	r3, [pc, #60]	@ (8003664 <xTaskResumeAll+0x138>)
 8003626:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	f3bf 8f4f 	dsb	sy
 8003630:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003634:	f000 fba2 	bl	8003d7c <vPortExitCritical>

	return xAlreadyYielded;
 8003638:	68bb      	ldr	r3, [r7, #8]
}
 800363a:	4618      	mov	r0, r3
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	200005cc 	.word	0x200005cc
 8003648:	200005a4 	.word	0x200005a4
 800364c:	20000564 	.word	0x20000564
 8003650:	200005ac 	.word	0x200005ac
 8003654:	200004a8 	.word	0x200004a8
 8003658:	200004a4 	.word	0x200004a4
 800365c:	200005b8 	.word	0x200005b8
 8003660:	200005b4 	.word	0x200005b4
 8003664:	e000ed04 	.word	0xe000ed04

08003668 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800366e:	2300      	movs	r3, #0
 8003670:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003672:	4b51      	ldr	r3, [pc, #324]	@ (80037b8 <xTaskIncrementTick+0x150>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	f040 808e 	bne.w	8003798 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800367c:	4b4f      	ldr	r3, [pc, #316]	@ (80037bc <xTaskIncrementTick+0x154>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	3301      	adds	r3, #1
 8003682:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003684:	4a4d      	ldr	r2, [pc, #308]	@ (80037bc <xTaskIncrementTick+0x154>)
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d121      	bne.n	80036d4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003690:	4b4b      	ldr	r3, [pc, #300]	@ (80037c0 <xTaskIncrementTick+0x158>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00b      	beq.n	80036b2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800369a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800369e:	f383 8811 	msr	BASEPRI, r3
 80036a2:	f3bf 8f6f 	isb	sy
 80036a6:	f3bf 8f4f 	dsb	sy
 80036aa:	603b      	str	r3, [r7, #0]
}
 80036ac:	bf00      	nop
 80036ae:	bf00      	nop
 80036b0:	e7fd      	b.n	80036ae <xTaskIncrementTick+0x46>
 80036b2:	4b43      	ldr	r3, [pc, #268]	@ (80037c0 <xTaskIncrementTick+0x158>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	60fb      	str	r3, [r7, #12]
 80036b8:	4b42      	ldr	r3, [pc, #264]	@ (80037c4 <xTaskIncrementTick+0x15c>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a40      	ldr	r2, [pc, #256]	@ (80037c0 <xTaskIncrementTick+0x158>)
 80036be:	6013      	str	r3, [r2, #0]
 80036c0:	4a40      	ldr	r2, [pc, #256]	@ (80037c4 <xTaskIncrementTick+0x15c>)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6013      	str	r3, [r2, #0]
 80036c6:	4b40      	ldr	r3, [pc, #256]	@ (80037c8 <xTaskIncrementTick+0x160>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	3301      	adds	r3, #1
 80036cc:	4a3e      	ldr	r2, [pc, #248]	@ (80037c8 <xTaskIncrementTick+0x160>)
 80036ce:	6013      	str	r3, [r2, #0]
 80036d0:	f000 f9a6 	bl	8003a20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80036d4:	4b3d      	ldr	r3, [pc, #244]	@ (80037cc <xTaskIncrementTick+0x164>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d34d      	bcc.n	800377a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036de:	4b38      	ldr	r3, [pc, #224]	@ (80037c0 <xTaskIncrementTick+0x158>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <xTaskIncrementTick+0x84>
 80036e8:	2301      	movs	r3, #1
 80036ea:	e000      	b.n	80036ee <xTaskIncrementTick+0x86>
 80036ec:	2300      	movs	r3, #0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d004      	beq.n	80036fc <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036f2:	4b36      	ldr	r3, [pc, #216]	@ (80037cc <xTaskIncrementTick+0x164>)
 80036f4:	f04f 32ff 	mov.w	r2, #4294967295
 80036f8:	601a      	str	r2, [r3, #0]
					break;
 80036fa:	e03e      	b.n	800377a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80036fc:	4b30      	ldr	r3, [pc, #192]	@ (80037c0 <xTaskIncrementTick+0x158>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	429a      	cmp	r2, r3
 8003712:	d203      	bcs.n	800371c <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003714:	4a2d      	ldr	r2, [pc, #180]	@ (80037cc <xTaskIncrementTick+0x164>)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6013      	str	r3, [r2, #0]
						break;
 800371a:	e02e      	b.n	800377a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	3304      	adds	r3, #4
 8003720:	4618      	mov	r0, r3
 8003722:	f7ff fc85 	bl	8003030 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800372a:	2b00      	cmp	r3, #0
 800372c:	d004      	beq.n	8003738 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	3318      	adds	r3, #24
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff fc7c 	bl	8003030 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800373c:	2201      	movs	r2, #1
 800373e:	409a      	lsls	r2, r3
 8003740:	4b23      	ldr	r3, [pc, #140]	@ (80037d0 <xTaskIncrementTick+0x168>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4313      	orrs	r3, r2
 8003746:	4a22      	ldr	r2, [pc, #136]	@ (80037d0 <xTaskIncrementTick+0x168>)
 8003748:	6013      	str	r3, [r2, #0]
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800374e:	4613      	mov	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	4413      	add	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4a1f      	ldr	r2, [pc, #124]	@ (80037d4 <xTaskIncrementTick+0x16c>)
 8003758:	441a      	add	r2, r3
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	3304      	adds	r3, #4
 800375e:	4619      	mov	r1, r3
 8003760:	4610      	mov	r0, r2
 8003762:	f7ff fc0a 	bl	8002f7a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800376a:	4b1b      	ldr	r3, [pc, #108]	@ (80037d8 <xTaskIncrementTick+0x170>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003770:	429a      	cmp	r2, r3
 8003772:	d3b4      	bcc.n	80036de <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003774:	2301      	movs	r3, #1
 8003776:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003778:	e7b1      	b.n	80036de <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800377a:	4b17      	ldr	r3, [pc, #92]	@ (80037d8 <xTaskIncrementTick+0x170>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003780:	4914      	ldr	r1, [pc, #80]	@ (80037d4 <xTaskIncrementTick+0x16c>)
 8003782:	4613      	mov	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4413      	add	r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	440b      	add	r3, r1
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d907      	bls.n	80037a2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003792:	2301      	movs	r3, #1
 8003794:	617b      	str	r3, [r7, #20]
 8003796:	e004      	b.n	80037a2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003798:	4b10      	ldr	r3, [pc, #64]	@ (80037dc <xTaskIncrementTick+0x174>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	3301      	adds	r3, #1
 800379e:	4a0f      	ldr	r2, [pc, #60]	@ (80037dc <xTaskIncrementTick+0x174>)
 80037a0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80037a2:	4b0f      	ldr	r3, [pc, #60]	@ (80037e0 <xTaskIncrementTick+0x178>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80037aa:	2301      	movs	r3, #1
 80037ac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80037ae:	697b      	ldr	r3, [r7, #20]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3718      	adds	r7, #24
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	200005cc 	.word	0x200005cc
 80037bc:	200005a8 	.word	0x200005a8
 80037c0:	2000055c 	.word	0x2000055c
 80037c4:	20000560 	.word	0x20000560
 80037c8:	200005bc 	.word	0x200005bc
 80037cc:	200005c4 	.word	0x200005c4
 80037d0:	200005ac 	.word	0x200005ac
 80037d4:	200004a8 	.word	0x200004a8
 80037d8:	200004a4 	.word	0x200004a4
 80037dc:	200005b4 	.word	0x200005b4
 80037e0:	200005b8 	.word	0x200005b8

080037e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80037e4:	b480      	push	{r7}
 80037e6:	b087      	sub	sp, #28
 80037e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80037ea:	4b29      	ldr	r3, [pc, #164]	@ (8003890 <vTaskSwitchContext+0xac>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80037f2:	4b28      	ldr	r3, [pc, #160]	@ (8003894 <vTaskSwitchContext+0xb0>)
 80037f4:	2201      	movs	r2, #1
 80037f6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80037f8:	e045      	b.n	8003886 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80037fa:	4b26      	ldr	r3, [pc, #152]	@ (8003894 <vTaskSwitchContext+0xb0>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003800:	4b25      	ldr	r3, [pc, #148]	@ (8003898 <vTaskSwitchContext+0xb4>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	fab3 f383 	clz	r3, r3
 800380c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800380e:	7afb      	ldrb	r3, [r7, #11]
 8003810:	f1c3 031f 	rsb	r3, r3, #31
 8003814:	617b      	str	r3, [r7, #20]
 8003816:	4921      	ldr	r1, [pc, #132]	@ (800389c <vTaskSwitchContext+0xb8>)
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	4613      	mov	r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	4413      	add	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	440b      	add	r3, r1
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10b      	bne.n	8003842 <vTaskSwitchContext+0x5e>
	__asm volatile
 800382a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800382e:	f383 8811 	msr	BASEPRI, r3
 8003832:	f3bf 8f6f 	isb	sy
 8003836:	f3bf 8f4f 	dsb	sy
 800383a:	607b      	str	r3, [r7, #4]
}
 800383c:	bf00      	nop
 800383e:	bf00      	nop
 8003840:	e7fd      	b.n	800383e <vTaskSwitchContext+0x5a>
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	4613      	mov	r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	4413      	add	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4a13      	ldr	r2, [pc, #76]	@ (800389c <vTaskSwitchContext+0xb8>)
 800384e:	4413      	add	r3, r2
 8003850:	613b      	str	r3, [r7, #16]
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	605a      	str	r2, [r3, #4]
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	3308      	adds	r3, #8
 8003864:	429a      	cmp	r2, r3
 8003866:	d104      	bne.n	8003872 <vTaskSwitchContext+0x8e>
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	605a      	str	r2, [r3, #4]
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	4a09      	ldr	r2, [pc, #36]	@ (80038a0 <vTaskSwitchContext+0xbc>)
 800387a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800387c:	4b08      	ldr	r3, [pc, #32]	@ (80038a0 <vTaskSwitchContext+0xbc>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	334c      	adds	r3, #76	@ 0x4c
 8003882:	4a08      	ldr	r2, [pc, #32]	@ (80038a4 <vTaskSwitchContext+0xc0>)
 8003884:	6013      	str	r3, [r2, #0]
}
 8003886:	bf00      	nop
 8003888:	371c      	adds	r7, #28
 800388a:	46bd      	mov	sp, r7
 800388c:	bc80      	pop	{r7}
 800388e:	4770      	bx	lr
 8003890:	200005cc 	.word	0x200005cc
 8003894:	200005b8 	.word	0x200005b8
 8003898:	200005ac 	.word	0x200005ac
 800389c:	200004a8 	.word	0x200004a8
 80038a0:	200004a4 	.word	0x200004a4
 80038a4:	20000010 	.word	0x20000010

080038a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80038b0:	f000 f852 	bl	8003958 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80038b4:	4b06      	ldr	r3, [pc, #24]	@ (80038d0 <prvIdleTask+0x28>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d9f9      	bls.n	80038b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80038bc:	4b05      	ldr	r3, [pc, #20]	@ (80038d4 <prvIdleTask+0x2c>)
 80038be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	f3bf 8f4f 	dsb	sy
 80038c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80038cc:	e7f0      	b.n	80038b0 <prvIdleTask+0x8>
 80038ce:	bf00      	nop
 80038d0:	200004a8 	.word	0x200004a8
 80038d4:	e000ed04 	.word	0xe000ed04

080038d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038de:	2300      	movs	r3, #0
 80038e0:	607b      	str	r3, [r7, #4]
 80038e2:	e00c      	b.n	80038fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	4613      	mov	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4413      	add	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4a12      	ldr	r2, [pc, #72]	@ (8003938 <prvInitialiseTaskLists+0x60>)
 80038f0:	4413      	add	r3, r2
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7ff fb16 	bl	8002f24 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3301      	adds	r3, #1
 80038fc:	607b      	str	r3, [r7, #4]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b06      	cmp	r3, #6
 8003902:	d9ef      	bls.n	80038e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003904:	480d      	ldr	r0, [pc, #52]	@ (800393c <prvInitialiseTaskLists+0x64>)
 8003906:	f7ff fb0d 	bl	8002f24 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800390a:	480d      	ldr	r0, [pc, #52]	@ (8003940 <prvInitialiseTaskLists+0x68>)
 800390c:	f7ff fb0a 	bl	8002f24 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003910:	480c      	ldr	r0, [pc, #48]	@ (8003944 <prvInitialiseTaskLists+0x6c>)
 8003912:	f7ff fb07 	bl	8002f24 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003916:	480c      	ldr	r0, [pc, #48]	@ (8003948 <prvInitialiseTaskLists+0x70>)
 8003918:	f7ff fb04 	bl	8002f24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800391c:	480b      	ldr	r0, [pc, #44]	@ (800394c <prvInitialiseTaskLists+0x74>)
 800391e:	f7ff fb01 	bl	8002f24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003922:	4b0b      	ldr	r3, [pc, #44]	@ (8003950 <prvInitialiseTaskLists+0x78>)
 8003924:	4a05      	ldr	r2, [pc, #20]	@ (800393c <prvInitialiseTaskLists+0x64>)
 8003926:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003928:	4b0a      	ldr	r3, [pc, #40]	@ (8003954 <prvInitialiseTaskLists+0x7c>)
 800392a:	4a05      	ldr	r2, [pc, #20]	@ (8003940 <prvInitialiseTaskLists+0x68>)
 800392c:	601a      	str	r2, [r3, #0]
}
 800392e:	bf00      	nop
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	200004a8 	.word	0x200004a8
 800393c:	20000534 	.word	0x20000534
 8003940:	20000548 	.word	0x20000548
 8003944:	20000564 	.word	0x20000564
 8003948:	20000578 	.word	0x20000578
 800394c:	20000590 	.word	0x20000590
 8003950:	2000055c 	.word	0x2000055c
 8003954:	20000560 	.word	0x20000560

08003958 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800395e:	e019      	b.n	8003994 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003960:	f000 f9dc 	bl	8003d1c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003964:	4b10      	ldr	r3, [pc, #64]	@ (80039a8 <prvCheckTasksWaitingTermination+0x50>)
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3304      	adds	r3, #4
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff fb5d 	bl	8003030 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003976:	4b0d      	ldr	r3, [pc, #52]	@ (80039ac <prvCheckTasksWaitingTermination+0x54>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	3b01      	subs	r3, #1
 800397c:	4a0b      	ldr	r2, [pc, #44]	@ (80039ac <prvCheckTasksWaitingTermination+0x54>)
 800397e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003980:	4b0b      	ldr	r3, [pc, #44]	@ (80039b0 <prvCheckTasksWaitingTermination+0x58>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	3b01      	subs	r3, #1
 8003986:	4a0a      	ldr	r2, [pc, #40]	@ (80039b0 <prvCheckTasksWaitingTermination+0x58>)
 8003988:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800398a:	f000 f9f7 	bl	8003d7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f810 	bl	80039b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003994:	4b06      	ldr	r3, [pc, #24]	@ (80039b0 <prvCheckTasksWaitingTermination+0x58>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1e1      	bne.n	8003960 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800399c:	bf00      	nop
 800399e:	bf00      	nop
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	20000578 	.word	0x20000578
 80039ac:	200005a4 	.word	0x200005a4
 80039b0:	2000058c 	.word	0x2000058c

080039b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	334c      	adds	r3, #76	@ 0x4c
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 fc53 	bl	800426c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d108      	bne.n	80039e2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d4:	4618      	mov	r0, r3
 80039d6:	f000 fb2b 	bl	8004030 <vPortFree>
				vPortFree( pxTCB );
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 fb28 	bl	8004030 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80039e0:	e019      	b.n	8003a16 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d103      	bne.n	80039f4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 fb1f 	bl	8004030 <vPortFree>
	}
 80039f2:	e010      	b.n	8003a16 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d00b      	beq.n	8003a16 <prvDeleteTCB+0x62>
	__asm volatile
 80039fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a02:	f383 8811 	msr	BASEPRI, r3
 8003a06:	f3bf 8f6f 	isb	sy
 8003a0a:	f3bf 8f4f 	dsb	sy
 8003a0e:	60fb      	str	r3, [r7, #12]
}
 8003a10:	bf00      	nop
 8003a12:	bf00      	nop
 8003a14:	e7fd      	b.n	8003a12 <prvDeleteTCB+0x5e>
	}
 8003a16:	bf00      	nop
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
	...

08003a20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a26:	4b0e      	ldr	r3, [pc, #56]	@ (8003a60 <prvResetNextTaskUnblockTime+0x40>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d101      	bne.n	8003a34 <prvResetNextTaskUnblockTime+0x14>
 8003a30:	2301      	movs	r3, #1
 8003a32:	e000      	b.n	8003a36 <prvResetNextTaskUnblockTime+0x16>
 8003a34:	2300      	movs	r3, #0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d004      	beq.n	8003a44 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8003a64 <prvResetNextTaskUnblockTime+0x44>)
 8003a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a40:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003a42:	e008      	b.n	8003a56 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003a44:	4b06      	ldr	r3, [pc, #24]	@ (8003a60 <prvResetNextTaskUnblockTime+0x40>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	4a04      	ldr	r2, [pc, #16]	@ (8003a64 <prvResetNextTaskUnblockTime+0x44>)
 8003a54:	6013      	str	r3, [r2, #0]
}
 8003a56:	bf00      	nop
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bc80      	pop	{r7}
 8003a5e:	4770      	bx	lr
 8003a60:	2000055c 	.word	0x2000055c
 8003a64:	200005c4 	.word	0x200005c4

08003a68 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003a72:	4b29      	ldr	r3, [pc, #164]	@ (8003b18 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a78:	4b28      	ldr	r3, [pc, #160]	@ (8003b1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	3304      	adds	r3, #4
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7ff fad6 	bl	8003030 <uxListRemove>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10b      	bne.n	8003aa2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003a8a:	4b24      	ldr	r3, [pc, #144]	@ (8003b1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a90:	2201      	movs	r2, #1
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	43da      	mvns	r2, r3
 8003a98:	4b21      	ldr	r3, [pc, #132]	@ (8003b20 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	4a20      	ldr	r2, [pc, #128]	@ (8003b20 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003aa0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa8:	d10a      	bne.n	8003ac0 <prvAddCurrentTaskToDelayedList+0x58>
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d007      	beq.n	8003ac0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ab0:	4b1a      	ldr	r3, [pc, #104]	@ (8003b1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	3304      	adds	r3, #4
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	481a      	ldr	r0, [pc, #104]	@ (8003b24 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003aba:	f7ff fa5e 	bl	8002f7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003abe:	e026      	b.n	8003b0e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003ac8:	4b14      	ldr	r3, [pc, #80]	@ (8003b1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d209      	bcs.n	8003aec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ad8:	4b13      	ldr	r3, [pc, #76]	@ (8003b28 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	4b0f      	ldr	r3, [pc, #60]	@ (8003b1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	4610      	mov	r0, r2
 8003ae6:	f7ff fa6b 	bl	8002fc0 <vListInsert>
}
 8003aea:	e010      	b.n	8003b0e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003aec:	4b0f      	ldr	r3, [pc, #60]	@ (8003b2c <prvAddCurrentTaskToDelayedList+0xc4>)
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	4b0a      	ldr	r3, [pc, #40]	@ (8003b1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	3304      	adds	r3, #4
 8003af6:	4619      	mov	r1, r3
 8003af8:	4610      	mov	r0, r2
 8003afa:	f7ff fa61 	bl	8002fc0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003afe:	4b0c      	ldr	r3, [pc, #48]	@ (8003b30 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d202      	bcs.n	8003b0e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003b08:	4a09      	ldr	r2, [pc, #36]	@ (8003b30 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	6013      	str	r3, [r2, #0]
}
 8003b0e:	bf00      	nop
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	200005a8 	.word	0x200005a8
 8003b1c:	200004a4 	.word	0x200004a4
 8003b20:	200005ac 	.word	0x200005ac
 8003b24:	20000590 	.word	0x20000590
 8003b28:	20000560 	.word	0x20000560
 8003b2c:	2000055c 	.word	0x2000055c
 8003b30:	200005c4 	.word	0x200005c4

08003b34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	3b04      	subs	r3, #4
 8003b44:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003b4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	3b04      	subs	r3, #4
 8003b52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	f023 0201 	bic.w	r2, r3, #1
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	3b04      	subs	r3, #4
 8003b62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003b64:	4a08      	ldr	r2, [pc, #32]	@ (8003b88 <pxPortInitialiseStack+0x54>)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	3b14      	subs	r3, #20
 8003b6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	3b20      	subs	r3, #32
 8003b7a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3714      	adds	r7, #20
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bc80      	pop	{r7}
 8003b86:	4770      	bx	lr
 8003b88:	08003b8d 	.word	0x08003b8d

08003b8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003b92:	2300      	movs	r3, #0
 8003b94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003b96:	4b12      	ldr	r3, [pc, #72]	@ (8003be0 <prvTaskExitError+0x54>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b9e:	d00b      	beq.n	8003bb8 <prvTaskExitError+0x2c>
	__asm volatile
 8003ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ba4:	f383 8811 	msr	BASEPRI, r3
 8003ba8:	f3bf 8f6f 	isb	sy
 8003bac:	f3bf 8f4f 	dsb	sy
 8003bb0:	60fb      	str	r3, [r7, #12]
}
 8003bb2:	bf00      	nop
 8003bb4:	bf00      	nop
 8003bb6:	e7fd      	b.n	8003bb4 <prvTaskExitError+0x28>
	__asm volatile
 8003bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bbc:	f383 8811 	msr	BASEPRI, r3
 8003bc0:	f3bf 8f6f 	isb	sy
 8003bc4:	f3bf 8f4f 	dsb	sy
 8003bc8:	60bb      	str	r3, [r7, #8]
}
 8003bca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003bcc:	bf00      	nop
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d0fc      	beq.n	8003bce <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003bd4:	bf00      	nop
 8003bd6:	bf00      	nop
 8003bd8:	3714      	adds	r7, #20
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bc80      	pop	{r7}
 8003bde:	4770      	bx	lr
 8003be0:	2000000c 	.word	0x2000000c
	...

08003bf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003bf0:	4b07      	ldr	r3, [pc, #28]	@ (8003c10 <pxCurrentTCBConst2>)
 8003bf2:	6819      	ldr	r1, [r3, #0]
 8003bf4:	6808      	ldr	r0, [r1, #0]
 8003bf6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003bfa:	f380 8809 	msr	PSP, r0
 8003bfe:	f3bf 8f6f 	isb	sy
 8003c02:	f04f 0000 	mov.w	r0, #0
 8003c06:	f380 8811 	msr	BASEPRI, r0
 8003c0a:	f04e 0e0d 	orr.w	lr, lr, #13
 8003c0e:	4770      	bx	lr

08003c10 <pxCurrentTCBConst2>:
 8003c10:	200004a4 	.word	0x200004a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003c14:	bf00      	nop
 8003c16:	bf00      	nop

08003c18 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003c18:	4806      	ldr	r0, [pc, #24]	@ (8003c34 <prvPortStartFirstTask+0x1c>)
 8003c1a:	6800      	ldr	r0, [r0, #0]
 8003c1c:	6800      	ldr	r0, [r0, #0]
 8003c1e:	f380 8808 	msr	MSP, r0
 8003c22:	b662      	cpsie	i
 8003c24:	b661      	cpsie	f
 8003c26:	f3bf 8f4f 	dsb	sy
 8003c2a:	f3bf 8f6f 	isb	sy
 8003c2e:	df00      	svc	0
 8003c30:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003c32:	bf00      	nop
 8003c34:	e000ed08 	.word	0xe000ed08

08003c38 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003c3e:	4b32      	ldr	r3, [pc, #200]	@ (8003d08 <xPortStartScheduler+0xd0>)
 8003c40:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	22ff      	movs	r2, #255	@ 0xff
 8003c4e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003c58:	78fb      	ldrb	r3, [r7, #3]
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003c60:	b2da      	uxtb	r2, r3
 8003c62:	4b2a      	ldr	r3, [pc, #168]	@ (8003d0c <xPortStartScheduler+0xd4>)
 8003c64:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003c66:	4b2a      	ldr	r3, [pc, #168]	@ (8003d10 <xPortStartScheduler+0xd8>)
 8003c68:	2207      	movs	r2, #7
 8003c6a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c6c:	e009      	b.n	8003c82 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003c6e:	4b28      	ldr	r3, [pc, #160]	@ (8003d10 <xPortStartScheduler+0xd8>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	3b01      	subs	r3, #1
 8003c74:	4a26      	ldr	r2, [pc, #152]	@ (8003d10 <xPortStartScheduler+0xd8>)
 8003c76:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003c78:	78fb      	ldrb	r3, [r7, #3]
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c82:	78fb      	ldrb	r3, [r7, #3]
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c8a:	2b80      	cmp	r3, #128	@ 0x80
 8003c8c:	d0ef      	beq.n	8003c6e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003c8e:	4b20      	ldr	r3, [pc, #128]	@ (8003d10 <xPortStartScheduler+0xd8>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f1c3 0307 	rsb	r3, r3, #7
 8003c96:	2b04      	cmp	r3, #4
 8003c98:	d00b      	beq.n	8003cb2 <xPortStartScheduler+0x7a>
	__asm volatile
 8003c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c9e:	f383 8811 	msr	BASEPRI, r3
 8003ca2:	f3bf 8f6f 	isb	sy
 8003ca6:	f3bf 8f4f 	dsb	sy
 8003caa:	60bb      	str	r3, [r7, #8]
}
 8003cac:	bf00      	nop
 8003cae:	bf00      	nop
 8003cb0:	e7fd      	b.n	8003cae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003cb2:	4b17      	ldr	r3, [pc, #92]	@ (8003d10 <xPortStartScheduler+0xd8>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	021b      	lsls	r3, r3, #8
 8003cb8:	4a15      	ldr	r2, [pc, #84]	@ (8003d10 <xPortStartScheduler+0xd8>)
 8003cba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003cbc:	4b14      	ldr	r3, [pc, #80]	@ (8003d10 <xPortStartScheduler+0xd8>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003cc4:	4a12      	ldr	r2, [pc, #72]	@ (8003d10 <xPortStartScheduler+0xd8>)
 8003cc6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003cd0:	4b10      	ldr	r3, [pc, #64]	@ (8003d14 <xPortStartScheduler+0xdc>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a0f      	ldr	r2, [pc, #60]	@ (8003d14 <xPortStartScheduler+0xdc>)
 8003cd6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003cda:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003cdc:	4b0d      	ldr	r3, [pc, #52]	@ (8003d14 <xPortStartScheduler+0xdc>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a0c      	ldr	r2, [pc, #48]	@ (8003d14 <xPortStartScheduler+0xdc>)
 8003ce2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003ce6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003ce8:	f000 f8b8 	bl	8003e5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003cec:	4b0a      	ldr	r3, [pc, #40]	@ (8003d18 <xPortStartScheduler+0xe0>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003cf2:	f7ff ff91 	bl	8003c18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003cf6:	f7ff fd75 	bl	80037e4 <vTaskSwitchContext>
	prvTaskExitError();
 8003cfa:	f7ff ff47 	bl	8003b8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	e000e400 	.word	0xe000e400
 8003d0c:	200005d0 	.word	0x200005d0
 8003d10:	200005d4 	.word	0x200005d4
 8003d14:	e000ed20 	.word	0xe000ed20
 8003d18:	2000000c 	.word	0x2000000c

08003d1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
	__asm volatile
 8003d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d26:	f383 8811 	msr	BASEPRI, r3
 8003d2a:	f3bf 8f6f 	isb	sy
 8003d2e:	f3bf 8f4f 	dsb	sy
 8003d32:	607b      	str	r3, [r7, #4]
}
 8003d34:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003d36:	4b0f      	ldr	r3, [pc, #60]	@ (8003d74 <vPortEnterCritical+0x58>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	4a0d      	ldr	r2, [pc, #52]	@ (8003d74 <vPortEnterCritical+0x58>)
 8003d3e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003d40:	4b0c      	ldr	r3, [pc, #48]	@ (8003d74 <vPortEnterCritical+0x58>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d110      	bne.n	8003d6a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003d48:	4b0b      	ldr	r3, [pc, #44]	@ (8003d78 <vPortEnterCritical+0x5c>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00b      	beq.n	8003d6a <vPortEnterCritical+0x4e>
	__asm volatile
 8003d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d56:	f383 8811 	msr	BASEPRI, r3
 8003d5a:	f3bf 8f6f 	isb	sy
 8003d5e:	f3bf 8f4f 	dsb	sy
 8003d62:	603b      	str	r3, [r7, #0]
}
 8003d64:	bf00      	nop
 8003d66:	bf00      	nop
 8003d68:	e7fd      	b.n	8003d66 <vPortEnterCritical+0x4a>
	}
}
 8003d6a:	bf00      	nop
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bc80      	pop	{r7}
 8003d72:	4770      	bx	lr
 8003d74:	2000000c 	.word	0x2000000c
 8003d78:	e000ed04 	.word	0xe000ed04

08003d7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003d82:	4b12      	ldr	r3, [pc, #72]	@ (8003dcc <vPortExitCritical+0x50>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10b      	bne.n	8003da2 <vPortExitCritical+0x26>
	__asm volatile
 8003d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d8e:	f383 8811 	msr	BASEPRI, r3
 8003d92:	f3bf 8f6f 	isb	sy
 8003d96:	f3bf 8f4f 	dsb	sy
 8003d9a:	607b      	str	r3, [r7, #4]
}
 8003d9c:	bf00      	nop
 8003d9e:	bf00      	nop
 8003da0:	e7fd      	b.n	8003d9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003da2:	4b0a      	ldr	r3, [pc, #40]	@ (8003dcc <vPortExitCritical+0x50>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	3b01      	subs	r3, #1
 8003da8:	4a08      	ldr	r2, [pc, #32]	@ (8003dcc <vPortExitCritical+0x50>)
 8003daa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003dac:	4b07      	ldr	r3, [pc, #28]	@ (8003dcc <vPortExitCritical+0x50>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d105      	bne.n	8003dc0 <vPortExitCritical+0x44>
 8003db4:	2300      	movs	r3, #0
 8003db6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003dbe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bc80      	pop	{r7}
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	2000000c 	.word	0x2000000c

08003dd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003dd0:	f3ef 8009 	mrs	r0, PSP
 8003dd4:	f3bf 8f6f 	isb	sy
 8003dd8:	4b0d      	ldr	r3, [pc, #52]	@ (8003e10 <pxCurrentTCBConst>)
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003de0:	6010      	str	r0, [r2, #0]
 8003de2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003de6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003dea:	f380 8811 	msr	BASEPRI, r0
 8003dee:	f7ff fcf9 	bl	80037e4 <vTaskSwitchContext>
 8003df2:	f04f 0000 	mov.w	r0, #0
 8003df6:	f380 8811 	msr	BASEPRI, r0
 8003dfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003dfe:	6819      	ldr	r1, [r3, #0]
 8003e00:	6808      	ldr	r0, [r1, #0]
 8003e02:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003e06:	f380 8809 	msr	PSP, r0
 8003e0a:	f3bf 8f6f 	isb	sy
 8003e0e:	4770      	bx	lr

08003e10 <pxCurrentTCBConst>:
 8003e10:	200004a4 	.word	0x200004a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003e14:	bf00      	nop
 8003e16:	bf00      	nop

08003e18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
	__asm volatile
 8003e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e22:	f383 8811 	msr	BASEPRI, r3
 8003e26:	f3bf 8f6f 	isb	sy
 8003e2a:	f3bf 8f4f 	dsb	sy
 8003e2e:	607b      	str	r3, [r7, #4]
}
 8003e30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003e32:	f7ff fc19 	bl	8003668 <xTaskIncrementTick>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d003      	beq.n	8003e44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003e3c:	4b06      	ldr	r3, [pc, #24]	@ (8003e58 <SysTick_Handler+0x40>)
 8003e3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	2300      	movs	r3, #0
 8003e46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	f383 8811 	msr	BASEPRI, r3
}
 8003e4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003e50:	bf00      	nop
 8003e52:	3708      	adds	r7, #8
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	e000ed04 	.word	0xe000ed04

08003e5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003e60:	4b0a      	ldr	r3, [pc, #40]	@ (8003e8c <vPortSetupTimerInterrupt+0x30>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003e66:	4b0a      	ldr	r3, [pc, #40]	@ (8003e90 <vPortSetupTimerInterrupt+0x34>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003e6c:	4b09      	ldr	r3, [pc, #36]	@ (8003e94 <vPortSetupTimerInterrupt+0x38>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a09      	ldr	r2, [pc, #36]	@ (8003e98 <vPortSetupTimerInterrupt+0x3c>)
 8003e72:	fba2 2303 	umull	r2, r3, r2, r3
 8003e76:	099b      	lsrs	r3, r3, #6
 8003e78:	4a08      	ldr	r2, [pc, #32]	@ (8003e9c <vPortSetupTimerInterrupt+0x40>)
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003e7e:	4b03      	ldr	r3, [pc, #12]	@ (8003e8c <vPortSetupTimerInterrupt+0x30>)
 8003e80:	2207      	movs	r2, #7
 8003e82:	601a      	str	r2, [r3, #0]
}
 8003e84:	bf00      	nop
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bc80      	pop	{r7}
 8003e8a:	4770      	bx	lr
 8003e8c:	e000e010 	.word	0xe000e010
 8003e90:	e000e018 	.word	0xe000e018
 8003e94:	20000000 	.word	0x20000000
 8003e98:	10624dd3 	.word	0x10624dd3
 8003e9c:	e000e014 	.word	0xe000e014

08003ea0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b08a      	sub	sp, #40	@ 0x28
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003eac:	f7ff fb30 	bl	8003510 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003eb0:	4b5a      	ldr	r3, [pc, #360]	@ (800401c <pvPortMalloc+0x17c>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d101      	bne.n	8003ebc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003eb8:	f000 f916 	bl	80040e8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003ebc:	4b58      	ldr	r3, [pc, #352]	@ (8004020 <pvPortMalloc+0x180>)
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f040 8090 	bne.w	8003fea <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d01e      	beq.n	8003f0e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003ed0:	2208      	movs	r2, #8
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f003 0307 	and.w	r3, r3, #7
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d015      	beq.n	8003f0e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f023 0307 	bic.w	r3, r3, #7
 8003ee8:	3308      	adds	r3, #8
 8003eea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f003 0307 	and.w	r3, r3, #7
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00b      	beq.n	8003f0e <pvPortMalloc+0x6e>
	__asm volatile
 8003ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003efa:	f383 8811 	msr	BASEPRI, r3
 8003efe:	f3bf 8f6f 	isb	sy
 8003f02:	f3bf 8f4f 	dsb	sy
 8003f06:	617b      	str	r3, [r7, #20]
}
 8003f08:	bf00      	nop
 8003f0a:	bf00      	nop
 8003f0c:	e7fd      	b.n	8003f0a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d06a      	beq.n	8003fea <pvPortMalloc+0x14a>
 8003f14:	4b43      	ldr	r3, [pc, #268]	@ (8004024 <pvPortMalloc+0x184>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d865      	bhi.n	8003fea <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003f1e:	4b42      	ldr	r3, [pc, #264]	@ (8004028 <pvPortMalloc+0x188>)
 8003f20:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003f22:	4b41      	ldr	r3, [pc, #260]	@ (8004028 <pvPortMalloc+0x188>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f28:	e004      	b.n	8003f34 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d903      	bls.n	8003f46 <pvPortMalloc+0xa6>
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1f1      	bne.n	8003f2a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003f46:	4b35      	ldr	r3, [pc, #212]	@ (800401c <pvPortMalloc+0x17c>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d04c      	beq.n	8003fea <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003f50:	6a3b      	ldr	r3, [r7, #32]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2208      	movs	r2, #8
 8003f56:	4413      	add	r3, r2
 8003f58:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	6a3b      	ldr	r3, [r7, #32]
 8003f60:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	1ad2      	subs	r2, r2, r3
 8003f6a:	2308      	movs	r3, #8
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d920      	bls.n	8003fb4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003f72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4413      	add	r3, r2
 8003f78:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	f003 0307 	and.w	r3, r3, #7
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00b      	beq.n	8003f9c <pvPortMalloc+0xfc>
	__asm volatile
 8003f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f88:	f383 8811 	msr	BASEPRI, r3
 8003f8c:	f3bf 8f6f 	isb	sy
 8003f90:	f3bf 8f4f 	dsb	sy
 8003f94:	613b      	str	r3, [r7, #16]
}
 8003f96:	bf00      	nop
 8003f98:	bf00      	nop
 8003f9a:	e7fd      	b.n	8003f98 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	1ad2      	subs	r2, r2, r3
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003fae:	69b8      	ldr	r0, [r7, #24]
 8003fb0:	f000 f8fc 	bl	80041ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8004024 <pvPortMalloc+0x184>)
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	4a19      	ldr	r2, [pc, #100]	@ (8004024 <pvPortMalloc+0x184>)
 8003fc0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003fc2:	4b18      	ldr	r3, [pc, #96]	@ (8004024 <pvPortMalloc+0x184>)
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	4b19      	ldr	r3, [pc, #100]	@ (800402c <pvPortMalloc+0x18c>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d203      	bcs.n	8003fd6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003fce:	4b15      	ldr	r3, [pc, #84]	@ (8004024 <pvPortMalloc+0x184>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a16      	ldr	r2, [pc, #88]	@ (800402c <pvPortMalloc+0x18c>)
 8003fd4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	4b11      	ldr	r3, [pc, #68]	@ (8004020 <pvPortMalloc+0x180>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003fea:	f7ff fa9f 	bl	800352c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	f003 0307 	and.w	r3, r3, #7
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00b      	beq.n	8004010 <pvPortMalloc+0x170>
	__asm volatile
 8003ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ffc:	f383 8811 	msr	BASEPRI, r3
 8004000:	f3bf 8f6f 	isb	sy
 8004004:	f3bf 8f4f 	dsb	sy
 8004008:	60fb      	str	r3, [r7, #12]
}
 800400a:	bf00      	nop
 800400c:	bf00      	nop
 800400e:	e7fd      	b.n	800400c <pvPortMalloc+0x16c>
	return pvReturn;
 8004010:	69fb      	ldr	r3, [r7, #28]
}
 8004012:	4618      	mov	r0, r3
 8004014:	3728      	adds	r7, #40	@ 0x28
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	200011e0 	.word	0x200011e0
 8004020:	200011ec 	.word	0x200011ec
 8004024:	200011e4 	.word	0x200011e4
 8004028:	200011d8 	.word	0x200011d8
 800402c:	200011e8 	.word	0x200011e8

08004030 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d04a      	beq.n	80040d8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004042:	2308      	movs	r3, #8
 8004044:	425b      	negs	r3, r3
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	4413      	add	r3, r2
 800404a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	685a      	ldr	r2, [r3, #4]
 8004054:	4b22      	ldr	r3, [pc, #136]	@ (80040e0 <vPortFree+0xb0>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4013      	ands	r3, r2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10b      	bne.n	8004076 <vPortFree+0x46>
	__asm volatile
 800405e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004062:	f383 8811 	msr	BASEPRI, r3
 8004066:	f3bf 8f6f 	isb	sy
 800406a:	f3bf 8f4f 	dsb	sy
 800406e:	60fb      	str	r3, [r7, #12]
}
 8004070:	bf00      	nop
 8004072:	bf00      	nop
 8004074:	e7fd      	b.n	8004072 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00b      	beq.n	8004096 <vPortFree+0x66>
	__asm volatile
 800407e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004082:	f383 8811 	msr	BASEPRI, r3
 8004086:	f3bf 8f6f 	isb	sy
 800408a:	f3bf 8f4f 	dsb	sy
 800408e:	60bb      	str	r3, [r7, #8]
}
 8004090:	bf00      	nop
 8004092:	bf00      	nop
 8004094:	e7fd      	b.n	8004092 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	4b11      	ldr	r3, [pc, #68]	@ (80040e0 <vPortFree+0xb0>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4013      	ands	r3, r2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d019      	beq.n	80040d8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d115      	bne.n	80040d8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	4b0b      	ldr	r3, [pc, #44]	@ (80040e0 <vPortFree+0xb0>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	43db      	mvns	r3, r3
 80040b6:	401a      	ands	r2, r3
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80040bc:	f7ff fa28 	bl	8003510 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	4b07      	ldr	r3, [pc, #28]	@ (80040e4 <vPortFree+0xb4>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4413      	add	r3, r2
 80040ca:	4a06      	ldr	r2, [pc, #24]	@ (80040e4 <vPortFree+0xb4>)
 80040cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80040ce:	6938      	ldr	r0, [r7, #16]
 80040d0:	f000 f86c 	bl	80041ac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80040d4:	f7ff fa2a 	bl	800352c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80040d8:	bf00      	nop
 80040da:	3718      	adds	r7, #24
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	200011ec 	.word	0x200011ec
 80040e4:	200011e4 	.word	0x200011e4

080040e8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80040ee:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80040f2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80040f4:	4b27      	ldr	r3, [pc, #156]	@ (8004194 <prvHeapInit+0xac>)
 80040f6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f003 0307 	and.w	r3, r3, #7
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00c      	beq.n	800411c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	3307      	adds	r3, #7
 8004106:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f023 0307 	bic.w	r3, r3, #7
 800410e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	4a1f      	ldr	r2, [pc, #124]	@ (8004194 <prvHeapInit+0xac>)
 8004118:	4413      	add	r3, r2
 800411a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004120:	4a1d      	ldr	r2, [pc, #116]	@ (8004198 <prvHeapInit+0xb0>)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004126:	4b1c      	ldr	r3, [pc, #112]	@ (8004198 <prvHeapInit+0xb0>)
 8004128:	2200      	movs	r2, #0
 800412a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68ba      	ldr	r2, [r7, #8]
 8004130:	4413      	add	r3, r2
 8004132:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004134:	2208      	movs	r2, #8
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	1a9b      	subs	r3, r3, r2
 800413a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f023 0307 	bic.w	r3, r3, #7
 8004142:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	4a15      	ldr	r2, [pc, #84]	@ (800419c <prvHeapInit+0xb4>)
 8004148:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800414a:	4b14      	ldr	r3, [pc, #80]	@ (800419c <prvHeapInit+0xb4>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2200      	movs	r2, #0
 8004150:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004152:	4b12      	ldr	r3, [pc, #72]	@ (800419c <prvHeapInit+0xb4>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	1ad2      	subs	r2, r2, r3
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004168:	4b0c      	ldr	r3, [pc, #48]	@ (800419c <prvHeapInit+0xb4>)
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	4a0a      	ldr	r2, [pc, #40]	@ (80041a0 <prvHeapInit+0xb8>)
 8004176:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	4a09      	ldr	r2, [pc, #36]	@ (80041a4 <prvHeapInit+0xbc>)
 800417e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004180:	4b09      	ldr	r3, [pc, #36]	@ (80041a8 <prvHeapInit+0xc0>)
 8004182:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004186:	601a      	str	r2, [r3, #0]
}
 8004188:	bf00      	nop
 800418a:	3714      	adds	r7, #20
 800418c:	46bd      	mov	sp, r7
 800418e:	bc80      	pop	{r7}
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	200005d8 	.word	0x200005d8
 8004198:	200011d8 	.word	0x200011d8
 800419c:	200011e0 	.word	0x200011e0
 80041a0:	200011e8 	.word	0x200011e8
 80041a4:	200011e4 	.word	0x200011e4
 80041a8:	200011ec 	.word	0x200011ec

080041ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80041b4:	4b27      	ldr	r3, [pc, #156]	@ (8004254 <prvInsertBlockIntoFreeList+0xa8>)
 80041b6:	60fb      	str	r3, [r7, #12]
 80041b8:	e002      	b.n	80041c0 <prvInsertBlockIntoFreeList+0x14>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	60fb      	str	r3, [r7, #12]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d8f7      	bhi.n	80041ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	4413      	add	r3, r2
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d108      	bne.n	80041ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	685a      	ldr	r2, [r3, #4]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	441a      	add	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	441a      	add	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d118      	bne.n	8004234 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	4b14      	ldr	r3, [pc, #80]	@ (8004258 <prvInsertBlockIntoFreeList+0xac>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	429a      	cmp	r2, r3
 800420c:	d00d      	beq.n	800422a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685a      	ldr	r2, [r3, #4]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	441a      	add	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	e008      	b.n	800423c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800422a:	4b0b      	ldr	r3, [pc, #44]	@ (8004258 <prvInsertBlockIntoFreeList+0xac>)
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	601a      	str	r2, [r3, #0]
 8004232:	e003      	b.n	800423c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	429a      	cmp	r2, r3
 8004242:	d002      	beq.n	800424a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800424a:	bf00      	nop
 800424c:	3714      	adds	r7, #20
 800424e:	46bd      	mov	sp, r7
 8004250:	bc80      	pop	{r7}
 8004252:	4770      	bx	lr
 8004254:	200011d8 	.word	0x200011d8
 8004258:	200011e0 	.word	0x200011e0

0800425c <memset>:
 800425c:	4603      	mov	r3, r0
 800425e:	4402      	add	r2, r0
 8004260:	4293      	cmp	r3, r2
 8004262:	d100      	bne.n	8004266 <memset+0xa>
 8004264:	4770      	bx	lr
 8004266:	f803 1b01 	strb.w	r1, [r3], #1
 800426a:	e7f9      	b.n	8004260 <memset+0x4>

0800426c <_reclaim_reent>:
 800426c:	4b29      	ldr	r3, [pc, #164]	@ (8004314 <_reclaim_reent+0xa8>)
 800426e:	b570      	push	{r4, r5, r6, lr}
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4604      	mov	r4, r0
 8004274:	4283      	cmp	r3, r0
 8004276:	d04b      	beq.n	8004310 <_reclaim_reent+0xa4>
 8004278:	69c3      	ldr	r3, [r0, #28]
 800427a:	b1ab      	cbz	r3, 80042a8 <_reclaim_reent+0x3c>
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	b16b      	cbz	r3, 800429c <_reclaim_reent+0x30>
 8004280:	2500      	movs	r5, #0
 8004282:	69e3      	ldr	r3, [r4, #28]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	5959      	ldr	r1, [r3, r5]
 8004288:	2900      	cmp	r1, #0
 800428a:	d13b      	bne.n	8004304 <_reclaim_reent+0x98>
 800428c:	3504      	adds	r5, #4
 800428e:	2d80      	cmp	r5, #128	@ 0x80
 8004290:	d1f7      	bne.n	8004282 <_reclaim_reent+0x16>
 8004292:	69e3      	ldr	r3, [r4, #28]
 8004294:	4620      	mov	r0, r4
 8004296:	68d9      	ldr	r1, [r3, #12]
 8004298:	f000 f864 	bl	8004364 <_free_r>
 800429c:	69e3      	ldr	r3, [r4, #28]
 800429e:	6819      	ldr	r1, [r3, #0]
 80042a0:	b111      	cbz	r1, 80042a8 <_reclaim_reent+0x3c>
 80042a2:	4620      	mov	r0, r4
 80042a4:	f000 f85e 	bl	8004364 <_free_r>
 80042a8:	6961      	ldr	r1, [r4, #20]
 80042aa:	b111      	cbz	r1, 80042b2 <_reclaim_reent+0x46>
 80042ac:	4620      	mov	r0, r4
 80042ae:	f000 f859 	bl	8004364 <_free_r>
 80042b2:	69e1      	ldr	r1, [r4, #28]
 80042b4:	b111      	cbz	r1, 80042bc <_reclaim_reent+0x50>
 80042b6:	4620      	mov	r0, r4
 80042b8:	f000 f854 	bl	8004364 <_free_r>
 80042bc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80042be:	b111      	cbz	r1, 80042c6 <_reclaim_reent+0x5a>
 80042c0:	4620      	mov	r0, r4
 80042c2:	f000 f84f 	bl	8004364 <_free_r>
 80042c6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80042c8:	b111      	cbz	r1, 80042d0 <_reclaim_reent+0x64>
 80042ca:	4620      	mov	r0, r4
 80042cc:	f000 f84a 	bl	8004364 <_free_r>
 80042d0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80042d2:	b111      	cbz	r1, 80042da <_reclaim_reent+0x6e>
 80042d4:	4620      	mov	r0, r4
 80042d6:	f000 f845 	bl	8004364 <_free_r>
 80042da:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80042dc:	b111      	cbz	r1, 80042e4 <_reclaim_reent+0x78>
 80042de:	4620      	mov	r0, r4
 80042e0:	f000 f840 	bl	8004364 <_free_r>
 80042e4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80042e6:	b111      	cbz	r1, 80042ee <_reclaim_reent+0x82>
 80042e8:	4620      	mov	r0, r4
 80042ea:	f000 f83b 	bl	8004364 <_free_r>
 80042ee:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80042f0:	b111      	cbz	r1, 80042f8 <_reclaim_reent+0x8c>
 80042f2:	4620      	mov	r0, r4
 80042f4:	f000 f836 	bl	8004364 <_free_r>
 80042f8:	6a23      	ldr	r3, [r4, #32]
 80042fa:	b14b      	cbz	r3, 8004310 <_reclaim_reent+0xa4>
 80042fc:	4620      	mov	r0, r4
 80042fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004302:	4718      	bx	r3
 8004304:	680e      	ldr	r6, [r1, #0]
 8004306:	4620      	mov	r0, r4
 8004308:	f000 f82c 	bl	8004364 <_free_r>
 800430c:	4631      	mov	r1, r6
 800430e:	e7bb      	b.n	8004288 <_reclaim_reent+0x1c>
 8004310:	bd70      	pop	{r4, r5, r6, pc}
 8004312:	bf00      	nop
 8004314:	20000010 	.word	0x20000010

08004318 <__libc_init_array>:
 8004318:	b570      	push	{r4, r5, r6, lr}
 800431a:	2600      	movs	r6, #0
 800431c:	4d0c      	ldr	r5, [pc, #48]	@ (8004350 <__libc_init_array+0x38>)
 800431e:	4c0d      	ldr	r4, [pc, #52]	@ (8004354 <__libc_init_array+0x3c>)
 8004320:	1b64      	subs	r4, r4, r5
 8004322:	10a4      	asrs	r4, r4, #2
 8004324:	42a6      	cmp	r6, r4
 8004326:	d109      	bne.n	800433c <__libc_init_array+0x24>
 8004328:	f000 f870 	bl	800440c <_init>
 800432c:	2600      	movs	r6, #0
 800432e:	4d0a      	ldr	r5, [pc, #40]	@ (8004358 <__libc_init_array+0x40>)
 8004330:	4c0a      	ldr	r4, [pc, #40]	@ (800435c <__libc_init_array+0x44>)
 8004332:	1b64      	subs	r4, r4, r5
 8004334:	10a4      	asrs	r4, r4, #2
 8004336:	42a6      	cmp	r6, r4
 8004338:	d105      	bne.n	8004346 <__libc_init_array+0x2e>
 800433a:	bd70      	pop	{r4, r5, r6, pc}
 800433c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004340:	4798      	blx	r3
 8004342:	3601      	adds	r6, #1
 8004344:	e7ee      	b.n	8004324 <__libc_init_array+0xc>
 8004346:	f855 3b04 	ldr.w	r3, [r5], #4
 800434a:	4798      	blx	r3
 800434c:	3601      	adds	r6, #1
 800434e:	e7f2      	b.n	8004336 <__libc_init_array+0x1e>
 8004350:	08004504 	.word	0x08004504
 8004354:	08004504 	.word	0x08004504
 8004358:	08004504 	.word	0x08004504
 800435c:	08004508 	.word	0x08004508

08004360 <__retarget_lock_acquire_recursive>:
 8004360:	4770      	bx	lr

08004362 <__retarget_lock_release_recursive>:
 8004362:	4770      	bx	lr

08004364 <_free_r>:
 8004364:	b538      	push	{r3, r4, r5, lr}
 8004366:	4605      	mov	r5, r0
 8004368:	2900      	cmp	r1, #0
 800436a:	d040      	beq.n	80043ee <_free_r+0x8a>
 800436c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004370:	1f0c      	subs	r4, r1, #4
 8004372:	2b00      	cmp	r3, #0
 8004374:	bfb8      	it	lt
 8004376:	18e4      	addlt	r4, r4, r3
 8004378:	f000 f83c 	bl	80043f4 <__malloc_lock>
 800437c:	4a1c      	ldr	r2, [pc, #112]	@ (80043f0 <_free_r+0x8c>)
 800437e:	6813      	ldr	r3, [r2, #0]
 8004380:	b933      	cbnz	r3, 8004390 <_free_r+0x2c>
 8004382:	6063      	str	r3, [r4, #4]
 8004384:	6014      	str	r4, [r2, #0]
 8004386:	4628      	mov	r0, r5
 8004388:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800438c:	f000 b838 	b.w	8004400 <__malloc_unlock>
 8004390:	42a3      	cmp	r3, r4
 8004392:	d908      	bls.n	80043a6 <_free_r+0x42>
 8004394:	6820      	ldr	r0, [r4, #0]
 8004396:	1821      	adds	r1, r4, r0
 8004398:	428b      	cmp	r3, r1
 800439a:	bf01      	itttt	eq
 800439c:	6819      	ldreq	r1, [r3, #0]
 800439e:	685b      	ldreq	r3, [r3, #4]
 80043a0:	1809      	addeq	r1, r1, r0
 80043a2:	6021      	streq	r1, [r4, #0]
 80043a4:	e7ed      	b.n	8004382 <_free_r+0x1e>
 80043a6:	461a      	mov	r2, r3
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	b10b      	cbz	r3, 80043b0 <_free_r+0x4c>
 80043ac:	42a3      	cmp	r3, r4
 80043ae:	d9fa      	bls.n	80043a6 <_free_r+0x42>
 80043b0:	6811      	ldr	r1, [r2, #0]
 80043b2:	1850      	adds	r0, r2, r1
 80043b4:	42a0      	cmp	r0, r4
 80043b6:	d10b      	bne.n	80043d0 <_free_r+0x6c>
 80043b8:	6820      	ldr	r0, [r4, #0]
 80043ba:	4401      	add	r1, r0
 80043bc:	1850      	adds	r0, r2, r1
 80043be:	4283      	cmp	r3, r0
 80043c0:	6011      	str	r1, [r2, #0]
 80043c2:	d1e0      	bne.n	8004386 <_free_r+0x22>
 80043c4:	6818      	ldr	r0, [r3, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	4408      	add	r0, r1
 80043ca:	6010      	str	r0, [r2, #0]
 80043cc:	6053      	str	r3, [r2, #4]
 80043ce:	e7da      	b.n	8004386 <_free_r+0x22>
 80043d0:	d902      	bls.n	80043d8 <_free_r+0x74>
 80043d2:	230c      	movs	r3, #12
 80043d4:	602b      	str	r3, [r5, #0]
 80043d6:	e7d6      	b.n	8004386 <_free_r+0x22>
 80043d8:	6820      	ldr	r0, [r4, #0]
 80043da:	1821      	adds	r1, r4, r0
 80043dc:	428b      	cmp	r3, r1
 80043de:	bf01      	itttt	eq
 80043e0:	6819      	ldreq	r1, [r3, #0]
 80043e2:	685b      	ldreq	r3, [r3, #4]
 80043e4:	1809      	addeq	r1, r1, r0
 80043e6:	6021      	streq	r1, [r4, #0]
 80043e8:	6063      	str	r3, [r4, #4]
 80043ea:	6054      	str	r4, [r2, #4]
 80043ec:	e7cb      	b.n	8004386 <_free_r+0x22>
 80043ee:	bd38      	pop	{r3, r4, r5, pc}
 80043f0:	2000132c 	.word	0x2000132c

080043f4 <__malloc_lock>:
 80043f4:	4801      	ldr	r0, [pc, #4]	@ (80043fc <__malloc_lock+0x8>)
 80043f6:	f7ff bfb3 	b.w	8004360 <__retarget_lock_acquire_recursive>
 80043fa:	bf00      	nop
 80043fc:	20001328 	.word	0x20001328

08004400 <__malloc_unlock>:
 8004400:	4801      	ldr	r0, [pc, #4]	@ (8004408 <__malloc_unlock+0x8>)
 8004402:	f7ff bfae 	b.w	8004362 <__retarget_lock_release_recursive>
 8004406:	bf00      	nop
 8004408:	20001328 	.word	0x20001328

0800440c <_init>:
 800440c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800440e:	bf00      	nop
 8004410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004412:	bc08      	pop	{r3}
 8004414:	469e      	mov	lr, r3
 8004416:	4770      	bx	lr

08004418 <_fini>:
 8004418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800441a:	bf00      	nop
 800441c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800441e:	bc08      	pop	{r3}
 8004420:	469e      	mov	lr, r3
 8004422:	4770      	bx	lr
